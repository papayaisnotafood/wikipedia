<mediawiki xsi:schemaLocation="http://www.mediawiki.org/xml/export-0.10/ http://www.mediawiki.org/xml/export-0.10.xsd" version="0.10" xml:lang="zh">
<siteinfo>
<sitename>Wikipedia</sitename>
<dbname>zhwiki</dbname>
<base>
https://zh.wikipedia.org/wiki/Wikipedia:%E9%A6%96%E9%A1%B5
</base>
<generator>MediaWiki 1.37.0-wmf.1</generator>
<case>first-letter</case>
<namespaces>
<namespace key="-2" case="first-letter">Media</namespace>
<namespace key="-1" case="first-letter">Special</namespace>
<namespace key="0" case="first-letter"/>
<namespace key="1" case="first-letter">Talk</namespace>
<namespace key="2" case="first-letter">User</namespace>
<namespace key="3" case="first-letter">User talk</namespace>
<namespace key="4" case="first-letter">Wikipedia</namespace>
<namespace key="5" case="first-letter">Wikipedia talk</namespace>
<namespace key="6" case="first-letter">File</namespace>
<namespace key="7" case="first-letter">File talk</namespace>
<namespace key="8" case="first-letter">MediaWiki</namespace>
<namespace key="9" case="first-letter">MediaWiki talk</namespace>
<namespace key="10" case="first-letter">Template</namespace>
<namespace key="11" case="first-letter">Template talk</namespace>
<namespace key="12" case="first-letter">Help</namespace>
<namespace key="13" case="first-letter">Help talk</namespace>
<namespace key="14" case="first-letter">Category</namespace>
<namespace key="15" case="first-letter">Category talk</namespace>
<namespace key="100" case="first-letter">Portal</namespace>
<namespace key="101" case="first-letter">Portal talk</namespace>
<namespace key="102" case="first-letter">WikiProject</namespace>
<namespace key="103" case="first-letter">WikiProject talk</namespace>
<namespace key="118" case="first-letter">Draft</namespace>
<namespace key="119" case="first-letter">Draft talk</namespace>
<namespace key="828" case="first-letter">Module</namespace>
<namespace key="829" case="first-letter">Module talk</namespace>
<namespace key="2300" case="first-letter">Gadget</namespace>
<namespace key="2301" case="first-letter">Gadget talk</namespace>
<namespace key="2302" case="case-sensitive">Gadget definition</namespace>
<namespace key="2303" case="case-sensitive">Gadget definition talk</namespace>
<namespace key="2600" case="first-letter">Topic</namespace>
</namespaces>
</siteinfo>
<page>
<title>薩克斯本修復</title>
<ns>0</ns>
<id>7400515</id>
<revision>
<id>65237657</id>
<parentid>65237613</parentid>
<timestamp>2021-04-17T02:18:19Z</timestamp>
<contributor>
<username>Forgetmyself</username>
<id>487182</id>
</contributor>
<minor/>
<comment>/* 21世紀 */ 空格</comment>
<model>wikitext</model>
<format>text/x-wiki</format>
<text bytes="29233" xml:space="preserve">
{{noteTA | G1 = USState | G2 = PresidentsUS }} '''薩克斯本修復'''（{{Lang-en|Saxbe fix}}，{{IPAc-en|ˈ|s|æ|k|s|.|b|iː}}），或被稱為'''工资削減'''，是一個避免違反美國憲法中的「無資格條款」的機制。该條款禁止总统任命国会议员担任在其總統任期内所设設立的職位，或目的為增加其薪酬或福利的職務。该条款仅限于'''「'''文职职位'''」'''，以便不限制[[兵役]]<ref name=":4">{{Cite web|title=Constitutional Ineligibility: What Does the Emoluments Clause Mean?|url=https://web.archive.org/web/20090202050128/http://www.heritage.org/Research/LegalIssues/wm2149.cfm|accessdate=2021-03-24|author=David F Forte|date=2009-02-02}}</ref>。 為了防止道德沖突，[[詹姆斯·麦迪逊|詹姆斯·麥迪遜]]在[[美利坚合众国制宪会议|制憲會議]]上提出了此一措辭，經過辯論和其他[[美国开国元勋|開國元勳]]的修改，該措辭被採納為憲法中的「無資格條款」。歷史上，人們採取了許多手段來規避或遵守這些限制，包括提名其他人選、等待至被提名人的議員任期屆滿、完全無視該條款，或將薪酬減至被提名人就職前的水平。該程序以參議員[[William Saxbe|威廉·薩可斯本]]（William Saxbe）之姓氏命名為「薩克斯本修復」。針對薩克斯本的解決方案其後成為美國兩黨總統委任美國國會現任議員加入[[美国内阁|美國內閣]]的一個解決辦法，雖然這方法並未被普遍接受。 在[[贝拉克·奥巴马|巴拉克·歐巴馬]]之前，曾有四次針對總統任命人選的工資削減。其中，前兩次涉及共和黨總統當選人[[威廉·霍华德·塔夫脱|威廉·霍華德·塔虎脫]]和[[理查德·尼克松|理查·尼克森]]的內閣人選，後兩次則是針對民主黨總統當選人[[吉米·卡特]]和[[比尔·克林顿|比爾·柯林頓]]所指定的內閣人選所實施的。國會在奧巴馬就任總統前幾周又批准了兩項工資削減法案，為他指定的內閣人選做准備。自20世紀80年代以來，薩克斯本修復只是針對個案的。該條款在學術界或司法界受到的關注相對較少；現在稀少的爭論主要集中在討論回退薪資是否符合憲法中的 「無資格條款」。 == 背景 == [[File:James Madison by Gilbert Stuart.jpg|thumb|left|[[詹姆斯·麦迪逊|詹姆斯·麥迪遜]]设想的伦理冲突，后来催生了薩克斯本修復]] 詹姆斯·麥迪遜於其費城會議之筆記中表示，他担心国会议员会创造新的联邦工作岗位，或者提高现有工作岗位的工资，然后将这些工作岗位据为己有。他写道，为个人利益而不必要地设立职位和增加薪水的腐败立法行为，是他最担心的问题之一。<ref name="CI">{{cite web|title=Constitutional Ineligibility: What Does the Emoluments Clause Mean?|url=http://www.heritage.org/Research/LegalIssues/wm2149.cfm|author=Forte, David F.|date=2008-12-03|publisher=The Heritage Foundation|access-date=2009-01-24|archive-url=https://web.archive.org/web/20090202050128/http://www.heritage.org/Research/LegalIssues/wm2149.cfm|archive-date=2009-02-02|dead-url=no}}</ref> 与会代表一致认为，任何国会议员在任职期间都不应该有资格被任命行政职位。最终，麦迪逊提出了一个方案：'''「'''议员在立法机构任职期间，不应设立或增加任何职务'''」'''；这引起了广泛的辩论。 代表们取消了对国会议员担任州政府职务的禁令，理由是有时允许担任州政府职务可能符合国家的最佳利益。<ref name=CI/><ref name=SpadotCaaP>Yates, pp. 47–48.</ref> 因此，[[美国宪法第一条|美国宪法第1条第6款第2项]]禁止國會自行增加薪資，旨在保护政府各部门的 「分权」。從前在[[英国议会]]中出现的腐败现象，是宪法制定者在辩论时的考虑因素之一。<ref>{{Cite book|url=https://www.worldcat.org/oclc/12664760|publisher=West Pub. Co|date=1986|location=St. Paul, Minn.|isbn=0-314-93436-7|oclc=12664760|first=Ronald D.|last=Rotunda|first2=J. Nelson|last2=Young|title=Treatise on constitutional law : substance and procedure|access-date=2021-04-17|archive-date=2021-04-17|archive-url=https://web.archive.org/web/20210417021136/https://www.worldcat.org/title/treatise-on-constitutional-law-substance-and-procedure/oclc/12664760|dead-url=no}}</ref> {{Quote box | quote = 參議員或眾議員不得在當選任期內擔任合眾國政府任何新添設的職位，或在其任期內支取因新職位而增添的俸給；在合眾國政府供職的人，不得在其任職期間擔任國會議員<ref name="USConstitution">{{cite book |title=《美国政府与政治》 |author=李道揆 |publisher=商务印书馆 |pages=775-799 |year=1999}}</ref>。 | source = [[美國憲法第一條|美國憲法第一條第六款第二項]] | width = 40% | align=right }} == 歷史 == {{multiple image | footer = 無資格條款阻碍了华盛顿总统1793年对[[威廉·帕特森]]（左）的任命。他取代了托馬斯·約翰遜（右）在[[美国最高法院]]中的席次 | footer_align=left | image1 = William Paterson copy.jpg | width1 = 91 | image2 = Thomas Johnson (governor).jpeg | width2 = 89}} {{multiple image | footer = 在不考虑宪法问题的情况下，克利夫兰总统任命了马修·兰森（左）担任美国驻墨西哥大使。爱德华·沃尔科特（右）担任了由威廉·麦金利总统任命的總統特別助理以規避「無資格條款」 | footer_align=left | image1 = Matt Whitaker Ransom - Brady-Handy.jpg | width1 = 95 | image2 = Edward Oliver Wolcott 2.jpg | width2 = 85}} 早在1793年，條款就已经阻礙了任命案。1793年2月27日，在大法官托托馬斯·約翰遜辞职后，[[乔治·华盛顿|喬治·華盛頓]]总统试图任命[[威廉·帕特森]]为最高法院大法官。然而，正在担任新泽西州州长的帕特森此前已被选为参议院议员，任期将于1793年3月4日届满。华盛顿總統撤回了提名，并延期至3月4日，即帕特森的參議員任期届满时再行提名。<ref name = TEC104>O'Connor, J. p. 104</ref> === 19世紀 === 西元1882年，時任[[美國司法部長|司法部長]]的正式意见认为，从国会辞职并不能使议员获得任命有於其議員任內調漲薪水之聯邦职务，因为该条款是针对议员的任期而言的，即使议员辞职，该任期仍然存在<ref name=":1" />。 因此，即使前爱荷华州州长[[薩繆爾·柯克伍德]]辞去了任期到1883年3月才屆滿的参议员席位，但他仍然没有资格被任命为美国关税专员。<ref>{{Cite journal|title=Recent Patent and Trade Mark Decisions|url=http://dx.doi.org/10.1038/scientificamerican08081896-134a|date=1896-08-08|journal=Scientific American|issue=6|doi=10.1038/scientificamerican08081896-134a|volume=75|pages=134–135|issn=0036-8733|access-date=2021-04-17|archive-date=2021-04-17|archive-url=https://web.archive.org/web/20210417021137/https://www.scientificamerican.com/article/recent-patent-and-trade-mark-decisi-1896-08/|dead-url=no}}</ref> 1896年，财政部主计长事后认定，前参议员馬修·蘭森擔任驻墨西哥大使的任命是无效的，因为在蘭森的參議員任期内，该职务的待遇曾有增加；这一迟来的发现使得蘭森不能领取工资。<ref name=":1">See 2 Decisions of the Comptroller of the Treasury 135 (1896).</ref> === 20世紀 === 西元1909年，總統當選人塔夫脱宣布打算提名參議员[[菲兰德·C·诺克斯|菲蘭德·C·諾克斯]]擔任国务卿<ref> Shortly after the announcement, the Clause emerged as a problem that caught those involved by surprise:</ref>。宣布后不久，该条款出现的问题让相关人员大吃一驚：薩克斯本的參議員任期要到西元1911年才结束，而在该任期内，国会曾决定增加國務卿的薪酬。 對此，国会议员讨论了是否應恢复所有美国内阁成员的工资，在参议院司法委员会的建议下，国会通过了一项法案，只把国务卿的工资降到薩克斯本任期开始前的水平，认为这样就能解决这个问题。但[[美国众议院]]的反对声音更大在。采用了不同的程序规则后，该法案以173比115的多数票通过，[[富兰克林·德拉诺·罗斯福|罗斯福]]总统随后签署了该法案。 3月4日，薩克斯本法案正式生效，国务卿的工资（不包括其他内阁成员的薪資）从12000美元恢复到8000美元。3月5日，参议院确认了塔夫脱的國務卿任命案，3月6日，诺克斯正式上任。 1922年，当参议员威廉·S·肯楊获准接受[[沃伦·盖玛利尔·哈定|沃倫·哈定]]總統的任命，担任聯邦第八巡迴法院的巡迴法官时，该条款的適用得到了进一步的界定。 時任司法部长哈里·M·多爾蒂的结论是，該事件並無違法，因为该职位薪酬的增加发生在肯楊获被提名时的任期之前。 （多爾蒂的意见后来在柯林頓政府提名[[比尔·理查森|比爾·李察遜]]担任駐联合国大使时再度被提起。）<ref>{{Cite web|title=APPLICATION OF THE INELIGIBILITY CLAUSE|url=https://web.archive.org/web/20081117172557/http://www.usdoj.gov/olc/inelbr2.htm|accessdate=2021-03-24|author=CHRISTOPHER SCHROEDER|date=2008-11-17|work=}}</ref> 尼克森政府在第一年就避開了 「无资格条款」，1969年尼克森任命众议员[[唐纳德·拉姆斯菲尔德|唐納德·倫斯斐]]为经济办公室主任。虽然在唐納德作為議員的任职期间，该办公室的工资已经提高到42500美元，但唐納德并没有得到该职位的工资──唐納德是以同样的42,500美元的薪資兼任总统助理，这个職位不在该条款所限制的范围内。 1973年10月20日，埃利奧特·理查森（Elliot Lee Richardson）辞去了其[[美国国防部长|國防部長]]的職務，尼克森于11月1日提名了萨克斯本作為新任的國防部長。尽管時值[[水门事件]]，但尼克森仍然認為参议院会通過其任命案。 ===21世紀=== 2008年，随着参议员[[希拉里·克林顿|希拉蕊·柯林頓]]是否成為总统當選人巴拉克·歐巴馬的首任国务卿人選的猜测，「薩克斯本修復」一词重新进入公眾視野，2008年12月1日，奥巴马确认提名克林顿。<ref name=":0">{{Cite web|title=Clinton's future paycheck cut|url=https://politicalticker.blogs.cnn.com/2008/12/11/clintons-future-paycheck-cut/|accessdate=2021-03-24|language=en|archive-date=2021-03-25|archive-url=https://web.archive.org/web/20210325064118/https://politicalticker.blogs.cnn.com/2008/12/11/clintons-future-paycheck-cut/|dead-url=no}}</ref> 從她2007年1月3日開始的參議員就職期间，美国國務卿工资从18.6萬美元增加到2008年1月的19.1萬美元，2009年1月又增加到19.6萬美元。 如果國會沒有將國務卿薪資調整回其就任前的數字，柯林頓将没有资格成為國務卿，直到2013年1月美国第112届国会结束时，也就是奥巴马該任期即将结束时。2008年12月10日，参议院以一致同意的方式通过了萨克斯本修复立法，将国务卿的工资降回2007年1月1日的18.6万美元。[[乔治·布什|布希]]总统于12月19日将该决议簽署使其成為正式法律，取消了希拉蕊在2007年1月3日至2013年1月3日的参议院任期内已经或将要增加的所有薪酬。<ref name=":0" /><ref>{{cite news| url = http://thecaucus.blogs.nytimes.com/2008/12/19/bush-approves-bill-reducing-secretary-of-states-pay/| title = Bush Approves Bill Reducing Secretary of State's Pay| author = Falcone, Michael| newspaper = [[The New York Times]]| date = December 19, 2008| access-date = December 19, 2008| archive-date = 2010-11-19| archive-url = https://web.archive.org/web/20101119122455/http://thecaucus.blogs.nytimes.com/2008/12/19/bush-approves-bill-reducing-secretary-of-states-pay/| dead-url = no}}</ref> 保守派民間團體'''「'''司法观察'''」'''在總統提名后向媒體表示，认为該法案違憲，並認為希拉蕊最早要到2013年才能出任国务卿一職<ref>{{Cite web|title=Clinton's nomination popular, but is it constitutional? - CNN.com|url=http://edition.cnn.com/2008/POLITICS/12/04/clinton.eligible/index.html|accessdate=2021-03-26|work=edition.cnn.com|archive-date=2021-02-27|archive-url=https://web.archive.org/web/20210227132430/http://edition.cnn.com/2008/POLITICS/12/04/clinton.eligible/index.html|dead-url=no}}</ref>，隨後更表示可能会通过诉讼来阻止希拉蕊的上任<ref>{{Cite web|title=Clinton selection could face court challenge|url=https://www.politico.com/blogs/politico-now/2008/12/clinton-selection-could-face-court-challenge-014737|accessdate=2021-03-26|last=Raju|first=Manu|work=POLITICO|language=en|archive-date=2018-08-11|archive-url=https://web.archive.org/web/20180811110947/https://www.politico.com/blogs/politico-now/2008/12/clinton-selection-could-face-court-challenge-014737|dead-url=no}}</ref>。2009年1月29日，也就是希拉蕊宣誓就职一周后，国务院雇员大卫·罗德梅尔（David Rodearmel）向美国哥伦比亚特区地方法院提起诉讼<ref>{{Cite web|title=Lawsuit argues Clinton ineligible for State post|url=https://www.nbcnews.com/id/wbna28930617|accessdate=2021-03-26|work=NBC News|language=en|archive-date=2021-04-17|archive-url=https://web.archive.org/web/20210417021136/https://www.nbcnews.com/id/wbna28930617|dead-url=no}}</ref>，訴狀宣称，希拉蕊「在宪法上没有资格 」担任国务卿，不能强迫罗德梅尔在她手下任职，因为这将违反他在1991年成為美鶻官員時的誓言，即对美国憲法'''「'''忠诚和效忠'''」'''<ref>{{Cite web|title=Lawsuit argues Clinton ineligible for State post|url=https://www.nbcnews.com/id/wbna28930617|accessdate=2021-03-26|work=NBC News|language=en|archive-date=2021-04-17|archive-url=https://web.archive.org/web/20210417021145/https://www.nbcnews.com/id/wbna28930617|dead-url=no}}</ref>。2月6日，一个由三名法官组成的合议庭被任命审理此案<ref>{{Cite web|title=RODEARMEL v. CLINTON et al|url=https://dockets.justia.com/docket/district-of-columbia/dcdce/1:2009cv00171/134928|accessdate=2021-03-26|work=Justia Dockets & Filings|language=en|archive-date=2020-10-23|archive-url=https://web.archive.org/web/20201023115605/https://dockets.justia.com/docket/district-of-columbia/dcdce/1:2009cv00171/134928|dead-url=no}}</ref>。5月20日，奥巴马政府法律顾问办公室向法院提交了一份意见书，称克林顿的任命并不违反《美國憲法》<ref>{{Cite web|title=DOJ: Clinton, Salazar Constitutionally Eligible to Serve|url=https://legaltimes.typepad.com/blt/2009/06/doj-clinton-salazar-constitutionally-eligible-to-serve.html|accessdate=2021-03-26|work=The BLT: The Blog of Legal Times|archive-date=2020-10-24|archive-url=https://web.archive.org/web/20201024034131/https://legaltimes.typepad.com/blt/2009/06/doj-clinton-salazar-constitutionally-eligible-to-serve.html|dead-url=no}}</ref>。2009年10月30日，地方法院驳回了此案，並表示「由于罗德梅尔未能指称希拉蕊采取了任何行动'''──'''更不用说使他受到侵害的行动'''──'''他不属于《国务卿薪酬法》所保护的『利益区』」<ref>{{Cite web|title=Clinton Wins Dismissal of Suit Challenging Selection (Update1) - Bloo…|url=http://archive.is/tBgM|accessdate=2021-03-26|date=2012-07-21|work=archive.is}}</ref>。 == 合法性 == 随着时间的推移，萨克斯本修復法在政治上已经没有争议了<ref name=":2">{{Cite book|url=http://archive.org/details/interpr_xxx_2006_00_6818|publisher=Oxford ; New York : Oxford University Press|date=2006|isbn=978-0-19-927413-0|last=Georgetown University Law Library|title=Interpreting constitutions : a comparative study}}</ref>。民主党和共和党政府都使用过该修復方法，事实上，共和党卸任总统喬治·沃克·布希曾帮助民主党新任总统比爾·柯林頓执行该修復法，在克林顿就职前夕将該修正法签署为法律。为奥巴马内阁所制定的修復方案在众议院和参议院都没有经过修改就一致通过了，即将离任的共和党总统喬治·沃克·布希将為希拉蕊·柯林頓和[[肯·薩拉查]]所制定的萨克斯本修復方案签署为新任奥巴马政府的法律。<ref>{{Cite web|title=S.J.Res.3 - 111th Congress (2009-2010): A joint resolution ensuring that the compensation and other emoluments attached to the office of Secretary of the Interior are those which were in effect on January 1, 2005.|url=https://www.congress.gov/bill/111th-congress/senate-joint-resolution/3|accessdate=2021-04-10|date=2009-01-16|last=Reid|first=Harry|work=www.congress.gov|archive-date=2021-04-10|archive-url=https://web.archive.org/web/20210410121633/https://www.congress.gov/bill/111th-congress/senate-joint-resolution/3|dead-url=no}}</ref> 然而，该作法的合宪性一直备受争议，美国最高法院从未直接对此作出裁决。<ref>{{Cite book|url=https://www.worldcat.org/oclc/156816900|publisher=Oxford University Press|date=2007|location=New York, N.Y.|isbn=978-0-19-533346-6|oclc=156816900|first=Adrian|last=Vermeule|title=Mechanisms of democracy : institutional design writ small|access-date=2021-04-17|archive-date=2021-04-17|archive-url=https://web.archive.org/web/20210417021142/https://www.worldcat.org/title/mechanisms-of-democracy-institutional-design-writ-small/oclc/156816900|dead-url=no}}</ref><ref name=":2" />任何对该条款的批判，首先要研究该条款所使用的文字。「任何参议员或众议员在其当选期间，不得被任命担任美国权力机构下的在该期间设立的，或其薪酬是在该期间增加的'''……'''。」在过去的争论中，所有的作法都有争议。「历史上，受該條款所規範的對象一直都有明確的定論：所有的学者都认为该条款专指所有的国会议员。该条款使用了动词 「当选（elected）」。如果一名以辭職的参议员在任期届满前接受了联邦职位的提名，这可能是一个疑慮的行為<ref>{{Cite web|title=APPLICATION OF THE INELIGIBILITY CLAUSE|url=https://web.archive.org/web/20081117172557/http://www.usdoj.gov/olc/inelbr2.htm|accessdate=2021-04-10|author=Christopher Henry Schroeder|date=2008-11-17|work=|language=en}}</ref>。 「在其当选期间 」一语一直没有争议。约瑟夫·斯托里大法官在其《美国宪法评注》中阐释说，該條款在議員的当选任期结束时即告失效<ref>{{Cite book|chapter=Sport and Loyalty|title=The Sociology of Loyalty|url=http://dx.doi.org/10.1007/978-0-387-71368-7_6|publisher=Springer US|location=Boston, MA|isbn=978-0-387-71367-0|pages=101–116|first=James|last=Connor|access-date=2021-04-17|archive-date=2021-04-17|archive-url=https://web.archive.org/web/20210417021143/https://link.springer.com/chapter/10.1007%2F978-0-387-71368-7_6|dead-url=no}}</ref>这一观点被普遍接受。 另一个澄清是在1969年，当时新连任的众议员梅爾文·萊爾德是总统當選人尼克森的国防部长人选，而国会有望在新任期内提高内阁成员的薪酬。 <ref name=":3">{{Cite news|url=https://query.nytimes.com/mem/page.html?res=F00714FA3F5D127A93C0A9178AD95F478785F9&legacy=true&status=nf|title=1969 Rise in Cabinet Pay Could Prove Bar to Saxbe|work=纽约时报|publisher=纽约时报|date=1973-11-02|language=en}}</ref>司法部长[[拉姆齊·克拉克|拉姆齐·克拉克]]给出了官方意见，萊爾德也遵循了此一意见，即只要莱尔德在加薪生效前加入内阁，就可以在1月3日至1月20日（尼克森上任时）宣誓就职并在新任期内任职，而不会触犯该条款。<ref name=":3" /> === 关于其合宪性的论点 === 解释该条款的一种方式是試圖揣摩立法者的立法宗旨<ref>{{Cite book|title=O'Connor, J. p. 146|pages=}}</ref>。正如[[北卡罗来纳大学法学院]]教授邁克爾·格哈德（Michael Gerhardt）所言，「糾結點不是法律的文字是否被破坏了（它已经被破坏了），而是该条款存在的旨在避免的情況──提名一名能够投票给自己加薪的国会议员的利益冲突是否被避免了」<ref>{{Cite book|url=http://archive.org/details/federal_ger_2003_00_6274|publisher=Durham : Duke University Press|date=2003|isbn=978-0-8223-3199-5|last=Gerhardt|first=Michael J.|title=The Federal appointments process : a constitutional and historical analysis}}</ref>。 这种法律论点的常用术语是 「净增加（net increases）」。「[[保守主义|保守派]]法律思想家布魯斯·費恩认为，「所谓的修复就完美符合该条款的立法宗旨」<ref>{{Cite news|title=Salary clause threatens Clinton's new job|author=Daniel Dombey|work=金融時報|date=2008-12-13|accessdate=2021-04-11|language=en}}</ref>。 如果说薩克斯本修復是解决此一问题的办法，那么一个相关的事实是，自20世纪90年代以来，国会没有投票增加过任何内阁的工资或福利，国会通过行政命令以賦予总统全面调整生活费的權利。然而，「无资格条款」并没有区分通过立法增加薪酬和通过行政命令增加薪酬，<ref>{{Cite book|url=https://www.worldcat.org/oclc/39262005|publisher=Princeton University Press|date=1999|location=Princeton, N.J.|isbn=0-691-00415-3|oclc=39262005|first=Mark V.|last=Tushnet|title=Taking the Constitution away from the courts|access-date=2021-04-17|archive-date=2021-04-17|archive-url=https://web.archive.org/web/20210417021148/https://www.worldcat.org/title/taking-the-constitution-away-from-the-courts/oclc/39262005|dead-url=no}}</ref>1973年萨克斯本听证会期间，[[杜克大学法学院]]教授威廉·范·奧斯汀对此的解释可能是最宽松的，他认为无资格条款只适用于国会任期内设立的新职位，而不适用于所有现有职位的任命。<ref name=":5">{{Cite web|title=Hillary May Be Unconstitutional|url=https://www.cato.org/commentary/hillary-may-be-unconstitutional?queryID=74a80903fb5178929c7a71f105471a0d|accessdate=2021-04-11|author=Ilya Shapiro|date=2008-12-17|publisher=The American Spectator|language=en|archive-date=2021-04-11|archive-url=https://web.archive.org/web/20210411072944/https://www.cato.org/commentary/hillary-may-be-unconstitutional?queryID=74a80903fb5178929c7a71f105471a0d|dead-url=no}}</ref> 在萨克斯本提名聽證會上提出的另一个论点是，宪法制宪者立下「无资格条款」是为了防止国会制定有利于自己成员的法律。任何薩可斯本修復案都是这样的法律，仅仅基于这一事实此行為就应该被予以否定。<ref>{{Cite book|title=O'Connor, J. p. 130}}</ref> === 質疑 === 一旦国会批准减薪且被提名人得以上任，法律专家的结论是，在實例中，不太可能在法院成功地推翻某项任命。最有可能提出申诉的人是受到被提名人的不利影响的个人──例如被拒发[[美国护照|护照]]的人。<ref name=":5" />不太可能有人被认为有资格对任命提出异议。但自从{{Internal link helper/en|合眾國訴「學生挑戰監管機構程序」|United States v. Students Challenging Regulatory Agency Procedures}}（412 US 669）後，最高法院对得以提請訴訟者的要求变得越来越低。<ref>{{Cite book|edition=6th ed|url=https://www.worldcat.org/oclc/44919433|publisher=West Group|date=2000|location=St. Paul, Minn.|isbn=0-314-23748-8|oclc=44919433|first=John E.|last=Nowak|title=Constitutional law|access-date=2021-04-17|archive-date=2021-04-17|archive-url=https://web.archive.org/web/20210417021143/https://www.worldcat.org/title/constitutional-law/oclc/44919433|dead-url=no}}</ref> 事实已经证明，当一项有争议的任命没有采用固定的方式时，很难被承认为有资格。法院已经驳回了對雨果·布萊克法官（{{Internal link helper/en|萊維特單方面判決|Ex parte Levitt}}）和{{Internal link helper/en|阿布納·J·米克瓦|Abner Mikva}}法官的任命提出质疑的诉讼。在这两起案件中，法院都认为原告缺乏质疑该任命的资格<ref name=":4" />。 === 案例 === 「無资格条款」在個案上有几个细微差别，决定了在特定情况下進行工资削減的必要性。<ref name=":4" /> # 它适用于那些已经实际就任的議員，而不是那些已经当选但尚未宣誓就職的議員。 # 根据 「[[马伯利诉麦迪逊案|馬伯利訴麥迪遜案]]」，「任命」一詞是指在提名担任職務时，而不是在批准時。<ref>{{Cite web|title=Marbury v. Madison, 5 U.S. 137 (1803)|url=https://supreme.justia.com/cases/federal/us/5/137/|accessdate=2021-04-11|work=Justia Law|language=en|archive-date=2021-04-13|archive-url=https://web.archive.org/web/20210413194214/https://supreme.justia.com/cases/federal/us/5/137/|dead-url=no}}</ref>虽然首席大法官[[约翰·马歇尔|約翰·馬歇爾]]表示，总统提名人選完全是出於自身意願的，但对其法定权力是有所限制的。<ref>{{Cite book|title=Marbury, 5 U.S. (1 Cranch) at 155, 2 L.Ed. at 66.}}</ref> # 不能通过辞去国会职务来規避这一限制。在司法部长班傑明·H·布魯斯特的书面意见中，该条款适用于 「他当选的任期」，而非议员实际任职的时间。<ref>{{Cite journal|title=Effects of 5,6-dihydroxytryptamine on tyrosine-hydroxylase activity in central catecholaminergic neurons of the rat|url=https://pubmed.ncbi.nlm.nih.gov/17|last=Renaud|first=B.|last2=Buda|first2=M.|date=1975-09-15|journal=Biochemical Pharmacology|issue=18|doi=10.1016/0006-2952(75)90018-0|volume=24|pages=1739–1742|issn=0006-2952|pmid=17|last3=Lewis|first3=B. D.|last4=Pujol|first4=J. F.|access-date=2021-04-17|archive-date=2021-03-18|archive-url=https://web.archive.org/web/20210318214655/https://pubmed.ncbi.nlm.nih.gov/17/|dead-url=no}}</ref> # 根据合眾國诉哈特維爾案，「职务」是指被任命者行使权威性作用的职务。它不适用于临时性的、荣誉性的、咨询性的或临时性的职位。<ref>{{Cite book|chapter=THE CONSTITUTION: A GUIDED TOUR|title=A Practical Companion to the Constitution|url=http://dx.doi.org/10.1525/9780520340657-002|publisher=University of California Press|date=1999-12-31|isbn=978-0-520-34065-7|pages=1–6|access-date=2021-04-17|archive-date=2021-04-17|archive-url=https://web.archive.org/web/20210417021147/https://www.degruyter.com/document/doi/10.1525/9780520340657-002/html|dead-url=no}}</ref> # 根据「麦克莱恩诉美国案」，「薪酬」不仅指工资，还包括糧草和補給品等其他福利。<ref>{{Cite web|title=McLean v. United States, 226 U.S. 374 (1912)|url=https://supreme.justia.com/cases/federal/us/226/374/|accessdate=2021-04-11|work=Justia Law|language=en|archive-date=2021-04-11|archive-url=https://web.archive.org/web/20210411080015/https://supreme.justia.com/cases/federal/us/226/374/|dead-url=no}}</ref> # 在[[林登·约翰逊|林登·約翰遜]]和吉米·卡特两位总统的领导下，[[美国司法部]]認定，只要前国会议员是在加薪生效前被提名的，那么国会何时通过立法增加某项职务的待遇并不重要。<ref>{{Cite web|title=op-olc-v003.pdf {{!}} Department of Justice|url=https://www.justice.gov/olc/file/626801|accessdate=2021-04-11|work=www.justice.gov|archive-date=2021-04-11|archive-url=https://web.archive.org/web/20210411093437/https://www.justice.gov/olc/file/626801|dead-url=no}}</ref> {{Portalbox|美國|政治}} == 参考資料 == {{reflist}} == 參見 == * {{Cite book|title=Congress and the Nation|volume=IV （1973–1976）|editor-last=|publisher=Congressional Quarterly Inc|isbn=0-87187-112-2|url=https://archive.org/details/congressnation45-64cong|last=O'Connor|first=Ann}} * {{Cite book|title=Congress and the Nation|date=30 October 1981|volume=V （1977–1980）|editor-last=|publisher=Congressional Quarterly Inc|isbn=0-87187-216-1|last=O'Connor|first=Ann}} * {{Cite book|title=Congress and the Nation|volume=IX （1993–1996）|editor-last=|publisher=Congressional Quarterly Inc|isbn=1-56802-240-9|url=https://archive.org/details/congressnation00cong|last=O'Connor|first=Ann}} * {{Cite journal|title=The Emoluments Clause: An Anti-Federalist Intruder In A Federalist Constitution|url=http://www.steptoe.com/assets/attachments/3658.PDF|last=O'Connor, John F.|journal=Hofstra Law Review|accessdate=2009-01-25|issue=89|year=1995|volume=24|archive-date=2016-10-02|archive-url=https://web.archive.org/web/20161002003313/http://www.steptoe.com/assets/attachments/3658.PDF|dead-url=no}} * {{Cite book|title=Secret proceedings and debates of the Convention assembled at Philadelphia, in the year 1787, for the purpose of forming the Constitution of the United States of America|last=Yates, Robert|publisher=Wilbur Curtiss|year=1839}} {{美国索引|state=collapsed}} [[Category:美國法制史]] [[Category:美国内阁]] [[Category:美国宪政史]] [[Category:美国联邦政府立法机构]] [[Category:美国政治术语]]
</text>
<sha1>n2imj4zddfpd5i0eks1ag6htik2iy5u</sha1>
</revision>
</page>
<page>
<title>Template:Cite book</title>
<ns>10</ns>
<id>3439403</id>
<revision>
<id>42951139</id>
<parentid>26388264</parentid>
<timestamp>2017-01-25T03:53:06Z</timestamp>
<contributor>
<username>Antigng</username>
<id>1960229</id>
</contributor>
<minor/>
<comment>
bot: massreplace: "<noinclude>{{pp-template|small=yes}}</noinclude>" ->"(null)"
</comment>
<model>wikitext</model>
<format>text/x-wiki</format>
<text bytes="123" xml:space="preserve">
<includeonly>{{#invoke:citation/CS1|citation |CitationClass=book }}</includeonly><noinclude> {{documentation}} </noinclude>
</text>
<sha1>hq4yscm08hccl43rjw83qi7egacgxec</sha1>
</revision>
</page>
<page>
<title>Template:Cite journal</title>
<ns>10</ns>
<id>3439413</id>
<revision>
<id>61209134</id>
<parentid>42951129</parentid>
<timestamp>2020-08-17T11:10:56Z</timestamp>
<contributor>
<username>Xiplus-abot</username>
<id>2737953</id>
</contributor>
<minor/>
<comment>
已更改“[[Template:Cite journal]]”的保护等级：高風險模板：55051引用<!-- [[User:Xiplus-abot/task/3|機器人3]] -->（[编辑=仅允许模板编辑员和管理员]（无限期）[移动=仅允许模板编辑员和管理员]（无限期））
</comment>
<model>wikitext</model>
<format>text/x-wiki</format>
<text bytes="126" xml:space="preserve">
<includeonly>{{#invoke:Citation/CS1|citation |CitationClass=journal }}</includeonly><noinclude> {{documentation}} </noinclude>
</text>
<sha1>9fcytsszanq7xbwi3p28zsneear9938</sha1>
</revision>
</page>
<page>
<title>Template:Cite news</title>
<ns>10</ns>
<id>3439408</id>
<revision>
<id>42941070</id>
<parentid>26388236</parentid>
<timestamp>2017-01-24T05:10:10Z</timestamp>
<contributor>
<username>Stang</username>
<id>1755657</id>
</contributor>
<comment>ep</comment>
<model>wikitext</model>
<format>text/x-wiki</format>
<text bytes="123" xml:space="preserve">
<includeonly>{{#invoke:citation/CS1|citation |CitationClass=news }}</includeonly><noinclude> {{documentation}} </noinclude>
</text>
<sha1>pbjnspfej5gxihr9izxrzkow3f1uf3i</sha1>
</revision>
</page>
<page>
<title>Template:Cite web</title>
<ns>10</ns>
<id>3439400</id>
<revision>
<id>42951130</id>
<parentid>26388197</parentid>
<timestamp>2017-01-25T03:53:03Z</timestamp>
<contributor>
<username>Antigng</username>
<id>1960229</id>
</contributor>
<minor/>
<comment>
bot: massreplace: "<noinclude>{{pp-template|small=yes}}</noinclude>" ->"(null)"
</comment>
<model>wikitext</model>
<format>text/x-wiki</format>
<text bytes="122" xml:space="preserve">
<includeonly>{{#invoke:citation/CS1|citation |CitationClass=web }}</includeonly><noinclude> {{documentation}} </noinclude>
</text>
<sha1>rcgmbcxu7hvs583g1f3rzz4c4dkizda</sha1>
</revision>
</page>
<page>
<title>Template:Country data USA</title>
<ns>10</ns>
<id>854380</id>
<redirect title="Template:Country data United States"/>
<revision>
<id>61208246</id>
<parentid>47355095</parentid>
<timestamp>2020-08-17T10:06:27Z</timestamp>
<contributor>
<username>Xiplus-abot</username>
<id>2737953</id>
</contributor>
<minor/>
<comment>
已更改“[[Template:Country data USA]]”的保护等级：高風險模板：39915引用<!-- [[User:Xiplus-abot/task/3|機器人3]] -->（[编辑=仅允许模板编辑员和管理员]（无限期）[移动=仅允许模板编辑员和管理员]（无限期））
</comment>
<model>wikitext</model>
<format>text/x-wiki</format>
<text bytes="114" xml:space="preserve">
#REDIRECT [[Template:Country_data_United_States]]<noinclude> [[Category:國家資料重定向模板]] </noinclude>
</text>
<sha1>0wnqdfqhuaem1mb4rafrppeils9crbs</sha1>
</revision>
</page>
<page>
<title>Template:Country data United States</title>
<ns>10</ns>
<id>658230</id>
<revision>
<id>61208244</id>
<parentid>43501604</parentid>
<timestamp>2020-08-17T10:06:17Z</timestamp>
<contributor>
<username>Xiplus-abot</username>
<id>2737953</id>
</contributor>
<minor/>
<comment>
已更改“[[Template:Country data United States]]”的保护等级：高風險模板：44737引用<!-- [[User:Xiplus-abot/task/3|機器人3]] -->（[编辑=仅允许模板编辑员和管理员]（无限期）[移动=仅允许模板编辑员和管理员]（无限期））
</comment>
<model>wikitext</model>
<format>text/x-wiki</format>
<text bytes="3876" xml:space="preserve">
<noinclude>{{pp-template|small=yes}}</noinclude>{{ {{{1<noinclude>|country showdata</noinclude>}}} | alias = 美國 | flag alias = Flag of the United States.svg | flag alias-1776 = Grand Union Flag.svg | flag alias-1777 = US flag 13 stars – Betsy Ross.svg | flag alias-1795 = Star-Spangled Banner flag.svg | flag alias-1818 = US flag 20 stars.svg | flag alias-1819 = US flag 21 stars.svg | flag alias-1820 = US flag 23 stars.svg | flag alias-1822 = US flag 24 stars.svg | flag alias-1836 = US flag 25 stars.svg | flag alias-1837 = US flag 26 stars.svg | flag alias-1845 = US flag 27 stars.svg | flag alias-1846 = US flag 28 stars.svg | flag alias-1847 = US flag 29 stars.svg | flag alias-1848 = US flag 30 stars.svg | flag alias-1851 = US flag 31 stars.svg | flag alias-1858 = US flag 32 stars.svg | flag alias-1859 = US flag 33 stars.svg | flag alias-1861 = US flag 34 stars.svg | flag alias-1863 = US flag 35 stars.svg | flag alias-1865 = US flag 36 stars.svg | flag alias-1867 = US flag 37 stars.svg | flag alias-1877 = US flag 38 stars.svg | flag alias-1890 = US flag 43 stars.svg | flag alias-1891 = US flag 44 stars.svg | flag alias-1896 = US flag 45 stars.svg | flag alias-1908 = US flag 46 stars.svg | flag alias-1912 = US flag 48 stars.svg | flag alias-1959 = US flag 49 stars.svg | flag alias-1960 = Flag of the United States (Pantone).svg | flag alias-air force = Flag of the United States Air Force.svg | flag alias-air force seal= Seal of the US Air Force.svg | flag alias-air force roundel= Roundel of the USAF.svg | flag alias-air force logo= US Air Force Logo Solid Colour.svg | flag alias-air force hap= US Army Air Corps Hap Arnold Wings.svg | flag alias-marine corps = Flag of the United States Marine Corps.svg | flag alias-marine corps seal= USMC logo.svg | flag alias-marine corps EGA= Globeanchor.svg | flag alias-coast guard = Ensign of the United States Coast Guard.svg | flag alias-coast guard-1915 = Ensign of the United States Coast Guard (1915-1953).png | flag alias-coast guard flag= Flag of the United States Coast Guard.svg | flag alias-coast guard seal= US-CoastGuard-Seal.svg | flag alias-coast guard mark= CGMark W.svg | flag alias-coast guard guidon= Guidon of the United States Coast Guard.png | link alias-naval = {{#switch:{{{variant|}}}|coast guard|coast guard-1915=United States Coast Guard|美國海軍}} | flag alias-navy = Flag_of_the_United_States_Navy_(official_specifications).svg | flag alias-navy seal= Seal of the United States Department of the Navy.svg | flag alias-navy jack= Naval Jack of the United States.svg | flag alias-navy ACE= Anchor, Constitution, and Eagle.svg | flag alias-army = Flag of the United States Army.svg | flag alias-army seal= Emblem of the United States Department of the Army.svg | flag alias-army logo= US_Army_logo.svg | link alias-basketball = United States {{{mw|men's}}} national {{{age|}}} basketball team | link alias-field hockey = United States {{{mw|men's}}} national field hockey team | link alias-Australian rules football = United States {{{mw|men's}}} national Australian rules football team | size = {{{size|}}} | name = {{#if: {{{name|}}} | {{{name|}}} | 美國 }} | altlink = {{{altlink|}}} | altvar = {{{altvar|}}} | variant = {{{variant|}}} <noinclude> | var1 = 1776 | var2 = 1777 | var3 = 1795 | var4 = 1818 | var5 = 1819 | var6 = 1820 | var7 = 1822 | var8 = 1836 | var9 = 1837 | var10 = 1845 | var11 = 1846 | var12 = 1847 | var13 = 1848 | var14 = 1851 | var15 = 1858 | var16 = 1859 | var17 = 1861 | var18 = 1863 | var19 = 1865 | var20 = 1867 | var21 = 1877 | var22 = 1890 | var23 = 1891 | var24 = 1896 | var25 = 1908 | var26 = 1912 | var27 = 1959 | var28 = 1960 | var29 = coast guard | var30 = coast guard-1915 | redir1 = USA | redir2 = US | redir3 = United States of America | redir4 = U.S. </noinclude> }}
</text>
<sha1>0jto7obkpw631jg4i0nqay89bjtk9ir</sha1>
</revision>
</page>
<page>
<title>Template:Flagicon</title>
<ns>10</ns>
<id>134432</id>
<revision>
<id>18360087</id>
<parentid>18323568</parentid>
<timestamp>2011-11-17T05:55:12Z</timestamp>
<contributor>
<username>Gzdavidwong</username>
<id>157556</id>
</contributor>
<comment>已经改好了</comment>
<model>wikitext</model>
<format>text/x-wiki</format>
<text bytes="127" xml:space="preserve">
{{country data {{{1|}}}|flagicon/core|variant={{{variant|{{{2|}}}}}}|size={{{size|}}}}}<noinclude>{{documentation}}</noinclude>
</text>
<sha1>dmhm3yz9zkfz2b9aeazgucpbhxz0qqo</sha1>
</revision>
</page>
<page>
<title>Template:Flagicon/core</title>
<ns>10</ns>
<id>1469201</id>
<revision>
<id>44339981</id>
<parentid>44339980</parentid>
<timestamp>2017-05-13T01:55:15Z</timestamp>
<contributor>
<username>Xiplus</username>
<id>899028</id>
</contributor>
<comment>添加{{pp-template}}</comment>
<model>wikitext</model>
<format>text/x-wiki</format>
<text bytes="254" xml:space="preserve">
<noinclude>{{pp-template|small=yes}}</noinclude><span class="flagicon">[[File:{{{flag alias-{{{variant}}}|{{{flag alias}}}}}}|{{#if:{{{size|}}}|{{{size}}}|22x20px}}|{{{border-{{{variant}}}|{{{border|border}}}}}} |alt={{{alias}}}|link={{{alias}}}]]</span>
</text>
<sha1>lwozolxey4ji9a4vwmocoukr1obcepr</sha1>
</revision>
</page>
<page>
<title>Template:IPAc-en</title>
<ns>10</ns>
<id>1575888</id>
<revision>
<id>58897318</id>
<parentid>43567541</parentid>
<timestamp>2020-03-31T08:14:49Z</timestamp>
<contributor>
<username>Xiplus</username>
<id>899028</id>
</contributor>
<minor/>
<comment>
已保护“[[Template:IPAc-en]]”：高風險模板：1891引用（[编辑=仅允许自动确认用户]（无限期）[移动=仅允许自动确认用户]（无限期））
</comment>
<model>wikitext</model>
<format>text/x-wiki</format>
<text bytes="176" xml:space="preserve">
{{#invoke:IPAc-en|main}}<noinclude> {{documentation|Template:usage of IPA templates}} [[Category:IPA语言模板|{{PAGENAME}}]] [[Category:维基百科Lua模板]] </noinclude>
</text>
<sha1>ocu4jevieazjob5vsjc99qnql4h2fax</sha1>
</revision>
</page>
<page>
<title>Template:Icon</title>
<ns>10</ns>
<id>1314182</id>
<revision>
<id>61209419</id>
<parentid>46626889</parentid>
<timestamp>2020-08-17T11:29:17Z</timestamp>
<contributor>
<username>Xiplus-abot</username>
<id>2737953</id>
</contributor>
<minor/>
<comment>
已更改“[[Template:Icon]]”的保护等级：高風險模板：29470引用<!-- [[User:Xiplus-abot/task/3|機器人3]] -->（[编辑=仅允许模板编辑员和管理员]（无限期）[移动=仅允许模板编辑员和管理员]（无限期））
</comment>
<model>wikitext</model>
<format>text/x-wiki</format>
<text bytes="138" xml:space="preserve">
{{#invoke:Icon|main}}<noinclude> {{documentation}} <!-- Categories go on the /doc subpage, and interwikis go on Wikidata. --> </noinclude>
</text>
<sha1>m4ab9noabl8v4ki5cx6t5ksjcjh5u8o</sha1>
</revision>
</page>
<page>
<title>Template:If empty</title>
<ns>10</ns>
<id>1576922</id>
<revision>
<id>41069039</id>
<parentid>41069034</parentid>
<timestamp>2016-08-08T15:28:01Z</timestamp>
<contributor>
<username>和平奮鬥救地球</username>
<id>1543564</id>
</contributor>
<comment>// Edit via Wikiplus</comment>
<model>wikitext</model>
<format>text/x-wiki</format>
<text bytes="102" xml:space="preserve">
{{<includeonly>safesubst:</includeonly>#invoke:If empty|main}}<noinclude>{{Documentation}}</noinclude>
</text>
<sha1>dl9p9t1ge8vz1f67zrvu4lp7md161es</sha1>
</revision>
</page>
<page>
<title>Template:Ifempty</title>
<ns>10</ns>
<id>5064746</id>
<redirect title="Template:If empty"/>
<revision>
<id>61209431</id>
<parentid>58228473</parentid>
<timestamp>2020-08-17T11:29:57Z</timestamp>
<contributor>
<username>Xiplus-abot</username>
<id>2737953</id>
</contributor>
<minor/>
<comment>
已更改“[[Template:Ifempty]]”的保护等级：高風險模板：23645引用<!-- [[User:Xiplus-abot/task/3|機器人3]] -->（[编辑=仅允许模板编辑员和管理员]（无限期）[移动=仅允许模板编辑员和管理员]（无限期））
</comment>
<model>wikitext</model>
<format>text/x-wiki</format>
<text bytes="32" xml:space="preserve">#重定向 [[Template:If empty]]</text>
<sha1>870znxwmdmfbpu0jf25xco6muakhe4s</sha1>
</revision>
</page>
<page>
<title>Template:Internal link helper</title>
<ns>10</ns>
<id>706714</id>
<revision>
<id>42867339</id>
<parentid>40122947</parentid>
<timestamp>2017-01-17T03:40:02Z</timestamp>
<contributor>
<username>Alexander Misel</username>
<id>870953</id>
</contributor>
<comment>EP</comment>
<model>wikitext</model>
<format>text/x-wiki</format>
<text bytes="86" xml:space="preserve">
<includeonly>{{#invoke:ilh|main}}</includeonly><noinclude>{{模板文档}}</noinclude>
</text>
<sha1>gj8r1cshurbrxt6ymjhyxlfy3wuaqei</sha1>
</revision>
</page>
<page>
<title>Template:Internal link helper/en</title>
<ns>10</ns>
<id>706718</id>
<revision>
<id>46653006</id>
<parentid>42867558</parentid>
<timestamp>2017-10-21T11:12:07Z</timestamp>
<contributor>
<username>Xiplus</username>
<id>899028</id>
</contributor>
<minor/>
<comment>
已更改“[[Template:Internal link helper/en]]”的保护等级：高风险模板（[编辑=仅管理员]（无限期）[移动=仅管理员]（无限期））
</comment>
<model>wikitext</model>
<format>text/x-wiki</format>
<text bytes="257" xml:space="preserve">
<includeonly>{{Internal_link_helper |lang={{lan|zh-hant=英語|zh-hans=英语}} |lang-code=en |1={{{1|{{{2|}}}}}} |2={{{2|}}} |d={{{d|{{{3|}}}}}} |nocat={{{nocat|}}}}}</includeonly><noinclude> {{Documentation|Template:Internal link helper/doc}} </noinclude>
</text>
<sha1>a1gb1o48dcop5ri0rj3e7m0y6ofdgts</sha1>
</revision>
</page>
<page>
<title>Template:Lan</title>
<ns>10</ns>
<id>605910</id>
<revision>
<id>42867421</id>
<parentid>28535969</parentid>
<timestamp>2017-01-17T03:46:12Z</timestamp>
<contributor>
<username>Alexander Misel</username>
<id>870953</id>
</contributor>
<comment>EP</comment>
<model>wikitext</model>
<format>text/x-wiki</format>
<text bytes="86" xml:space="preserve">
<includeonly>{{#invoke:lan|main}}</includeonly><noinclude>{{模板文档}}</noinclude>
</text>
<sha1>hzszb0tn28vghfqihclf3108x1hip3z</sha1>
</revision>
</page>
<page>
<title>Template:Lang-en</title>
<ns>10</ns>
<id>345217</id>
<revision>
<id>55909114</id>
<parentid>45326730</parentid>
<timestamp>2019-08-31T13:47:23Z</timestamp>
<contributor>
<username>Xiplus</username>
<id>899028</id>
</contributor>
<comment>
per [[Special:PermaLink/55752013#編輯請求_2019-08-21|EP]] by [[User:Vozhuo]]
</comment>
<model>wikitext</model>
<format>text/x-wiki</format>
<text bytes="154" xml:space="preserve">
<includeonly>{{#invoke:lang|lang_xx_inherit |code=en |italic=unset |link=no }}</includeonly><noinclude> {{Documentation|Template:Lang-x/doc}} </noinclude>
</text>
<sha1>h669r5wqhh4mkgz3m2s2qr29el0phey</sha1>
</revision>
</page>
<page>
<title>Template:Link-en</title>
<ns>10</ns>
<id>706719</id>
<redirect title="Template:Internal link helper/en"/>
<revision>
<id>46653013</id>
<parentid>43807623</parentid>
<timestamp>2017-10-21T11:12:25Z</timestamp>
<contributor>
<username>Xiplus</username>
<id>899028</id>
</contributor>
<minor/>
<comment>
已保护“[[Template:Link-en]]”：高风险模板（[编辑=仅管理员]（无限期）[移动=仅管理员]（无限期））
</comment>
<model>wikitext</model>
<format>text/x-wiki</format>
<text bytes="86" xml:space="preserve">
#REDIRECT [[Template:Internal link helper/en]] {{短名重定向}} {{模板重定向}}
</text>
<sha1>fp9xq4npcts6vxr7a7txs32rb5s5pen</sha1>
</revision>
</page>
<page>
<title>Template:Multiple image</title>
<ns>10</ns>
<id>769897</id>
<revision>
<id>61200719</id>
<parentid>58714103</parentid>
<timestamp>2020-08-17T00:40:22Z</timestamp>
<contributor>
<username>Xiplus-abot</username>
<id>2737953</id>
</contributor>
<minor/>
<comment>
已更改“[[Template:Multiple image]]”的保护等级：高風險模板：5313引用<!-- [[User:Xiplus-abot/task/3|機器人3]] -->（[编辑=仅允许模板编辑员和管理员]（无限期）[移动=仅允许模板编辑员和管理员]（无限期））
</comment>
<model>wikitext</model>
<format>text/x-wiki</format>
<text bytes="131" xml:space="preserve">
{{#invoke:Multiple image|render}}<noinclude>{{documentation}}<!-- PLEASE ADD CATEGORIES TO THE /doc SUBPAGE, THANKS --></noinclude>
</text>
<sha1>q9oxjh8m7wtojz4v77x8mc2nmpowt0r</sha1>
</revision>
</page>
<page>
<title>Template:Multiple image/styles.css</title>
<ns>10</ns>
<id>6291056</id>
<revision>
<id>61200722</id>
<parentid>58714104</parentid>
<timestamp>2020-08-17T00:40:42Z</timestamp>
<contributor>
<username>Xiplus-abot</username>
<id>2737953</id>
</contributor>
<minor/>
<comment>
已更改“[[Template:Multiple image/styles.css]]”的保护等级：高風險模板：5314引用<!-- [[User:Xiplus-abot/task/3|機器人3]] -->（[编辑=仅允许模板编辑员和管理员]（无限期）[移动=仅允许模板编辑员和管理员]（无限期））
</comment>
<model>sanitized-css</model>
<format>text/css</format>
<text bytes="1296" xml:space="preserve">
/* this is a block */ .thumbinner { display: flex; flex-direction: column; } .trow { display: flex; flex-direction: row; clear: left; flex-wrap: wrap; width: 100%; box-sizing: border-box; } /* this is a cell */ .tsingle { margin: 1px; float: left; } .theader { clear: both; font-weight: bold; text-align: center; align-self: center; background-color: transparent; width: 100%; } .thumbcaption { text-align: left; background-color: transparent; } .text-align-left { text-align: left; } .text-align-right { text-align: right; } .text-align-center { text-align: center; } @media all and ( max-width: 720px ) { .thumbinner { /* not !important usage can be removed when these are no longer inline styles inside Template:Multiple image and media query using min-width is introduced */ width: 100% !important; box-sizing: border-box; max-width: none !important; align-items: center; } .trow { justify-content: center; } .tsingle { /* not !important usage can be removed when these are no longer inline styles inside Template:Multiple image and media query using min-width is introduced */ float: none !important; max-width: 100% !important; box-sizing: border-box; text-align: center; } .thumbcaption { text-align: center; } }
</text>
<sha1>jra0i8zkijy9rysk3f9rd7d1riedfd9</sha1>
</revision>
</page>
<page>
<title>Template:Navbox</title>
<ns>10</ns>
<id>616826</id>
<revision>
<id>64540223</id>
<parentid>26204460</parentid>
<timestamp>2021-02-28T01:59:16Z</timestamp>
<contributor>
<username>Xiplus</username>
<id>899028</id>
</contributor>
<minor/>
<comment>includeonly</comment>
<model>wikitext</model>
<format>text/x-wiki</format>
<text bytes="155" xml:space="preserve">
<includeonly>{{#invoke: Navbox | navbox }}</includeonly><noinclude>{{documentation}}<!-- Add categories and interwikis to the /doc sub-page --></noinclude>
</text>
<sha1>52cqox6szyrfgrjm5cur9nmj6ck51ui</sha1>
</revision>
</page>
<page>
<title>Template:Navbox subgroup</title>
<ns>10</ns>
<id>772723</id>
<revision>
<id>61209710</id>
<parentid>49252481</parentid>
<timestamp>2020-08-17T11:44:28Z</timestamp>
<contributor>
<username>Xiplus-abot</username>
<id>2737953</id>
</contributor>
<minor/>
<comment>
已更改“[[Template:Navbox subgroup]]”的保护等级：高風險模板：81632引用<!-- [[User:Xiplus-abot/task/3|機器人3]] -->（[编辑=仅允许模板编辑员和管理员]（无限期）[移动=仅允许模板编辑员和管理员]（无限期））
</comment>
<model>wikitext</model>
<format>text/x-wiki</format>
<text bytes="9064" xml:space="preserve">
{{Navbox |name = {{{name|}}} |state = {{{state|}}} |navbar = {{{navbar|}}} |border = {{#if:{{{border|}}}|{{{border}}}|child}} |title = {{{title|}}} |above = {{{above|}}} |below = {{{below|}}} |image = {{{image|}}} |imageleft = {{{imageleft|}}} |groupwidth = {{{groupwidth|}}} |group1 = {{#if:{{{group1|}}}|<div style="padding:{{{grouppadding|0em 0.75em;}}}">{{{group1}}}</div>}} |group2 = {{#if:{{{group2|}}}|<div style="padding:{{{grouppadding|0em 0.75em;}}}">{{{group2}}}</div>}} |group3 = {{#if:{{{group3|}}}|<div style="padding:{{{grouppadding|0em 0.75em;}}}">{{{group3}}}</div>}} |group4 = {{#if:{{{group4|}}}|<div style="padding:{{{grouppadding|0em 0.75em;}}}">{{{group4}}}</div>}} |group5 = {{#if:{{{group5|}}}|<div style="padding:{{{grouppadding|0em 0.75em;}}}">{{{group5}}}</div>}} |group6 = {{#if:{{{group6|}}}|<div style="padding:{{{grouppadding|0em 0.75em;}}}">{{{group6}}}</div>}} |group7 = {{#if:{{{group7|}}}|<div style="padding:{{{grouppadding|0em 0.75em;}}}">{{{group7}}}</div>}} |group8 = {{#if:{{{group8|}}}|<div style="padding:{{{grouppadding|0em 0.75em;}}}">{{{group8}}}</div>}} |group9 = {{#if:{{{group9|}}}|<div style="padding:{{{grouppadding|0em 0.75em;}}}">{{{group9}}}</div>}} |group10 = {{#if:{{{group10|}}}|<div style="padding:{{{grouppadding|0em 0.75em;}}}">{{{group10}}}</div>}} |group11 = {{#if:{{{group11|}}}|<div style="padding:{{{grouppadding|0em 0.75em;}}}">{{{group11}}}</div>}} |group12 = {{#if:{{{group12|}}}|<div style="padding:{{{grouppadding|0em 0.75em;}}}">{{{group12}}}</div>}} |group13 = {{#if:{{{group13|}}}|<div style="padding:{{{grouppadding|0em 0.75em;}}}">{{{group13}}}</div>}} |group14 = {{#if:{{{group14|}}}|<div style="padding:{{{grouppadding|0em 0.75em;}}}">{{{group14}}}</div>}} |group15 = {{#if:{{{group15|}}}|<div style="padding:{{{grouppadding|0em 0.75em;}}}">{{{group15}}}</div>}} |group16 = {{#if:{{{group16|}}}|<div style="padding:{{{grouppadding|0em 0.75em;}}}">{{{group16}}}</div>}} |group17 = {{#if:{{{group17|}}}|<div style="padding:{{{grouppadding|0em 0.75em;}}}">{{{group17}}}</div>}} |group18 = {{#if:{{{group18|}}}|<div style="padding:{{{grouppadding|0em 0.75em;}}}">{{{group18}}}</div>}} |group19 = {{#if:{{{group19|}}}|<div style="padding:{{{grouppadding|0em 0.75em;}}}">{{{group19}}}</div>}} |group20 = {{#if:{{{group20|}}}|<div style="padding:{{{grouppadding|0em 0.75em;}}}">{{{group20}}}</div>}} |group21 = {{#if:{{{group21|}}}|<div style="padding:{{{grouppadding|0em 0.75em;}}}">{{{group21}}}</div>}} |group22 = {{#if:{{{group22|}}}|<div style="padding:{{{grouppadding|0em 0.75em;}}}">{{{group22}}}</div>}} |group23 = {{#if:{{{group23|}}}|<div style="padding:{{{grouppadding|0em 0.75em;}}}">{{{group23}}}</div>}} |group24 = {{#if:{{{group24|}}}|<div style="padding:{{{grouppadding|0em 0.75em;}}}">{{{group24}}}</div>}} |group25 = {{#if:{{{group25|}}}|<div style="padding:{{{grouppadding|0em 0.75em;}}}">{{{group25}}}</div>}} |group26 = {{#if:{{{group26|}}}|<div style="padding:{{{grouppadding|0em 0.75em;}}}">{{{group26}}}</div>}} |group27 = {{#if:{{{group27|}}}|<div style="padding:{{{grouppadding|0em 0.75em;}}}">{{{group27}}}</div>}} |group28 = {{#if:{{{group28|}}}|<div style="padding:{{{grouppadding|0em 0.75em;}}}">{{{group28}}}</div>}} |group29 = {{#if:{{{group29|}}}|<div style="padding:{{{grouppadding|0em 0.75em;}}}">{{{group29}}}</div>}} |group30 = {{#if:{{{group30|}}}|<div style="padding:{{{grouppadding|0em 0.75em;}}}">{{{group30}}}</div>}} |group31 = {{#if:{{{group31|}}}|<div style="padding:{{{grouppadding|0em 0.75em;}}}">{{{group31}}}</div>}} |group32 = {{#if:{{{group32|}}}|<div style="padding:{{{grouppadding|0em 0.75em;}}}">{{{group32}}}</div>}} |group33 = {{#if:{{{group33|}}}|<div style="padding:{{{grouppadding|0em 0.75em;}}}">{{{group33}}}</div>}} |group34 = {{#if:{{{group34|}}}|<div style="padding:{{{grouppadding|0em 0.75em;}}}">{{{group34}}}</div>}} |group35 = {{#if:{{{group35|}}}|<div style="padding:{{{grouppadding|0em 0.75em;}}}">{{{group35}}}</div>}} |group36 = {{#if:{{{group36|}}}|<div style="padding:{{{grouppadding|0em 0.75em;}}}">{{{group36}}}</div>}} |group37 = {{#if:{{{group37|}}}|<div style="padding:{{{grouppadding|0em 0.75em;}}}">{{{group37}}}</div>}} |group38 = {{#if:{{{group38|}}}|<div style="padding:{{{grouppadding|0em 0.75em;}}}">{{{group38}}}</div>}} |group39 = {{#if:{{{group39|}}}|<div style="padding:{{{grouppadding|0em 0.75em;}}}">{{{group39}}}</div>}} |group40 = {{#if:{{{group40|}}}|<div style="padding:{{{grouppadding|0em 0.75em;}}}">{{{group40}}}</div>}} |list1 = {{{list1|}}} |list2 = {{{list2|}}} |list3 = {{{list3|}}} |list4 = {{{list4|}}} |list5 = {{{list5|}}} |list6 = {{{list6|}}} |list7 = {{{list7|}}} |list8 = {{{list8|}}} |list9 = {{{list9|}}} |list10 = {{{list10|}}} |list11 = {{{list11|}}} |list12 = {{{list12|}}} |list13 = {{{list13|}}} |list14 = {{{list14|}}} |list15 = {{{list15|}}} |list16 = {{{list16|}}} |list17 = {{{list17|}}} |list18 = {{{list18|}}} |list19 = {{{list19|}}} |list20 = {{{list20|}}} |list21 = {{{list21|}}} |list22 = {{{list22|}}} |list23 = {{{list23|}}} |list24 = {{{list24|}}} |list25 = {{{list25|}}} |list26 = {{{list26|}}} |list27 = {{{list27|}}} |list28 = {{{list28|}}} |list29 = {{{list29|}}} |list30 = {{{list30|}}} |list31 = {{{list31|}}} |list32 = {{{list32|}}} |list33 = {{{list33|}}} |list34 = {{{list34|}}} |list35 = {{{list35|}}} |list36 = {{{list36|}}} |list37 = {{{list37|}}} |list38 = {{{list38|}}} |list39 = {{{list39|}}} |list40 = {{{list40|}}} |bodyclass = {{{bodyclass|}}} |titleclass = {{{titleclass|}}} |aboveclass = {{{aboveclass|}}} |belowclass = {{{belowclass|}}} |groupclass = {{{groupclass|}}} |listclass = {{{listclass|}}} |style = {{{style|}}}{{{bodystyle|}}} |imageleftstyle = {{{imageleftstyle|}}} |imagestyle = {{{imagestyle|}}} |titlestyle = {{{titlestyle|}}} |basestyle = {{{basestyle|}}} |abovestyle = {{{abovestyle|}}} |belowstyle = {{{belowstyle|}}} |groupstyle = padding-left:0em;padding-right:0em;{{{groupstyle|}}} |liststyle = {{{liststyle|}}} |evenstyle = {{{evenstyle|}}} |oddstyle = {{{oddstyle|}}} |group1style = {{{group1style|}}} |group2style = {{{group2style|}}} |group3style = {{{group3style|}}} |group4style = {{{group4style|}}} |group5style = {{{group5style|}}} |group6style = {{{group6style|}}} |group7style = {{{group7style|}}} |group8style = {{{group8style|}}} |group9style = {{{group9style|}}} |group10style = {{{group10style|}}} |group11style = {{{group11style|}}} |group12style = {{{group12style|}}} |group13style = {{{group13style|}}} |group14style = {{{group14style|}}} |group15style = {{{group15style|}}} |group16style = {{{group16style|}}} |group17style = {{{group17style|}}} |group18style = {{{group18style|}}} |group19style = {{{group19style|}}} |group20style = {{{group20style|}}} |group21style = {{{group21style|}}} |group22style = {{{group22style|}}} |group23style = {{{group23style|}}} |group24style = {{{group24style|}}} |group25style = {{{group25style|}}} |group26style = {{{group26style|}}} |group27style = {{{group27style|}}} |group28style = {{{group28style|}}} |group29style = {{{group29style|}}} |group30style = {{{group30style|}}} |group31style = {{{group31style|}}} |group32style = {{{group32style|}}} |group33style = {{{group33style|}}} |group34style = {{{group34style|}}} |group35style = {{{group35style|}}} |group36style = {{{group36style|}}} |group37style = {{{group37style|}}} |group38style = {{{group38style|}}} |group39style = {{{group39style|}}} |group40style = {{{group40style|}}} |list1style = {{{list1style|}}} |list2style = {{{list2style|}}} |list3style = {{{list3style|}}} |list4style = {{{list4style|}}} |list5style = {{{list5style|}}} |list6style = {{{list6style|}}} |list7style = {{{list7style|}}} |list8style = {{{list8style|}}} |list9style = {{{list9style|}}} |list10style = {{{list10style|}}} |list11style = {{{list11style|}}} |list12style = {{{list12style|}}} |list13style = {{{list13style|}}} |list14style = {{{list14style|}}} |list15style = {{{list15style|}}} |list16style = {{{list16style|}}} |list17style = {{{list17style|}}} |list18style = {{{list18style|}}} |list19style = {{{list19style|}}} |list20style = {{{list20style|}}} |list21style = {{{list21style|}}} |list22style = {{{list22style|}}} |list23style = {{{list23style|}}} |list24style = {{{list24style|}}} |list25style = {{{list25style|}}} |list26style = {{{list26style|}}} |list27style = {{{list27style|}}} |list28style = {{{list28style|}}} |list29style = {{{list29style|}}} |list30style = {{{list30style|}}} |list31style = {{{list31style|}}} |list32style = {{{list32style|}}} |list33style = {{{list33style|}}} |list34style = {{{list34style|}}} |list35style = {{{list35style|}}} |list36style = {{{list36style|}}} |list37style = {{{list37style|}}} |list38style = {{{list38style|}}} |list39style = {{{list39style|}}} |list40style = {{{list40style|}}} |{{#if:{{{evenodd|}}}|evenodd|void1}} = {{{evenodd|}}} |{{#if:{{{listpadding|}}}|listpadding|void2}} = {{{listpadding|}}} }}<noinclude> {{documentation}} <!-- 请将分类与跨语言链接增加在/doc子页面 / 請將分類與跨語言連結增加在/doc子頁面 --> </noinclude>
</text>
<sha1>0su48wzif30wcawr1g9um9eq3vmz8id</sha1>
</revision>
</page>
<page>
<title>Template:Navbox subgroups</title>
<ns>10</ns>
<id>683444</id>
<redirect title="Template:Navbox subgroup"/>
<revision>
<id>61209715</id>
<parentid>49252483</parentid>
<timestamp>2020-08-17T11:44:38Z</timestamp>
<contributor>
<username>Xiplus-abot</username>
<id>2737953</id>
</contributor>
<minor/>
<comment>
已更改“[[Template:Navbox subgroups]]”的保护等级：高風險模板：10450引用<!-- [[User:Xiplus-abot/task/3|機器人3]] -->（[编辑=仅允许模板编辑员和管理员]（无限期）[移动=仅允许模板编辑员和管理员]（无限期））
</comment>
<model>wikitext</model>
<format>text/x-wiki</format>
<text bytes="38" xml:space="preserve">#REDIRECT [[Template:Navbox subgroup]]</text>
<sha1>t52840v37vspffgwaw3vjenet1sr88x</sha1>
</revision>
</page>
<page>
<title>Template:NoteTA</title>
<ns>10</ns>
<id>3553207</id>
<revision>
<id>52804175</id>
<parentid>46580635</parentid>
<timestamp>2019-01-15T17:27:44Z</timestamp>
<contributor>
<username>Iokseng</username>
<id>43581</id>
</contributor>
<minor/>
<comment>
Iokseng 已移動頁面 [[Template:NoteTA/lua]] 至 [[Template:NoteTA]]，不留重新導向
</comment>
<model>wikitext</model>
<format>text/x-wiki</format>
<text bytes="131" xml:space="preserve">
{{#invoke:NoteTA|main}}<noinclude> {{模板文档}} <!-- 請在將分類與跨語言連結增加在 /doc 子頁面 --> </noinclude>
</text>
<sha1>fp42pc0lpptalz6n95xvri9wv0vo3ss</sha1>
</revision>
</page>
<page>
<title>Template:Portal</title>
<ns>10</ns>
<id>132343</id>
<revision>
<id>45193753</id>
<parentid>43592258</parentid>
<timestamp>2017-07-14T09:05:14Z</timestamp>
<contributor>
<username>Xiplus</username>
<id>899028</id>
</contributor>
<minor/>
<comment>
已更改“[[Template:Portal]]”的保护等级：高风险模板（[编辑=仅管理员]（无限期）[移动=仅管理员]（无限期））
</comment>
<model>wikitext</model>
<format>text/x-wiki</format>
<text bytes="168" xml:space="preserve">
<includeonly>{{#invoke:Portal|portal}}</includeonly><noinclude> {{documentation}} <!-- Categories go on the /doc subpage, and interwikis go on Wikidata --> </noinclude>
</text>
<sha1>eu0a2ons0y70cfblniy3kcxuib58bvt</sha1>
</revision>
</page>
<page>
<title>Template:Portalbox</title>
<ns>10</ns>
<id>5395603</id>
<redirect title="Template:Portal"/>
<revision>
<id>43696963</id>
<parentid>40878014</parentid>
<timestamp>2017-03-21T07:50:16Z</timestamp>
<contributor>
<username>タチコマ robot</username>
<id>431391</id>
</contributor>
<minor/>
<comment>机器人：修正双重重定向至[[Template:Portal]]</comment>
<model>wikitext</model>
<format>text/x-wiki</format>
<text bytes="30" xml:space="preserve">#重定向 [[Template:Portal]]</text>
<sha1>7m5h3t664whhj0a7bgxrsffa1n842j1</sha1>
</revision>
</page>
<page>
<title>Template:Quote box</title>
<ns>10</ns>
<id>237324</id>
<revision>
<id>64897118</id>
<parentid>64897114</parentid>
<timestamp>2021-03-24T00:57:35Z</timestamp>
<contributor>
<username>Sanmosa</username>
<id>1572602</id>
</contributor>
<minor/>
<comment>// Edit via Wikiplus</comment>
<model>wikitext</model>
<format>text/x-wiki</format>
<text bytes="2188" xml:space="preserve">
<templatestyles src="Quote box/styles.css" /><div class="quotebox {{{class|}}}" style="{{#switch: {{lc:{{{align|}}}}} | center = margin: auto; | left = float: left; clear: left; margin: 0.5em 1.4em 0.8em 0; | none = | #default = float: right; clear: right; margin: 0.5em 0 0.8em 1.4em; }}{{#if:{{{width|}}} |width:{{{width}}};}} padding: 6px; border: {{#if: {{{border|}}}|{{{border}}}|1px}} solid #aaa; font-size: {{#if: {{{fontsize|}}}|{{{fontsize}}}|88%}}; {{#if: {{{bgcolor|}}}|background-color: {{{bgcolor}}}|background-color: #F9F9F9}}; {{{style|}}}">{{#if:{{{title|}}} |<div class="{{{tclass|}}}" style="{{#if: {{{title_bg|}}}|background-color: {{{title_bg}}}|{{#if: {{{bgcolor|}}}|background-color: {{{bgcolor}}}|background-color: #F9F9F9}}}};{{#if: {{{title_fnt|}}}|color: {{{title_fnt}}}|color: black}}; text-align: center; font-size: larger; font-weight: bold; {{{tstyle|}}}">{{{title}}}</div>}}<div class="{{{qclass|}}}" style="position: relative; text-align: {{#if: {{{qalign|}}}|{{{qalign}}}|{{#if: {{{halign|}}}|{{{halign|}}}|left}}}}; {{{qstyle|}}}">{{#if:{{{quoted|}}}|<div style="margin:0px 2em;">}}{{{text|{{{content|{{{quotetext|{{{quote|{{{1||<includeonly>{{error|錯誤：未有引用內容}}</includeonly><noinclude>{{lorem ipsum}}</noinclude>}}}}}}}}}}}}}}}{{#if:{{{quoted|}}} |</div> <div style="position: absolute; left: 0px; top: 0px; text-align: left; font-family:'Times New Roman',serif; font-weight:bold; font-size: large; color: gray;">“</div><div style="position: absolute; right: 0px; bottom: 0px; text-align: left; font-family:'Times New Roman',serif; font-weight:bold; font-size: large; color: gray;">”</div>}}</div>{{#if:{{{author|{{{source|}}}}}}{{{2|}}}{{{3|}}}|<cite style="display: block;text-align: {{ifempty|{{{salign|}}}|{{{qalign|}}}|{{{halign|}}}|right}}; {{{sstyle|}}}"><!--Manually inserted dashes will need to be removed from uses of the template first, I guess, then enable this:--><!--—&thinsp;-->{{{author|{{{2|}}}}}}{{#if:{{{author|}}}{{{2|}}}|{{#if:{{{source|}}}{{{3|}}}|<!--Display comma-space only if both cite parameters are present.-->,&#32;}}}}{{{source|{{{3|}}}}}}</cite>}}</div><noinclude>{{Documentation}}</noinclude>
</text>
<sha1>bzsd70slbap6qgqmqoetjurhlbq1uyz</sha1>
</revision>
</page>
<page>
<title>Template:Quote box/styles.css</title>
<ns>10</ns>
<id>6350458</id>
<revision>
<id>64637320</id>
<parentid>64633069</parentid>
<timestamp>2021-03-06T02:36:12Z</timestamp>
<contributor>
<username>Great Brightstar</username>
<id>1135158</id>
</contributor>
<minor/>
<model>sanitized-css</model>
<format>text/css</format>
<text bytes="1248" xml:space="preserve">
/* */ .quotebox { background-color: #F9F9F9; border: 1px solid #aaa; box-sizing: border-box; padding: .25em .5em; font-size: 88%; max-width: 100%; } .quotebox.floatleft { margin: .5em 1.4em .8em 0; } .quotebox.floatright { margin: .5em 0 .8em 1.4em; } .quotebox.centered { margin: .5em auto .8em auto; } .quotebox p { font-style: inherit; margin-bottom: 0; } .quotebox-title { background-color: #F9F9F9; text-align: center; font-size: larger; font-weight: bold; margin-bottom: 0; } .quotebox-quote.quoted:before { font-family:'Times New Roman',serif; font-weight:bold; font-size: large; color: gray; content: ' “ '; vertical-align: -45%; line-height: 0; } .quotebox-quote.quoted:after { font-family:'Times New Roman',serif; font-weight:bold; font-size: large; color: gray; content: ' ” '; line-height: 0; } .quotebox .left-aligned { text-align: left; } .quotebox .right-aligned { text-align: right; } .quotebox .center-aligned { text-align: center; } .quotebox cite { display:block; font-style:normal; } @media all and (max-width:720px) { .quotebox { /*override inline styles */ width: 100% !important; margin: 0 0 .8em !important; float: none !important; } }
</text>
<sha1>02ndqljo1dnavwfk36w8csy78r99g8d</sha1>
</revision>
</page>
<page>
<title>Template:Reflist</title>
<ns>10</ns>
<id>589807</id>
<revision>
<id>58913049</id>
<parentid>58912895</parentid>
<timestamp>2020-04-01T04:12:13Z</timestamp>
<contributor>
<username>Shizhao</username>
<id>138</id>
</contributor>
<minor/>
<comment>
取消[[Special:Contributions/Shizhao|Shizhao]]（[[User talk:Shizhao|对话]]）的编辑；更改回[[Special:Contributions/Chiefwei|Chiefwei]]的最后一个版本
</comment>
<model>wikitext</model>
<format>text/x-wiki</format>
<text bytes="828" xml:space="preserve">
<div class="reflist <!-- -->{{#if: {{{1|}}} | columns {{#iferror: {{#ifexpr: {{{1|1}}} > 1 }} | references-column-width | references-column-count references-column-count-{{#if:1|{{{1}}}}} }} | {{#if: {{{colwidth|}}} | references-column-width }} }}" style="<!-- -->{{#if: {{{1|}}} | {{#iferror: {{#ifexpr: {{{1|1}}} > 1 }} | {{column-width|{{#if:1|{{{1}}}}}}} | {{column-count|{{#if:1|{{{1}}}}}}} }} | {{#if: {{{colwidth|}}} | {{column-width|{{{colwidth}}}}} }} }} list-style-type: <!-- -->{{{liststyle|{{#switch: {{{group|}}} | upper-alpha | upper-roman | lower-alpha | lower-greek | lower-roman = {{{group}}} | #default = decimal}}}}};"> {{{list|{{#tag:references|{{{refs|}}}|group={{{group|}}}}}}}}</div><noinclude> {{Documentation}} </noinclude>
</text>
<sha1>8d13vi802byz5zi6boawebtzx5i1auc</sha1>
</revision>
</page>
<page>
<title>Template:\</title>
<ns>10</ns>
<id>1812028</id>
<revision>
<id>61219178</id>
<parentid>58191601</parentid>
<timestamp>2020-08-18T04:26:03Z</timestamp>
<contributor>
<username>Xiplus-abot</username>
<id>2737953</id>
</contributor>
<minor/>
<comment>
已更改“[[Template:\]]”的保护等级：高風險模板：3143引用<!-- [[User:Xiplus-abot/task/3|機器人3]] -->（[编辑=仅允许自动确认用户]（无限期））
</comment>
<model>wikitext</model>
<format>text/x-wiki</format>
<text bytes="125" xml:space="preserve">
&nbsp;/&#32;<noinclude> {{Documentation}} <!-- Add categories and interwikis to the /doc subpage, not here! --> </noinclude>
</text>
<sha1>gfvlsjgnfxn02vdp58sww0lo44n62ht</sha1>
</revision>
</page>
<page>
<title>Template:·</title>
<ns>10</ns>
<id>501837</id>
<revision>
<id>61210437</id>
<parentid>53408583</parentid>
<timestamp>2020-08-17T12:26:47Z</timestamp>
<contributor>
<username>Xiplus-abot</username>
<id>2737953</id>
</contributor>
<minor/>
<comment>
已更改“[[Template:·]]”的保护等级：高風險模板：46835引用<!-- [[User:Xiplus-abot/task/3|機器人3]] -->（[编辑=仅允许模板编辑员和管理员]（无限期）[移动=仅允许模板编辑员和管理员]（无限期））
</comment>
<model>wikitext</model>
<format>text/x-wiki</format>
<text bytes="98" xml:space="preserve">
<span style="white-space:nowrap; font-weight:bold;">&nbsp;·</span> <noinclude>{{doc}}</noinclude>
</text>
<sha1>670dmoukhz9qf0ziyg3zmj4kjmll2he</sha1>
</revision>
</page>
<page>
<title>Template:美国索引</title>
<ns>10</ns>
<id>963540</id>
<revision>
<id>65140808</id>
<parentid>64567907</parentid>
<timestamp>2021-04-10T10:28:19Z</timestamp>
<contributor>
<username>Jonathan5566</username>
<id>2729979</id>
</contributor>
<model>wikitext</model>
<format>text/x-wiki</format>
<text bytes="19162" xml:space="preserve">
{{Navbox | name = 美国索引 | title = {{Flagicon|USA}} 美利坚合众国索引 | titlestyle = background:#002664; color:white | state = {{{state<includeonly>|autocollapse</includeonly>}}} | gorupstyle = text-align:left; | bodyclass = hlist | above = {{Link-en|美国大纲|Outline of the United States|大纲}}{{·}}{{Link-en|美国相关条目索引|Index of United States-related articles|索引}} <!-- 美国历史部分 --> | group1 = [[美国历史|历史]] | list1 = {{Navbox subgroups | group1 = 事件 | list1 = * [[前哥倫布時期]] * {{Link-en|美国殖民地时期历史|Colonial history of the United States|殖民地时期}} ** [[十三殖民地]] ** {{Link-en|美国殖民地时期军事史|Colonial American military history|殖民地军事}} ** [[美国开国元勋|开国元勋]] ** [[大陆会议]] ** {{Link-en|大陆盟约|Continental Association}} * [[李氏決議文]] * [[美國獨立宣言|独立宣言]] * [[美國革命]] ** [[美國獨立戰爭|独立战争]] ** [[巴黎條約 (1783年)|巴黎条约]] * [[邦联条例]] ** {{Link-en|美国邦联时期|Confederation Period|邦联时期}} * [[美國舊西部]] ** [[美国西部开拓时期|西进时期]] * {{Link-en|美国宪法起草及批准时间线|Timeline of drafting and ratification of the United States Constitution|美国宪法的起草和批准}} ** [[美国权利法案|权利法案]] * {{Link-en|联邦党时期|Federalist Era}} * [[1812年战争]] * [[美國領土擴張|领土扩张]] * [[美國領土變遷|领土变迁]] * [[美墨戰爭]] * [[南北战争]] * [[美國重建時期|重建时期]] * [[北美印第安战争|印第安战争]] * [[镀金时代]] * [[进步时代]] * [[美国妇女选举权|妇女选举权]] * {{Link-en|美国民权运动 (1865年－1896年)|Civil rights movement (1865–1896)|民权运动 1865年－1896年}}{{\}}{{Link-en|美国民权运动 (1896年－1954年)|Civil rights movement (1896–1954)|1896年－1954年}}{{\}}[[非裔美國人民權運動|1954年－1968年]] * [[美西战争]] * [[美帝國主義|帝国主义]] * [[美国历史 (1865年－1918年)#一战|第一次世界大战]] * [[咆哮的二十年代]] * [[大萧条]] * {{Link-en|二战时期美国军事史|Military history of the United States during World War II|第二次世界大战}} ** {{Link-en|二战时期美国后方|United States home front during World War II|后方}} ** {{Link-en|德裔美国人同盟|German American Bund|美国纳粹主义}} * [[美國世紀]] * [[冷战]] * [[朝鲜战争]] * [[太空競賽|太空竞赛]] * [[第二波女性主義|女权运动]] * [[越南战争]] * {{Link-en|美国历史 (1991年－2008年)|History of the United States (1991–2008)|后冷战时期 1991年－2008年}} * [[反恐战争]] ** [[阿富汗戰爭 (2001年)|阿富汗战争]] ** [[伊拉克战争]] * {{Link-en|美国历史 (2008年迄今)|History of the United States (2008–present)|当代美国}} | group2 = 主题 | list2 = * {{Link-en|美国大纲|Outline of the United States}} * [[美国人口史|人口]] * {{Link-en|美国科学发现时间表|Timeline of United States discoveries|发现}} * [[美國經濟史|经济]] ** [[美国债务上限历史|债务上限]] * {{Link-en|美国科学发明时间表|Timeline of United States inventions|发明}} ** {{Link-en|美国科学发明时间表 (1890年之前)|Timeline of United States inventions (before 1890)|1890年之前}} ** {{Link-en|美国科学发明时间表 (1890年－1945年)|Timeline of United States inventions (1890–1945)|1890年－1945年}} ** {{Link-en|美国科学发明时间表 (1946年－1991年)|Timeline of United States inventions (1946–1991)|1946年－1991年}} ** {{Link-en|美国科学发明时间表 (1991年之后)|Timeline of United States inventions (after 1991)|1991年之后}} * {{Link-en|美国军事史|Military history of the United States|军事}} * [[美國郵票|邮政]] * {{Link-en|美国技术与产业史|Technological and industrial history of the United States|技术与产业}} }} <!-- 美国地理部分 --> | group2 = [[美国地理|地理]] | list2 = * {{Link-en|美国国土|United States territory|国土}} ** [[美國本土|本土]] ** [[美國本土|大陆]] ** [[县 (美国)|县]] ** [[华盛顿哥伦比亚特区|联邦特区]] ** {{Link-en|美国联邦飞地|Federal enclave|联邦飞地}} ** [[印第安保留地]] ** [[島嶼地區|岛屿地区]] ** [[美国本土外小岛屿|本土外小岛屿]] ** {{Link-en|美国人口稠密地区列表|Lists of populated places in the United States|人口稠密地区}} ** [[美国州份|州]] * [[美國地震列表|地震]] * {{Link-en|美国地理极点列表|List of extreme points of the United States|地理极点}} * {{Link-en|美国岛屿列表|List of islands of the United States|岛屿}} * {{Link-en|美国高山列表|List of mountains of the United States|高山}} ** {{Link-en|美国山峰列表|List of mountain peaks of the United States|山峰}} ** [[山脉列表#美洲|山脉]] ** [[阿巴拉契亚山脉]] ** [[洛磯山脈|落基山脉]] * [[美国国家公园管理局|国家公园管理局]] ** {{Link-en|归属美国国家公园体系的地区列表|List of areas in the United States National Park System|国家公园}} * [[美國地區|地区]] ** [[美國東岸|东岸区]] ** [[美國西岸|西岸区]] ** [[北美大平原|大平原区]] ** [[美國墨西哥灣沿岸地區|湾区]] ** [[中大西洋州份|中大西洋区]] ** [[美國中西部|中西部区]] ** [[新英格蘭|新英格兰区]] ** [[美國太平洋沿岸地區|太平洋沿岸区]] ** {{Link-en|美国中部|Central United States|中部区}} ** [[美國東部|美东区]] ** [[美國北部|北部区]] ** [[美國東北部|东北区]] ** [[美國西北部|西北区]] ** [[美國南部|南部区]] ** [[美國東南部|东南区]] ** [[美國西南部|西南区]] ** [[美國西部|美西区]] * [[美国河流列表|河流]] ** [[阿肯色河]] ** [[科羅拉多河|科罗拉多河]] ** [[哥倫比亞河|哥伦比亚河]] ** [[密西西比河]] ** [[密苏里河]] ** [[红河 (密西西比河)|红河]] ** [[格蘭德河|格兰德河{{\}}北布拉沃河]] ** [[育空河]] * [[美國時區|时区]] * {{Link-en|美国饮用水供应和卫生|Drinking water supply and sanitation in the United States|水供应和卫生}} * [[美国世界遗产列表|世界遗产]] <!-- 美国政治部分 --> | group3 = [[美国政治|政治]] | list3 = {{Navbox subgroups | group1 = [[美國聯邦政府|联邦]] | list1 = {{Navbox subgroups | group1 = 行政机构 | list1 = * [[美国内阁|内阁]] * [[美国联邦公务员|公务员]] * [[美国联邦行政部门|行政部门]] * [[美国总统行政办公室|行政办公室]] * [[美國政府獨立機構|独立机构]] * [[美国联邦执法部门|执法部门]] * [[美国总统|总统]] ** {{Link-en|美国总统的权力|Powers of the President of the United States|权力}} * {{Link-en|美国公共政策|Public policy of the United States|公共政策}} | group2 = [[美国国会|立法机构]] | list2 = * [[美国众议院|众议院]] ** {{Link-en|美国众议员列表|List of members of the United States House of Representatives|现任众议员}} ** [[美國眾議院議長|众议长]] * [[美国参议院|参议院]] ** {{Link-en|美国参议员列表|List of members of the United States Senate|现任参议员}} ** [[美國參議院臨時議長|临时参议长]] ** [[美国副总统|副总统]] | group3 = [[美国联邦法院|司法机构]] | list3 = * [[美国联邦上诉法院|上诉法院]] * [[美国联邦地区法院|地区法院]] * [[美国最高法院|最高法院]] | group4 = [[美国法律|法律]] | list4 = * [[美国权利法案|权利法案]] ** {{Link-en|美国的公民自由|Civil liberties in the United States|公民自由}} * [[聯邦規則彙編|联邦规则汇编]] * [[美国宪法|宪法]] ** {{Link-en|美国的联邦制|Federalism in the United States|联邦制}} ** {{Link-en|联邦优先权|Federal preemption|优先权}} ** [[美國憲法中的權力分立|分权]] ** {{Link-en|美国的公民权|Civil rights in the United States|民权}} * {{Link-en|美国联邦法院判例报告|Federal Reporter|联邦报告}} * [[美国法典]] * [[美国最高法院判例报告|最高法判例报告]] | group5 = [[美國情報體系|情报单位]] | list5 = * [[中央情报局]] * [[美國國防情報局|国防情报局]] * [[联邦调查局]] * [[美國國家地理空間情報局|国家地理空间情报局]] * [[美国国家侦察局|国家侦查局]] * [[美国国家安全局|国家安全局]] * [[國家情報總監|国家情报总监办公室]] | group6 = [[美国制服部队|制服单位]] | list6 = * [[美军|武装力量]] ** [[美国陆军|陆军]] ** [[美国海军陆战队|陆战队]] ** [[美國海軍|海军]] ** [[美国空军|空军]] ** [[美國太空軍|太空軍]] ** [[美国海岸警卫队|海岸警卫队]] ** [[美國國民警衛隊|国民警卫队]] * {{Link-en|美国国家海洋和大气管理局军官团|NOAA Commissioned Officer Corps|海洋大气管理局军官团}} * [[美国公共卫生服务军官团|公共卫生服务军官团]] }} | group2 = | list2 = * [[美國第51州|第51州]] ** {{Link-en|波多黎各的政治地位|Political status of Puerto Rico}} ** {{Link-en|哥伦比亚特区建州运动|Statehood movement in the District of Columbia}} * [[美國選舉|选举]] ** [[美国选举人团|选举人团]] * [[美国建交列表|外交]] ** [[美国外交|外交政策]] * [[夏威夷独立运动]] * {{Link-en|美国政治思潮|Political ideologies in the United States|政治思潮}} ** [[反美|反美主义]] ** [[美國例外論|例外主义]] ** {{Link-en|美国民族主义|American nationalism|民族主义}} * {{Link-en|美国地方政府|Local government in the United States|地方政府}} ** [[政府委員會]] * [[美國政黨|政党]] ** [[民主党 (美国)|民主党]] ** [[共和黨 (美國)|共和党]] ** [[第三党 (美国)|第三党]] * [[紅州與藍州]] ** [[紫色州]] * {{Link-en|美国联邦政治丑闻列表|List of federal political scandals in the United States|丑闻}} * {{Link-en|美国州政府|State governments of the United States|州政府}} ** [[州長 (美國)|州长]] ** {{Link-en|州立法机关 (美国)|State legislature (United States)|州立法机关}} ** [[美国各州法院系统|州法院]] * [[帝王总统]] * {{Link-en|美国的腐败问题|Corruption in the United States|腐败}} * [[薩克斯本修復]] }} <!-- 美国经济部分 --> | group4 = [[美國經濟|经济]] | list4 = * {{Link-en|按类别划分的美国经济|Economy of the United States by sector|门类}} ** [[美国农业|农业]] ** {{Link-en|美国银行业|Banking in the United States|银行}} ** {{Link-en|美国传播业|Communications in the United States|传播}} ** {{Link-en|美国能源业|Energy in the United States|能源}} ** {{Link-en|美国保险业|Insurance in the United States|保险}} ** {{Link-en|美国制造业|Manufacturing in the United States|制造}} ** [[美国矿产资源|矿业]] ** [[美国科技|科技]] ** [[美國觀光|旅游]] ** {{Link-en|美国对外贸易|Foreign trade of the United States|外贸}} ** [[美國交通|运输]] ** {{Link-en|美国各州公司列表|List of companies of the United States by state|州别}} * [[美元|货币]] ** {{link-en|美國雕刻和印刷局|Bureau of Engraving and Printing|雕刻和印刷局}} ** [[美國鑄幣局|鑄幣局]](<small>[[费城铸币局|費城]]</small>、<small>[[丹佛铸币局|丹佛]]</small>、<small>[[西點鑄幣局|西點]]</small>、<small>[[旧金山铸币局|舊金山]]</small>) * {{Link-en|美国出口贸易列表|List of exports of the United States|出口}} * {{Link-en|美国联邦预算|United States federal budget|联邦预算}} * [[联邦储备系统]] * {{Link-en|美国财务状况|Financial position of the United States|财务状况}} * [[美國工會|工会]] * [[美國國債|国债]] * {{Link-en|美国社会事业|Social programs in the United States|社会福利}} * {{Link-en|美国税收|Taxation in the United States|税收}} * {{Link-en|美国失业|Unemployment in the United States|失业}} * [[华尔街]] <!-- 美国社会部分 --> | group5 = [[美國社會|社会]] | list5 = {{Navbox subgroups | group1 = [[美国文化|文化]] | list1 = * {{Link-en|美国特色|Americana|特色}} * [[美國建築|建筑]] * [[美国电影|电影]] * [[美国的犯罪问题|犯罪]] * [[美國飲食|饮食]] * {{Link-en|美国舞蹈|Dance in the United States|舞蹈}} * [[美国人口|人口]] * [[美國經濟|经济问题]] ** {{Link-en|美国的富裕情况|Affluence in the United States|富裕}} ** {{Link-en|美国的驱逐情况|Eviction in the United States|驱逐}} ** [[房地產自有率|房产自有]] ** {{Link-en|美国的家庭收入|Household income in the United States|家庭收入}} ** {{Link-en|美国的收入不平等|Income inequality in the United States|收入不平等}} ** [[美國工會|工会]] ** {{Link-en|美国中产阶级|American middle class|中产阶级}} ** {{Link-en|美国的个人收入|Personal income in the United States|个人收入}} ** [[美国贫困问题|贫困]] ** {{Link-en|美国的生活标准|Standard of living in the United States|生活标准}} ** {{Link-en|美国的富裕情况|Affluence in the United States|财富}} * [[美国教育|教育]] ** {{Link-en|美国的受教育程度|Educational attainment in the United States|受教育程度}} * [[美国家庭结构|家庭结构]] * {{Link-en|美国时尚|Fashion in the United States|时尚}} * [[美国国旗|国旗]] * {{Link-en|美国民俗|Folklore of the United States|民俗}} * [[偉大美國小說]] * {{Link-en|美国的健康问题|Health in the United States|健康}} ** [[美國醫療系統|医疗]] ** {{Link-en|美国的健康保险|Health insurance in the United States|健保}} * [[美国节日|节日]] * {{Link-en|美国的无家可归者|Homelessness in the United States|无家可归}} * [[美國人權|人权]] * [[美国的语言|语言]] ** [[美国英语]] ** [[美洲原住民語言|原住民语]] ** [[美國手語|手语]] *** [[美国黑人手语|黑人手语]] ** {{Link-en|夏威夷手语|Hawai'i Sign Language}} ** [[平原印第安手语]] ** {{Link-en|美国的阿拉伯语|Arabic language in the United States|阿拉伯语}} ** [[美國漢語變體|汉语]] ** [[美國的法語|法语]] ** {{Link-en|美国的德语|German language in the United States|德语}} ** {{Link-en|美国的意大利语|Italian language in the United States|意大利语}} ** {{Link-en|美国的俄语|Russian language in the United States|俄语}} ** [[美國的西班牙語|西班牙语]] * [[美国文学|文学]] * [[美国媒体|媒体]] ** {{Link-en|美国新闻史|History of American journalism|新闻}} ** {{Link-en|美国互联网|Internet in the United States|互联网}} ** {{Link-en|美国报业史|History of American newspapers|报刊}} ** [[美国电台|电台]] ** [[美國電視|电视]] * [[美国音乐|音乐]] * [[美國的姓名規範|姓名]] * [[美国国家象征|国家象征]] ** [[哥伦比亚 (美国)|哥伦比亚]] ** [[自由女神像]] ** [[山姆大叔]] * [[美國人|人民]] * {{Link-en|美国哲学|American philosophy|哲学}} * {{Link-en|美国的政治意识形态|Political ideologies in the United States|政治意识形态}} * [[美国节日|公共假日]] * [[美国种族及民族|种族]] * [[美国宗教|宗教]] * [[美国的性|性]]{{\}}{{Link-en|美国青少年的性|Adolescent sexuality in the United States|青少年的性}} * [[美國社會|社会]] * [[美國社會階層|社会阶层]] * [[美国体育|体育]] * {{Link-en|美国戏剧|Theater in the United States|戏剧}} * [[美國交通|交通]] * {{Link-en|美国电子游戏|Video gaming in the United States|电子游戏}} * {{Link-en|美国视觉艺术|Visual art of the United States|视觉艺术}} | group2 = [[美國社會階層|阶层]] | list2 = * {{Link-en|美国富裕阶层|Affluence in the United States|富裕阶层}} * [[美国梦]] * {{Link-en|美国学历|Educational attainment in the United States|学历}} * {{Link-en|美国的无家可归者|Homelessness in the United States|无家可归}} * [[房地產自有率|自置居所]] * {{Link-en|美国家庭收入|Household income in the United States|家庭收入}} * {{Link-en|美国收入不平等问题|Income inequality in the United States|收入不平等}} * {{Link-en|美国中产阶级|American middle class|中产阶级}} * {{Link-en|美国个人收入|Personal income in the United States|个人收入}} * [[美国贫困问题|贫困]] * {{Link-en|美国中产阶级与工人阶级冲突|Professional and working class conflict in the United States|中产与工人间冲突}} * {{Link-en|美国生活标准|Standard of living in the United States|生活标准}} | group3 = 议题 | list3 = * {{Link-en|美国同意年龄|Ages of consent in the United States|同意年龄}} * [[美国死刑制度|死刑]] * [[美国的犯罪问题|犯罪]] ** [[美国监禁制度|监禁]] * {{Link-en|对美国政府的批评|Criticism of the United States government|批评}} * {{Link-en|美国的歧视问题|Discrimination in the United States|歧视}} ** [[美国的平权法案|平权法案]] ** {{Link-en|美国的反犹太主义|Antisemitism in the United States|反犹太主义}} ** {{Link-en|美国的双性人权利|Intersex rights in the United States|双性人权利}} ** {{Link-en|美国的伊斯兰恐惧|Islamophobia in the United States|伊斯兰恐惧}} ** [[美國LGBT權益|LGBT权利]] ** [[美国种族主义|种族主义]] ** [[美国同性婚姻|同性婚姻]] * {{Link-en|美国联邦毒品政策|Federal drug policy of the United States|毒品政策}} * {{Link-en|美国能源政策|Energy policy of the United States|能源政策}} * {{Link-en|美国环境保护运动|Environmental movement in the United States|环保运动}} * [[美國槍支政策|枪支政策]] * [[美國醫療系統|医疗]] ** {{Link-en|美国的堕胎问题|Abortion in the United States|堕胎}} ** [[美國的醫療保險|医保]] ** {{Link-en|美国的饥饿问题|Hunger in the United States|饥饿}} ** [[美国的肥胖问题|肥胖]] ** {{Link-en|美国的吸烟问题|Tobacco in the United States|吸烟}} * [[美國人權|人权]] * {{Link-en|美国的移民问题|Immigration to the United States|移民}} ** {{Link-en|美国的非法移民|Illegal immigration to the United States|非法移民}} * {{Link-en|美国的国际排名|International rankings of the United States}} * {{Link-en|美国的国家安全|National security of the United States|国家安全}} ** [[美国的大规模监控|大规模监控]] ** {{Link-en|美国的恐怖主义|Terrorism in the United States|恐怖主义}} * {{Link-en|美国的政教分离|Separation of church and state in the United States|政教分离}} }} | below = * '''{{Icon|Category}} [[:Category:美国|分类]]''' * '''{{Icon|Portal}} [[Portal:美國|主题]]''' * '''{{Icon|Commons}} [[:Commons:United States|资源]]''' }}<noinclude> {{documentation}} </noinclude>
</text>
<sha1>7n50yror3f9y6m6rlh4x6a4auxk8xvz</sha1>
</revision>
</page>
<page>
<title>Module:Arguments</title>
<ns>828</ns>
<id>3808911</id>
<revision>
<id>45476346</id>
<parentid>32175520</parentid>
<timestamp>2017-08-01T14:56:41Z</timestamp>
<contributor>
<username>Xiplus</username>
<id>899028</id>
</contributor>
<minor/>
<comment>
已保护“[[模块:Arguments]]”：高风险模板（[编辑=仅管理员]（无限期）[移动=仅管理员]（无限期））
</comment>
<model>Scribunto</model>
<format>text/plain</format>
<text bytes="8620" xml:space="preserve">
-- This module provides easy processing of arguments passed to Scribunto from -- #invoke. It is intended for use by other Lua modules, and should not be -- called from #invoke directly. local libraryUtil = require('libraryUtil') local checkType = libraryUtil.checkType local arguments = {} -- Generate four different tidyVal functions, so that we don't have to check the -- options every time we call it. local function tidyValDefault(key, val) if type(val) == 'string' then val = val:match('^%s*(.-)%s*$') if val == '' then return nil else return val end else return val end end local function tidyValTrimOnly(key, val) if type(val) == 'string' then return val:match('^%s*(.-)%s*$') else return val end end local function tidyValRemoveBlanksOnly(key, val) if type(val) == 'string' then if val:find('%S') then return val else return nil end else return val end end local function tidyValNoChange(key, val) return val end function arguments.getArgs(frame, options) checkType('getArgs', 1, frame, 'table', true) checkType('getArgs', 2, options, 'table', true) frame = frame or {} options = options or {} --[[ -- Get the argument tables. If we were passed a valid frame object, get the -- frame arguments (fargs) and the parent frame arguments (pargs), depending -- on the options set and on the parent frame's availability. If we weren't -- passed a valid frame object, we are being called from another Lua module -- or from the debug console, so assume that we were passed a table of args -- directly, and assign it to a new variable (luaArgs). --]] local fargs, pargs, luaArgs if type(frame.args) == 'table' and type(frame.getParent) == 'function' then if options.wrappers then --[[ -- The wrappers option makes Module:Arguments look up arguments in -- either the frame argument table or the parent argument table, but -- not both. This means that users can use either the #invoke syntax -- or a wrapper template without the loss of performance associated -- with looking arguments up in both the frame and the parent frame. -- Module:Arguments will look up arguments in the parent frame -- if it finds the parent frame's title in options.wrapper; -- otherwise it will look up arguments in the frame object passed -- to getArgs. --]] local parent = frame:getParent() if not parent then fargs = frame.args else local title = parent:getTitle():gsub('/sandbox$', '') local found = false if type(options.wrappers) == 'table' then for _,v in pairs(options.wrappers) do if v == title then found = true break end end elseif options.wrappers == title then found = true end -- We test for false specifically here so that nil (the default) acts like true. if found or options.frameOnly == false then pargs = parent.args end if not found or options.parentOnly == false then fargs = frame.args end end else -- options.wrapper isn't set, so check the other options. if not options.parentOnly then fargs = frame.args end if not options.frameOnly then local parent = frame:getParent() pargs = parent and parent.args or nil end end if options.parentFirst then fargs, pargs = pargs, fargs end else luaArgs = frame end -- Set the order of precedence of the argument tables. If the variables are -- nil, nothing will be added to the table, which is how we avoid clashes -- between the frame/parent args and the Lua args. local argTables = {fargs} argTables[#argTables + 1] = pargs argTables[#argTables + 1] = luaArgs --[[ -- Generate the tidyVal function. If it has been specified by the user, we -- use that; if not, we choose one of four functions depending on the -- options chosen. This is so that we don't have to call the options table -- every time the function is called. --]] local tidyVal = options.valueFunc if tidyVal then if type(tidyVal) ~= 'function' then error( "bad value assigned to option 'valueFunc'" .. '(function expected, got ' .. type(tidyVal) .. ')', 2 ) end elseif options.trim ~= false then if options.removeBlanks ~= false then tidyVal = tidyValDefault else tidyVal = tidyValTrimOnly end else if options.removeBlanks ~= false then tidyVal = tidyValRemoveBlanksOnly else tidyVal = tidyValNoChange end end --[[ -- Set up the args, metaArgs and nilArgs tables. args will be the one -- accessed from functions, and metaArgs will hold the actual arguments. Nil -- arguments are memoized in nilArgs, and the metatable connects all of them -- together. --]] local args, metaArgs, nilArgs, metatable = {}, {}, {}, {} setmetatable(args, metatable) local function mergeArgs(iterator, tables) --[[ -- Accepts multiple tables as input and merges their keys and values -- into one table using the specified iterator. If a value is already -- present it is not overwritten; tables listed earlier have precedence. -- We are also memoizing nil values, but those values can be -- overwritten. --]] for _, t in ipairs(tables) do for key, val in iterator(t) do if metaArgs[key] == nil then local tidiedVal = tidyVal(key, val) if tidiedVal == nil then nilArgs[key] = true else metaArgs[key] = tidiedVal end end end end end --[[ -- Define metatable behaviour. Arguments are memoized in the metaArgs table, -- and are only fetched from the argument tables once. Fetching arguments -- from the argument tables is the most resource-intensive step in this -- module, so we try and avoid it where possible. For this reason, nil -- arguments are also memoized, in the nilArgs table. Also, we keep a record -- in the metatable of when pairs and ipairs have been called, so we do not -- run pairs and ipairs on the argument tables more than once. We also do -- not run ipairs on fargs and pargs if pairs has already been run, as all -- the arguments will already have been copied over. --]] metatable.__index = function (t, key) --[[ -- Fetches an argument when the args table is indexed. First we check -- to see if the value is memoized, and if not we try and fetch it from -- the argument tables. When we check memoization, we need to check -- metaArgs before nilArgs, as both can be non-nil at the same time. -- If the argument is not present in metaArgs, we also check whether -- pairs has been run yet. If pairs has already been run, we return nil. -- This is because all the arguments will have already been copied into -- metaArgs by the mergeArgs function, meaning that any other arguments -- must be nil. --]] local val = metaArgs[key] if val ~= nil then return val elseif metatable.donePairs or nilArgs[key] then return nil end for _, argTable in ipairs(argTables) do local argTableVal = tidyVal(key, argTable[key]) if argTableVal == nil then nilArgs[key] = true else metaArgs[key] = argTableVal return argTableVal end end return nil end metatable.__newindex = function (t, key, val) -- This function is called when a module tries to add a new value to the -- args table, or tries to change an existing value. if options.readOnly then error( 'could not write to argument table key "' .. tostring(key) .. '"; the table is read-only', 2 ) elseif options.noOverwrite and args[key] ~= nil then error( 'could not write to argument table key "' .. tostring(key) .. '"; overwriting existing arguments is not permitted', 2 ) elseif val == nil then --[[ -- If the argument is to be overwritten with nil, we need to erase -- the value in metaArgs, so that __index, __pairs and __ipairs do -- not use a previous existing value, if present; and we also need -- to memoize the nil in nilArgs, so that the value isn't looked -- up in the argument tables if it is accessed again. --]] metaArgs[key] = nil nilArgs[key] = true else metaArgs[key] = val end end metatable.__pairs = function () -- Called when pairs is run on the args table. if not metatable.donePairs then mergeArgs(pairs, argTables) metatable.donePairs = true metatable.doneIpairs = true end return pairs(metaArgs) end metatable.__ipairs = function () -- Called when ipairs is run on the args table. if not metatable.doneIpairs then mergeArgs(ipairs, argTables) metatable.doneIpairs = true end return ipairs(metaArgs) end return args end return arguments
</text>
<sha1>m9ddo769dkkvlkz48buir34035j4qhc</sha1>
</revision>
</page>
<page>
<title>Module:CGroup/PresidentsUS</title>
<ns>828</ns>
<id>4122478</id>
<revision>
<id>65211836</id>
<parentid>65146948</parentid>
<timestamp>2021-04-15T09:29:01Z</timestamp>
<contributor>
<username>Patlabor Ingram</username>
<id>1232538</id>
</contributor>
<model>Scribunto</model>
<format>text/plain</format>
<text bytes="16571" xml:space="preserve">
-- 用法： Item('原文', '轉換規則') local Item = require('Module:CGroup/core').Item; return { name = 'PresidentsUS', description = '美国总统、美国政府与政治', content = { { type = 'text', text = [=[ 本转换组汇集关于美国总统、美国联邦参议员及众议院、美国政治人物、美国政府机构名、美国军队军衔、美国最高法院大法官等地区词。[[Category:公共转换组模块|{{SUBPAGENAME}}]] 以下是與本頁面相關的轉換組： {| class="wikitable" ! 轉換組 || 說明 |- | [[Module:CGroup/政治人物]] || 政治人物 |- | [[Module:CGroup/People]] || 人名 |- | [[Module:CGroup/USState]] || 美国州份 |} == 美国总统 == （以下按当选总统顺序排列） === 第四十六任总统 === ]=] }, Item('Joe Biden', 'zh-cn:乔·拜登; zh-tw:喬·拜登; zh-hk:祖·拜登;'), { type = 'text', text = [[ === 第四十五任总统 === ]] }, Item('Donald', 'zh-hans:唐纳德; zh-hant:唐納德; zh-cn:唐纳德; zh-tw:唐納; zh-hk:當勞;'), Item('Trump', 'zh-hans:特朗普; zh-hant:川普; zh-cn:特朗普; zh-tw:川普; zh-hk:特朗普; zh-mo:特朗普;'), { type = 'text', text = [[ === 第四十四任總統 === ]] }, Item('Barack', 'zh-hans:贝拉克; zh-tw:巴拉克; zh-hk:巴拉克;'), Item('Obama', 'zh-hans:奥巴马; zh-hant:奧巴馬; zh-tw:歐巴馬; zh-hk:奧巴馬;'), Item('Hussein', 'zh-cn:侯赛因; zh-tw:胡笙; zh-hk:侯賽因; zh-sg:胡申;'), { type = 'text', text = [[ === 第四十三任總統 === ]] }, Item('George Walker Bush', 'zh-hans:乔治·沃克·布什; zh-tw:喬治·沃克·布希; zh-hk:喬治·獲加·布殊'), { type = 'text', text = [[ === 第四十二任總統 === ]] }, Item('Bill', 'zh-hans:比尔; zh-tw:比爾; zh-hk:比爾;'), Item('Clinton', 'zh-hans:克林顿; zh-tw:柯林頓; zh-hk:克林頓;'), Item('Jefferson', 'zh-hans:杰斐逊; zh-tw:傑佛遜; zh-hk:傑佛遜;'), { type = 'text', text = [[ === 第四十一任總統 === ]] }, Item('George Herbert Walker Bush', 'zh-hans:乔治·H·W·布什; zh-tw:喬治·H·W·布希; zh-hk:喬治·H·W·布殊'), Item('Bush', 'zh-hans:布什; zh-tw:布希; zh-hk:布殊;'), { type = 'text', text = [[ === 第四十任總統 === ]] }, Item('Ronald Reagan', 'zh-cn:罗纳德·里根; zh-tw:隆納·雷根; zh-hk:朗奴·列根;'), Item('Reagan', 'zh:裡根; zh-hans:里根; zh-tw:雷根; zh-hk:列根;'), { type = 'text', text = [[ === 第三十八任总统 === ]] }, Item('Gerald Ford', 'zh:杰拉爾德·福特;zh-tw:傑拉德·福特;zh-cn:杰拉尔德·福特;zh-hk:傑拉爾德·福特;'), Item('Gerald', 'zh:杰拉爾德;zh-tw:傑拉德;zh-cn:杰拉尔德;zh-hk:傑拉爾德;'), { type = 'text', text = [[ === 第三十七任总统 === ]] }, Item('Richard Milhous Nixon', 'zh-hans:理查德·尼克松; zh-tw:理察·尼克森; zh-hk:李察·尼克遜'), Item('Richard', 'zh-hans:理查德; zh-tw:理察; zh-hk:李察'), Item('Nixon', 'zh-hans:尼克松; zh-tw:尼克森; zh-hk:尼克遜'), { type = 'text', text = [[ === 第三十六任总统 === ]] }, Item('Lyndon Johnson', 'zh-hans:林登·约翰逊; zh-tw:林登·詹森; zh-hk:林登·莊遜;'), { type = 'text', text = [[ === 第三十五任总统 === ]] }, Item('John Fitzgerald Kennedy', 'zh-hans:肯尼迪; zh-tw:甘迺迪; zh-hk:甘迺迪;'), { type = 'text', text = [[ === 第三十四任总统 === ]] }, Item('Dwight Eisenhower', 'zh-hans:德怀特·艾森豪威尔; zh-tw:德懷特·艾森豪; zh-hk:懷特·艾森豪威爾;'), Item('Dwight David Eisenhower', 'zh-cn:德怀特·大卫·艾森豪威尔;zh-tw:德懷特·大衛·艾森豪;zh-hk:懷特·大衛·艾森豪'), Item('Dwight David Eisenhower', 'zh-hans:艾森豪威尔; zh-tw:艾森豪; zh-hk:艾森豪威爾;'), Item('Dwight David Eisenhower', '德懷特·艾森豪威爾=>zh-hans:德怀特·艾森豪威尔;德懷特·艾森豪威爾=>zh-tw:德懷特·艾森豪;德懷特·艾森豪威爾=>zh-hk:懷特·艾森豪威爾'),--避免錯誤轉換 { type = 'text', text = [[ === 第三十三任总统 === ]] }, Item('Harry', 'zh-hans:哈里; zh-hk:哈里; zh-tw:哈瑞;'), { type = 'text', text = [[ === 第三十一任总统 === ]] }, Item('Herbert', 'zh-cn:赫伯特;zh-tw:赫伯特;zh-hk:夏拔;'), Item('Hoover', 'zh-hans:胡佛;zh-hant:胡佛;'), { type = 'text', text = [[ === 第三十任总统 === ]] }, Item('Calvin Coolidge', 'zh-hans:卡尔文·柯立芝; zh-tw:卡爾文·柯立芝; zh-hk:卡雲·古列茲;'), Item('Calvin', 'zh-hans:卡尔文; zh-tw:卡爾文; zh-hk:卡雲;'), Item('Coolidge', 'zh-hans:柯立芝; zh-tw:柯立芝; zh-hk:古列茲;'), { type = 'text', text = [[ === 第二十九任总统 === ]] }, Item('Warren', 'zh-hans:沃伦; zh-tw:沃倫; zh-hk:禾倫;'), Item('Gamaliel', 'zh-hans:盖玛利尔; zh-tw:蓋瑪利爾; zh-hk:加馬利爾;'), { type = 'text', text = [[ === 第二十七任总统 === ]] }, Item('William H. Taft', 'zh-hans:塔夫脱; zh-tw:塔虎脫'), { type = 'text', text = [[ === 第二十六任总统 === ]] }, Item('Theodore Roosevelt', 'zh-hans:西奥多; zh-tw:狄奧多'), { type = 'text', text = [[ === 第二十二任总统 === ]] }, Item('Stephen Grover Cleveland', 'zh-hans:斯蒂芬;zh-hant:史蒂芬;'), Item('Stephen Grover Cleveland', 'zh-hans:克利夫兰;zh-hant:克里夫蘭;'), { type = 'text', text = [[ === 第二十任总统 === ]] }, Item('James Abram Garfield', 'zh-cn:詹姆斯;zh-hant:詹姆士;zh-hk:占士;'), Item('James Abram Garfield', 'zh-cn:艾布拉姆;zh-hant:艾布拉姆;zh-hk:艾伯林;'), Item('James Abram Garfield', 'zh-cn:加菲尔德;zh-tw:加菲爾德;zh-hk:加菲;'), { type = 'text', text = [[ === 第十四任总统 === ]] }, Item('Johnson', 'zh-hans:约翰逊; zh-tw:詹森; zh-hk:莊遜;'), { type = 'text', text = [[ === 第三任总统 === ]] }, Item('Thomas', 'zh-hans:托马斯; zh-tw:湯瑪斯; zh-hk:湯馬士;'), Item('Jefferson', 'zh-hans:杰斐逊; zh-tw:傑佛遜; zh-hk:傑佛遜;'), { type = 'text', text = [[ === 第一任总统 === ]] }, Item('George', 'zh-cn:乔治·华盛顿; zh-tw:喬治·華盛頓; zh-hk:佐治·華盛頓;'), { type = 'text', text = [[ == 美国政治人物 == === A === ]] }, Item('John Sidney McCain III', 'zh-hans:埃夫丽尔;zh-sg:艾薇儿;zh-tw:艾薇兒;'), { type = 'text', text = [[ === K === ]] }, Item('John Sidney McCain III', 'zh-hans:麦凯恩;zh-hk:麥凱恩;zh-tw:麥肯;'), Item('Kerry', 'zh-hans:克里;zh-hk:克里;zh-tw:凱瑞;'), Item('Kerry', '凱利=>zh-cn:克里;凱利=>zh-tw:凱瑞;凱利=>zh-hk:克里'), Item('Kerry', '凱里=>zh-cn:克里;凱里=>zh-tw:凱瑞;凱里=>zh-hk:克里'), Item('Kamala Harris', 'zh:贺锦丽; zh-cn:卡玛拉·哈里斯; zh-tw:賀錦麗;'), { type = 'text', text = [[ === M === ]] }, Item('John Sidney McCain III', 'zh-hans:麦凯恩;zh-hk:麥凱恩;zh-tw:麥肯;'), Item('Mitch McConnell', 'zh-hans:麦康奈尔;zh-hk:麥康奈爾;zh-tw:麥康諾;'), Item('Mitch McConnell', 'zh-hans:米奇;zh-hk:米奇;zh-tw:密契;'), Item('Mike Pompeo', 'zh-cn:迈克;zh-mo:邁克;zh-hk:米高;zh-tw:麥克;'), Item('Mike Pompeo', 'zh-cn:蓬佩奥;zh-hk:蓬佩奧;zh-tw:龐培歐;'), { type = 'text', text = [[ === N === ]] }, Item('Nancy Pelosi', 'zh-hans:南希·佩洛西;zh-hk:蘭茜·佩洛西;zh-tw:南希·裴洛西'), { type = 'text', text = [[ === 其他 === ]] }, Item('', 'zh-cn:罗比内特; zh-tw:羅比內特; zh-hk:羅賓納特;'), Item('', 'zh-cn:凯瑟琳 ;zh-tw:凱薩琳 ;zh-hk:嘉芙蓮;'), Item('', 'zh-cn:欧根尼娅; zh-tw:歐根尼婭; zh-hk:尤珍妮亞;'), Item('', 'zh-cn:福纳根; zh-tw:芬尼根; zh-hk:芬尼根;'), Item('', 'zh-cn:布莱恩; zh-tw:布萊恩; zh-hk:拜仁;'), Item('', 'zh-cn:弗朗西斯; zh-tw:法蘭西斯; zh-hk:法蘭西斯;'), Item('', 'zh-cn:瓦莱里; zh-tw:薇樂莉; zh-hk:法萊麗;'), Item('', 'zh-hans:南希;zh-hk:蘭茜;zh-tw:南希;'), Item('Melania', 'zh-cn:梅拉尼娅;zh-hk:梅拉尼亞;zh-tw:梅蘭妮亞;'), { type = 'text', text = [[ == 美国政府 == === 美国联邦政府机构 === ]] }, Item('', 'zh-cn:白宫办公厅主任; zh-hk:白宮幕僚長; zh-sg:白宫幕僚长; zh-tw:白宮幕僚長;'), Item('', 'zh-cn:白宫办公厅副主任; zh-hk:白宮助理幕僚長; zh-sg:白宫助理幕僚长; zh-tw:白宮助理幕僚長;'), Item('', 'zh-cn:白宫新闻发言人; zh-hk:白宮發言人; zh-tw:白宮新聞秘書;'), Item('', 'zh-cn:常务副国务卿; zh-hk:副國務卿; zh-tw:副國務卿;'), Item('', 'zh-cn:副国务卿; zh-hk:次國務卿; zh-tw:國務次卿'), Item('', 'zh-cn:助理国务卿帮办; zh-hk:副助理國務卿; zh-tw:副助理國務卿;'), Item('', 'zh-cn:助卿帮办; zh-hk:副助卿; zh-tw:副助卿;'), Item('', 'zh-cn:助理部长帮办; zh-hk:副助理部長; zh-tw:副助理部長;'), Item('', '東亞暨太平洋事務=>zh-cn:东亚和太平洋事务;'), Item('Census Bureau', 'zh-hans:人口调查局; zh-hant:人口普查局;'), Item('Coast guard', 'zh-hans:海岸警卫队; zh-hant:海岸防衛隊;'), Item('Federal Reserve Board of Governors', 'zh-tw:聯邦準備理事會; zh-hk:聯邦儲備委員會; zh-cn:联邦储备委员会'), Item('Federal Reserve System', 'zh-tw:聯邦準備制度; zh-hk:聯邦儲備系統; zh-cn:联邦储备系统'), Item('Federal Reserve', 'zh-tw:聯邦準備; zh-hk:聯邦儲備; zh-cn:联邦储备'), Item('', 'zh-tw:聯準; zh-hk:聯儲; zh-cn:联储'), Item('National Aeronautics and Space Administration', 'zh-tw:國家航空暨太空總署; zh-hk:太空總署; zh-cn:国家航空航天局'), Item('National Oceanic and Atmospheric Administration', 'zh-tw:國家海洋暨大氣總署; zh-hk: 國家海洋及大氣管理局; zh-cn:国家海洋和大气管理局'), Item('', 'zh-tw:航空總署;zh-hk:航空管理局;zh-cn:航空管理局;'), Item('', 'zh-tw:公路總署;zh-hk:公路管理局;zh-cn:公路管理局;'), Item('', 'zh-tw:汽車運輸安全總署;zh-hk:汽車運輸安全管理局;zh-cn:汽车运输安全局;'), Item('', 'zh-tw:鐵路總署;zh-hk:鐵路管理局;zh-cn:铁路署;'), Item('', 'zh-tw:公共運輸總署;zh-hk:公共交通管理局;zh-cn:公共交通管理局;'), Item('', 'zh-tw:海運總署;zh-hk:海事局;zh-cn:海事局;'), Item('', 'zh-tw:公路交通安全總署;zh-hk:公路交通安全海事局;zh-cn:公路交通安全管理局;'), Item('', 'zh-tw:運輸安全總署;zh-hk:運輸安全管理局;zh-cn:运输安全管理局;'), Item('National Security Council', '国家安全会议=>zh-cn:国家安全委员会; 國家安全會議=>zh-cn:国家安全委员会; '), Item('', 'zh:卫生与公共服务部; zh-tw:衛生及公共服務部; zh-cn:卫生与公众服务部; zh-sg:卫生及公共服务部'), Item('', 'zh-tw:住房及城市發展部; zh-cn:住房与城市发展部; zh-sg:住房及城市发展部'), Item('The Pentagon', 'zh-tw:五角大廈; zh-cn:五角大楼'), Item('', 'zh-tw:高等研究計劃署; zh-hk:高級研究計劃局; zh-cn:高级研究计划局'), Item('', 'zh-tw:國家食品暨農業研究院; zh-hk:國家食品和農業研究所; zh-cn:国家食品和农业研究所'), Item('', 'zh:森林局; zh-tw:林業局; zh-cn:林务局'), Item('', 'zh-tw:國家標準暨技術研究院; zh-hk:國家標準技術研究所; zh-cn:国家标准技术研究所'), Item('', 'zh-tw:教育科學研究院; zh-hk:教育科學研究所; zh-cn:教育科学研究所'), Item('', 'zh-tw:退伍軍人健康總署; zh-hk:退伍軍人健康管理局; zh-cn:退伍军人健康管理局'), Item('', 'zh-tw:國家身心障礙暨復健研究院; zh-hk:國家身心障礙和康復研究所; zh-cn:国家身心障碍和康复研究所'), Item('', 'zh-tw:貿易代表署; zh-hk:貿易代表處; zh-cn:贸易代表办公室'), Item('', 'zh-tw:緊急事務管理署; zh-hk:緊急事務管理署; zh-cn:紧急措施署; zh-sg:紧急事务管理署;'), Item('', 'zh-tw:海關及邊境保衛局; zh-hk:海關及邊境保衛局; zh-cn:海关和边境保护局'), Item('', 'zh-tw:移民及海關執法局; zh-hk:移民及海關執法局; zh-cn:移民和海关执法局'), Item('', 'zh-tw:郵政署; zh-hk:郵政署; zh-cn:邮政总局'), Item('', 'zh-tw:檔案記錄署; zh-hk:檔案記錄署; zh-cn:档案与文件署'), Item('', 'zh-tw:社會安全局; zh-hk:社會保障署; zh-cn:社会保障署'), Item('CDC', 'zh-hant:疾病管制與預防中心; zh-hans:疾病控制与预防中心;'), Item('', 'zh-tw:小商業局; zh-cn:小企业局'), Item('', '幕僚長 => zh-cn:办公厅主任; 幕僚长 => zh-cn:办公厅主任;'), Item('', '助理幕僚長 => zh-cn:办公厅副主任; 助理幕僚长 => zh-cn:办公厅副主任;'), Item('', '副總統幕僚長 => zh-cn:副总统办公室主任; 副总统幕僚长 => zh-cn:副总统办公室主任'), Item('', '國務次卿 => zh-cn:副国务卿; 次卿 => zh-cn:副国务卿'), Item('', '次長 => zh-cn:副部长'), Item('', '国家安全顾问 => zh-cn:国家安全事务助理; 國家安全顧問 => zh-cn:国家安全事务助理'), Item('', '国家安全顾问 => zh-cn:国家安全事务助理; 國家安全顧問 => zh-cn:国家安全事务助理'), Item('', '检察总长 => zh-cn:总检察长; 檢察總長 => zh-cn:总检察长'), { type = 'text', text = [[ === 美军军衔（军阶） === ]] }, Item('', 'zh-cn:陆军总军士长; zh-hk:陸軍總軍士長; zh-mo:陸軍總軍士長; zh-tw:陸軍特等士官長;'), Item('', 'zh-cn:一级军士长; zh-hk:一級軍士長; zh-mo:一級軍士長; zh-tw:一等士官長;'), Item('', 'zh-cn:二级军士长; zh-hk:二級軍士長; zh-mo:二級軍士長; zh-tw:二等士官長;'), Item('', 'zh-cn:三级军士长; zh-hk:三級軍士長; zh-mo:三級軍士長; zh-tw:三等士官長;'), Item('', 'zh-cn:军士长; zh-hk:軍士長; zh-mo:軍士長; zh-tw:士官長;'), Item('', 'zh-cn:技术兵; zh-hk:技術兵; zh-mo:技術兵; zh-tw:技術士官;'), Item('', 'zh-cn:五级准尉; zh-hk:五級準尉; zh-mo:五級準尉; zh-tw:特級准尉;'), Item('', 'zh-cn:四级准尉; zh-hk:四級準尉; zh-mo:四級準尉; zh-tw:一級准尉;'), Item('', 'zh-cn:三级准尉; zh-hk:三級準尉; zh-mo:三級準尉; zh-tw:二級准尉;'), Item('', 'zh-cn:二级准尉; zh-hk:二級準尉; zh-mo:二級準尉; zh-tw:三級准尉;'), Item('', 'zh-cn:一级准尉; zh-hk:一級準尉; zh-mo:一級準尉; zh-tw:四級准尉;'), Item('', 'zh-cn:集团军; zh-sg:集团军; zh-hk:集團軍; zh-mo:集團軍; zh-tw:軍團;'), --Item('', '伍 => zh-cn:火力组'), --单字过转，对调方向 Item('', '火力组=>zh-tw:伍;'), { type = 'text', text = [[ == 美国法律 == ]] }, Item('Countering America’s Adversaries Through Sanctions Act', 'zh-cn:美国敌对国家制裁法案; zh-tw:美國敵對國家制裁法案; zh-hk:通過制裁打擊美國對手法;zh-sg:通过制裁打击美国对手法;'), Item('', 'zh-cn:与台湾交往法; zh-hk:台灣旅行法; zh-tw:台灣旅行法; zh-sg:台湾旅行法;'), Item('', 'zh-cn:与台湾关系法; zh-hk:台灣關係法; zh-tw:臺灣關係法; zh-sg:台湾关系法;'), { type = 'text', text = [[ == 美国最高法院大法官 == （以下按任命顺序排列，包括首席大法官） === 第113位 === ]] }, Item('Gorsuch', 'zh-hans:戈萨奇;zh-hant:戈薩奇;zh-tw:戈蘇奇;'), { type = 'text', text = [[ === 第111位 === ]] }, Item('Sotomayor', 'zh-hans:索托马约尔;zh-hant:索托馬約爾;zh-tw:索托瑪約;'), { type = 'text', text = [[ === 第109位 === ]] }, Item('John Roberts', 'zh-cn:约翰·罗伯茨;zh-tw:約翰·羅勃茲;zh-hk:約翰·羅伯茨;'), Item('Roberts', 'zh-cn:罗伯茨; zh-hans:罗伯茨; zh-hant:羅伯茨;zh-tw:羅勃茲;zh-hk:羅伯茨;'), { type = 'text', text = [[ === 第107位 === ]] }, Item('Ruth Bader Ginsburg', 'zh-cn:露丝·巴德·金斯伯格;zh-tw:露絲·貝德·金斯堡;zh-hk:露芙·巴達·堅士堡;'), Item('Ginsburg', 'zh-cn:金斯伯格;zh-tw:金斯堡;zh-hk:堅士堡;'), { type = 'text', text = [[ === 第103位 === ]] }, Item('Scalia', 'zh-hans:斯卡利亚; zh-hant:斯卡利亞; zh-tw:史卡利亞;'), { type = 'text', text = [[ === 第102位 === ]] }, Item('Sandra Day O\'Connor', 'zh-hant:桑德拉·戴·奧康納;zh-tw:珊卓拉·戴·歐康納;zh-hans:桑德拉·戴·奥康纳;'), { type = 'text', text = [[ === 第100位 === ]] }, Item('Rehnquist', 'zh-cn:伦奎斯特;zh-hans:伦奎斯特;zh-hant:芮恩奎斯特;'), { type = 'text', text = [[ === 第97位 === ]] }, Item('Warren Earl Burger', 'zh-hans:沃伦·厄尔·伯格;zh-tw:華倫·厄爾·柏格;zh-hant:沃倫·厄爾·伯格;zh-hk:禾倫·艾爾·伯格;'), Item('Warren Burger', 'zh-hans:沃伦·伯格;zh-tw:華倫·柏格;zh-hant:沃倫·伯格;zh-hk:禾倫·伯格;'), }, }
</text>
<sha1>0njc83xu4x4lm1uonpzwphiesar1anu</sha1>
</revision>
</page>
<page>
<title>Module:CGroup/USState</title>
<ns>828</ns>
<id>4031619</id>
<revision>
<id>65074196</id>
<parentid>65074114</parentid>
<timestamp>2021-04-05T12:56:33Z</timestamp>
<contributor>
<username>Sanmosa</username>
<id>1572602</id>
</contributor>
<comment>// Edit via Wikiplus</comment>
<model>Scribunto</model>
<format>text/plain</format>
<text bytes="26760" xml:space="preserve">
return { name = 'USState', description = '美国州份与地名', content = { { type = 'text', text = [=[ [[Category:公共轉換組模板|{{SUBPAGENAME}}]] 除了使用本公共转换组的名称“USState”外，使用“US”、“US Places”、“美国地名”（简繁体皆可）、“美国州份”（简繁体皆可）、“美国的州”（简繁体皆可）亦可实现本公共转换组的转换功能。 本公共转换组虽名为“USState”或“美国州份”，但内容不仅限于州份，也包括其他各个地名，依照“州份”“首府”“地名”“相关字词”分组顺序列于下表。添加地名转换规则前请务必查阅“首府”分组中是否已有对应地市的译名转换规则，减少重复、避免冲突。 以下是與本頁面相關的轉換組： {| class="wikitable" ! 轉換組 || 說明 |- | [[Module:CGroup/地名]] || 世界各地地名 |} 本页面没有类似于NoteTA的数量限制。 == 州份 == ]=] }, -- 台灣多數用阿 { type = 'item', original = 'Alabama', rule = '亞拉巴馬=>zh-cn:亚拉巴马; 亞拉巴馬=>zh-tw:阿拉巴馬; 亞拉巴馬=>zh-hk:亞拉巴馬; 亞拉巴馬=>zh-mo:亞拉巴馬;' }, -- 避免因马州轉換過度 { type = 'item', original = 'Alabama', rule = '阿拉巴马=>zh-cn:亚拉巴马; 阿拉巴马=>zh-tw:阿拉巴馬; 阿拉巴马=>zh-hk:阿拉巴馬; 阿拉巴马=>zh-mo:阿拉巴馬;' }, -- 亚、阿兩者在大陆和香港都用 { type = 'item', original = 'Alabama', rule = 'zh-cn:亚拉巴马; zh-tw:阿拉巴馬; zh-hk:阿拉巴馬;' }, { type = 'item', original = 'California', rule = 'zh-cn:加利福尼亚州; zh-tw:加利福尼亞州; zh-hk:加利福尼亞州' }, { type = 'item', original = 'Connecticut', rule = 'zh-cn:康涅狄格; zh-tw:康乃狄克; zh-hk:康涅狄格;' }, { type = 'item', original = 'Delaware', rule = 'zh-cn:特拉华州; zh-tw:德拉瓦州; zh-hk:特拉華州;' }, { type = 'item', original = 'Delaware', rule = '德拉威州=>zh-cn:特拉华州; 德拉威州=>zh-tw:德拉威州; 德拉威州=>zh-hk:特拉華州; 德拉威州=>zh-mo:特拉華州;' }, { type = 'item', original = 'Florida', rule = 'zh-cn:佛罗里达; zh-tw:佛羅里達; zh-hk:佛羅里達; zh-mo:佛羅里達;' }, { type = 'item', original = 'Georgia', rule = 'zh-cn:佐治亚州; zh-tw:喬治亞州; zh-hk:佐治亞州;' }, { type = 'item', original = 'Idaho', rule = 'zh-cn:爱达荷; zh-tw:愛達荷; zh-hk:愛達荷;' }, -- 台灣「愛德荷」單向轉換 { type = 'item', original = 'Idaho', rule = '愛德荷=>zh-cn:爱达荷; 愛德荷=>zh-tw:愛達荷; 愛德荷=>zh-hk:愛達荷; 愛德荷=>zh-mo:愛達荷;' }, { type = 'item', original = 'Illinois', rule = 'zh-cn:伊利诺伊; zh-tw:伊利諾; zh-hk:伊利諾;' }, { type = 'item', original = 'Illinois', rule = '伊利诺伊=>zh-cn:伊利诺伊; zh-tw:伊利諾;' }, { type = 'item', original = 'Illinois', rule = '伊利諾伊=>zh-cn:伊利诺伊; zh-tw:伊利諾;' }, { type = 'item', original = 'Indiana', rule = 'zh-hans:印第安纳; zh-hant:印第安納;' }, { type = 'item', original = 'Iowa', rule = 'zh-cn:艾奥瓦; zh-tw:愛荷華; zh-hk:愛荷華;' }, -- 台灣「愛阿華」單向轉換 { type = 'item', original = 'Iowa', rule = '衣阿華=>zh-cn:艾奥瓦; 衣阿華=>zh-tw:愛荷華; 衣阿華=>zh-hk:愛荷華; 衣阿華=>zh-mo:愛荷華;' }, { type = 'item', original = 'Louisiana', rule = 'zh-cn:路易斯安那; zh-tw:路易斯安那; zh-hk:路易斯安那;' }, -- 台灣「路易西安那」單向轉換 { type = 'item', original = 'Louisiana', rule = '路易西安那=>zh-cn:路易斯安那; 路易西安那=>zh-tw:路易斯安那; 路易西安那=>zh-hk:路易斯安那; 路易西安那=>zh-mo:路易斯安那;' }, -- 台灣「路易西安納」單向轉換 { type = 'item', original = 'Louisiana', rule = '路易西安納=>zh-cn:路易斯安那; 路易西安纳=>zh-tw:路易斯安那; 路易西安納=>zh-hk:路易斯安那; 路易西安納=>zh-mo:路易斯安那;' }, { type = 'item', original = 'Maryland', rule = 'zh-cn:马里兰; zh-tw:馬里蘭; zh-hk:馬利蘭;' }, { type = 'item', original = 'Massachusetts', rule = 'zh-cn:马萨诸塞; zh-tw:麻薩諸塞; zh-hk:麻省' }, { type = 'item', original = 'Massachusetts', rule = '马萨诸塞州=>zh-tw:麻薩諸塞州; 马萨诸塞州=>zh-hk:麻省;' }, { type = 'item', original = 'Massachusetts', rule = '馬薩諸塞州=>zh-cn:马萨诸塞州; 馬薩諸塞州=>zh-tw:麻薩諸塞州; 馬薩諸塞州=>zh-hk:麻省;' }, { type = 'item', original = 'Massachusetts', rule = '麻薩諸塞州=>zh-cn:马萨诸塞州; 麻薩諸塞州=>zh-tw:麻薩諸塞州; 麻薩諸塞州=>zh-hk:麻省;' }, { type = 'item', original = 'Massachusetts', rule = '马萨诸塞州=>zh-tw:麻薩諸塞州; 马萨诸塞州=>zh-hk:麻省;' }, { type = 'item', original = 'Massachusetts', rule = '麻州=>zh-cn:马萨诸塞州; 麻州=>zh-tw:麻州; 麻州=>zh-hk:麻省;' }, -- 請不要刪去這幾個關於Massachusetts的轉換，因為「麻薩諸塞州」和「马萨诸塞州」都可以再用簡體和繁體字寫出來，電腦不會懂得認出「麻萨诸塞州」其實就是「麻薩諸塞州」，致使有些轉換失敗。另外也請不要移去「麻州」的轉換，因為維基上很多也以「麻州」來稱呼這州，但對不少讀者來說，並不習慣這稱呼 { type = 'item', original = 'Massachusetts', rule = '麻萨诸塞=>zh-tw:麻薩諸塞; 麻萨诸塞=>zh-hk:麻省;' }, { type = 'item', original = 'Massachusetts', rule = '麻萨诸塞州=>zh-cn:麻萨诸塞州; 麻萨诸塞州=>zh-tw:麻薩諸塞州; 麻萨诸塞州=>zh-hk:麻省;' }, { type = 'item', original = 'Michigan', rule = 'zh-cn:密歇根; zh-tw:密西根; zh-hk:密芝根;' }, { type = 'item', original = 'New Hampshire', rule = 'zh-cn:新罕布什尔; zh-tw:新罕布夏; zh-hk:新罕布什爾;' }, { type = 'item', original = 'New Hampshire', rule = '新罕布什爾=>zh-cn:新罕布什尔; 新罕布什爾=>zh-tw:新罕布夏; 新罕布什爾=>zh-hk:新罕布什爾;' }, { type = 'item', original = 'New Hampshire', rule = '新罕布什尔=>zh-cn:新罕布什尔; 新罕布什尔=>zh-tw:新罕布夏; 新罕布什尔=>zh-hk:新罕布什爾;' }, -- 台灣另有「紐澤西」，因紐澤西籃網、紐澤西護欄習用已久，請不要另外設定單向轉換 { type = 'item', original = 'New Jersey', rule = 'zh-cn:新泽西; zh-tw:紐澤西; zh-hk:新澤西;' }, { type = 'item', original = 'North Carolina', rule = 'zh-cn:北卡罗来纳; zh-tw:北卡羅來納; zh-hk:北卡羅萊納;' }, -- 台灣「北卡羅萊那」單向轉換 { type = 'item', original = 'North Carolina', rule = '北卡羅萊那=>zh-cn:北卡罗来纳; 北卡罗莱那=>zh-tw:北卡羅來納; 北卡羅萊那=>zh-hk:北卡羅萊納; 北卡羅萊那=>zh-mo:北卡羅萊納;' }, { type = 'item', original = '(North / South) Dakota', rule = 'zh-cn:达科他; zh-tw:達科他;' }, -- Oklahoma, Oklahoma詳見州府 { type = 'item', original = 'Oklahoma', rule = 'zh-cn:俄克拉荷马; zh-tw:奧克拉荷馬; zh-hk:奧克拉荷馬;' }, -- 台灣「俄克拉荷馬」單向轉換 { type = 'item', original = 'Oklahoma', rule = '俄克拉荷馬=>zh-cn:俄克拉荷马; 俄克拉荷马=>zh-hk:奧克拉荷馬; 俄克拉荷馬=>zh-tw:奧克拉荷馬; 俄克拉荷马=>zh-mo:奧克拉荷馬;' }, { type = 'item', original = 'Oregon', rule = 'zh-cn:俄勒冈; zh-tw:奧勒岡; zh-hk:俄勒岡;' }, -- 台灣「奧勒岡」/「奧瑞岡」（ROC外交部）單向轉換 { type = 'item', original = 'Oregon', rule = '奧勒岡=>zh-cn:俄勒冈; 奥勒冈=>zh-tw:奧勒岡; 奧勒岡=>zh-hk:俄勒岡; 奧勒岡=>zh-mo:俄勒岡;' }, { type = 'item', original = 'Pennsylvania', rule = 'zh-cn:宾夕法尼亚; zh-tw:賓夕法尼亞; zh-hk:賓夕凡尼亞;' }, { type = 'item', original = 'Rhode Island', rule = 'zh-hans:罗得岛; zh-hant:羅德島;' }, { type = 'item', original = 'South Carolina', rule = 'zh-cn:南卡罗来纳; zh-tw:南卡羅來納; zh-hk:南卡羅萊納;' }, -- 台灣「南卡羅萊那」單向轉換 { type = 'item', original = 'South Carolina', rule = '南卡羅萊那=>zh-cn:南卡罗来纳; 南卡罗莱那=>zh-tw:南卡羅來納; 南卡羅萊那=>zh-hk:南卡羅萊納; 南卡羅萊那=>zh-mo:南卡羅萊納;' }, { type = 'item', original = 'Texas', rule = 'zh-cn:得克萨斯; zh-tw:德克薩斯; zh-hk:德薩斯;' }, { type = 'item', original = 'Texas', rule = '得克薩斯=>zh-cn:得克萨斯; 得克薩斯=>zh-tw:德克薩斯; 得克薩斯=>zh-hk:德薩斯;' }, { type = 'item', original = 'Texas', rule = '德克萨斯=>zh-cn:得克萨斯; 德克萨斯=>zh-tw:德克薩斯; 德克萨斯=>zh-hk:德薩斯;' }, { type = 'item', original = 'Texas', rule = '德萨斯=>zh-cn:得克萨斯; 德萨斯=>zh-tw:德克薩斯; 德萨斯=>zh-hk:德薩斯;' }, { type = 'item', original = 'Texas', rule = 'zh-cn:得州; zh-tw:德州; zh-hk:德州;' }, { type = 'item', original = 'Virginia', rule = 'zh-cn:弗吉尼亚; zh-tw:維吉尼亞; zh-hk:維珍尼亞;' }, { type = 'item', original = 'Virginia', rule = '弗吉尼亞=>zh-cn:弗吉尼亚; 弗吉尼亞=>zh-tw:維吉尼亞; 弗吉尼亞=>zh-hk:維珍尼亞;' }, { type = 'item', original = 'Wisconsin', rule = 'zh-cn:威斯康星; zh-tw:威斯康辛; zh-hk:威斯康辛;' }, { type = 'text', text = [[ <!-- {{CItem||original=}} {{CItem||original=}} {{CItem||original=}} {{CItem||original=}} --> == 州府 == ]] }, { type = 'item', original = 'Albany, New York', rule = 'zh-cn:奥尔巴尼; zh-tw:奧巴尼; zh-hk:奧爾巴尼;' }, { type = 'item', original = 'Anchorage, Alaska', rule = 'zh-cn:安克雷奇; zh-tw:安克拉治; zh-hk:安克雷奇;' }, { type = 'item', original = 'Atlanta', rule = 'zh-cn:亚特兰大; zh-tw:亞特蘭大; zh-hk:阿特蘭大;' }, { type = 'item', original = 'Austin, Texas', rule = 'zh-cn:奥斯汀; zh-tw:奧斯丁; zh-hk:柯士甸;' }, { type = 'item', original = 'Baton Rouge, Louisiana', rule = 'zh-cn:巴吞鲁日; zh-tw:巴頓魯治; zh-hk:巴吞魯日;' }, { type = 'item', original = 'Boise, Idaho', rule = 'zh-cn:博伊西; zh-tw:波夕; zh-hk:博伊西;' }, { type = 'item', original = 'Cheyenne, Wyoming', rule = 'zh-cn:夏延; zh-tw:夏安; zh-hk:夏延;' }, { type = 'item', original = 'Des Moines, Iowa', rule = 'zh-cn:得梅因; zh-tw:狄蒙; zh-hk:德梅因;' }, { type = 'item', original = 'Hartford, Connecticut', rule = 'zh-cn:哈特福德; zh-tw:哈特福; zh-hk:哈特福;' }, { type = 'item', original = 'Honolulu', rule = 'zh-cn:火奴鲁鲁;zh-sg:檀香山;zh-tw:檀香山;zh-hk:檀香山;'}, { type = 'item', original = 'Houston', rule = 'zh-hans:休斯敦;zh-hk:侯斯頓;zh-tw:休士頓;'}, -- 避免过度转换 { type = 'item', original = 'Indianapolis, Indiana', rule = 'zh-cn:印第安纳波利斯; zh-tw:印第安納波利斯;' }, { type = 'item', original = 'Jefferson, Missouri', rule = 'zh-cn:杰斐逊城; zh-tw:傑佛遜城;' }, { type = 'item', original = 'Little Rock, Arkansas', rule = 'zh-cn:小石城; zh-tw:小岩城; zh-hk:小石城;' }, { type = 'item', original = 'Miami', rule = 'zh-cn:迈阿密; zh-tw:邁阿密; zh-hk:邁亞密;' }, { type = 'item', original = 'Montpelier, Vermont', rule = 'zh-cn:蒙彼利埃; zh-tw:蒙特佩利爾; zh-hk:蒙彼利埃' }, { type = 'item', original = 'Nashville, Tennessee', rule = 'zh-hans:纳什维尔; zh-hant:奈許維爾; zh-hk:納士維;' }, { type = 'item', original = 'New England', rule = 'zh-cn:新英格兰; zh-tw:新英格蘭; zh-hk:紐英倫;' }, -- zh-hant不要去掉，否則會轉換失效 { type = 'item', original = 'Oklahoma City, Oklahoma', rule = 'zh-cn:俄克拉荷马城; zh-hant:奧克拉荷馬市; zh-tw:奧克拉荷馬市; zh-hk:奧克拉荷馬城; zh-mo:奧克拉荷馬城;' }, { type = 'item', original = 'Phoenix, Arizona', rule = 'zh-cn:菲尼克斯; zh-tw:鳳凰城; zh-hk:鳳凰城;' }, { type = 'item', original = 'Raleigh, North Carolina', rule = 'zh-cn:罗利; zh-tw:羅里; zh-hk:羅利;' }, { type = 'item', original = 'Richmond, Virginia', rule = 'zh-cn:里士满; zh-tw:里奇蒙; zh-hk:列治文;' }, { type = 'item', original = 'Sacramento, California', rule = 'zh-cn:萨克拉门托; zh-tw:沙加緬度; zh-hk:沙加緬度;' }, { type = 'item', original = 'Salem, Oregon', rule = 'zh-cn:塞勒姆 (俄勒冈州); zh-tw:撒冷 (奧勒岡州); zh-hk:塞勒姆 (俄勒岡州);' }, { type = 'item', original = 'Santa Fe, New Mexico', rule = 'zh-cn:圣菲; zh-tw:聖塔菲; zh-hk:聖達菲;' }, { type = 'item', original = 'Springfield', rule = 'zh-hans:斯普林菲尔德; zh-hant:春田市;' }, -- 若頁面內出現「斯普林菲尔德市」時，在台灣正體的設定下會被轉換成「春田市市」，此單向轉換碼便是為了防止此種過度轉換而設，請勿刪除或移動 { type = 'item', original = 'Springfield', rule = 'zh:斯普林菲尔德市; zh-hans:斯普林菲尔德; zh-hant:春田市;' }, { type = 'item', original = 'Tallahassee, Florida', rule = 'zh-cn:塔拉哈西; zh-tw:塔拉赫西; zh-hk:塔拉哈西;' }, { type = 'item', original = 'Topeka, Kansas', rule = 'zh-cn:托皮卡; zh-tw:托彼卡; zh-hk:托皮卡;' }, { type = 'item', original = 'Trenton, New Jersey', rule = 'zh-cn:特伦顿; zh-tw:翠登; zh-hk:特倫頓;' }, { type = 'text', text = [[ == 地名 == ]] }, -- 源代碼建議格式： -- 1. 英文原名original在前，地區轉換規則rule在後； -- 2. 依英文原名首字母分組，（字母表中）相鄰字母組間空一行\newline，不相鄰——即跳過個別字母——字母組間空兩行。 { type = 'text', text = [[ ===A=== ]] }, { type = 'item', original = 'Aberdeen', rule = 'zh-cn:阿伯丁; zh-tw:亞伯丁; zh-hk:鴨巴甸;' }, { type = 'item', original = 'Albany', rule = 'zh-cn:奥尔巴尼; zh-tw:阿伯尼; zh-hk:雅賓利;' }, { type = 'item', original = 'Algona', rule = 'zh-cn:阿尔戈纳; zh-tw:阿哥納;' }, { type = 'item', original = 'Alameda', rule = 'zh-hans:阿拉梅达; zh-hant:阿拉米達;' }, { type = 'item', original = 'Alpine', rule = 'zh-hans:阿尔派恩; zh-hant:阿爾卑斯;' }, { type = 'item', original = 'Anaheim', rule = 'zh-cn:阿纳海姆; zh-hk:安納海姆; zh-hant:安那翰;' }, { type = 'item', original = 'Antioch', rule = 'zh-hans:安条克; zh-hk:安條克; zh-tw:安提阿克;' }, { type = 'item', original = 'Atwater', rule = 'zh-hans:阿特沃特; zh-hant:艾特瓦特;' }, { type = 'text', text = [[ ===B=== ]] }, { type = 'item', original = 'Battle Creek', rule = 'zh-cn:巴特尔克里克; zh-tw:巴特溪; zh-hk:巴特爾克里克;' }, { type = 'item', original = 'Buffalo, New York', rule = 'zh-cn:布法罗; zh-tw:水牛城; zh-hk:水牛城;' }, { type = 'item', original = 'Bellevue', rule = 'zh-cn:贝尔维尤; zh-tw:柏衛;' }, { type = 'item', original = 'Bothell', rule = 'zh-cn:博瑟尔; zh-tw:巴薩爾;' }, { type = 'item', original = 'Bridgeport', rule = 'zh-cn:布里奇波特; zh-tw:橋港;' }, { type = 'item', original = 'Bridgeport', rule = 'zh-cn:班布里奇; zh-tw:班布里治;' }, { type = 'item', original = 'Berkeley', rule = 'zh-hans:伯克利; zh-hant:柏克萊;' }, { type = 'item', original = 'Blenheim', rule = 'zh-cn:布伦海姆;zh-tw:布倫亨;zh-hk:白蘭軒;' }, { type = 'item', original = 'Blenheim', rule = '布伦汉姆=>zh-cn:布伦海姆;布伦汉姆=>zh-my:布伦海姆;布伦汉姆=>zh-sg:布伦海姆;布伦汉姆=>zh-tw:布倫亨;布伦汉姆=>zh-hk:白蘭軒;布伦汉姆=>zh-mo:白蘭軒;' }, { type = 'item', original = 'Blenheim', rule = '布倫海姆=>zh-tw:布倫亨;布倫海姆=>zh-hk:白蘭軒;布倫海姆=>zh-mo:白蘭軒;' }, { type = 'text', text = [[ ===C=== ]] }, { type = 'item', original = 'Clallam', rule = 'zh-cn:克拉勒姆; zh-tw:克拉蘭;' }, { type = 'item', original = 'Camas', rule = 'zh-cn:卡默斯; zh-tw:卡馬斯;' }, { type = 'item', original = 'Carmel-by-the-Sea', rule = 'zh-hans:卡梅尔海; zh-hk:卡米爾海;' }, { type = 'item', original = 'Ceres', rule = 'zh-hans:锡里斯; zh-hant:席瑞絲;' }, { type = 'item', original = 'Champaign', rule = 'zh-cn:尚佩恩; zh-tw:香檳; zh-sg:香槟; zh-hk:香檳' }, { type = 'item', original = 'Coronado', rule = 'zh-cn:科罗纳多; zh-tw:科羅納多; zh-hk:嘉拿多;' }, { type = 'item', original = 'Corpus Christi', rule = 'zh-tw:聖體市; zh-cn:科珀斯克里斯蒂;' }, { type = 'text', text = [[ ===D=== ]] }, { type = 'item', original = 'Durham, North Carolina', rule = 'zh-cn:达勒姆; zh-tw:德罕; zh-hk:對衡' }, { type = 'text', text = [[ ===E=== ]] }, { type = 'item', original = 'Ephrata', rule = 'zh-cn:埃夫拉塔; zh-tw:艾夫拉塔;' }, { type = 'item', original = 'Enumclaw', rule = 'zh-cn:伊纳姆克洛; zh-tw:伊南克洛;' }, { type = 'text', text = [[ ===F=== ]] }, { type = 'item', original = 'Fargo, North Dakota', rule = 'zh-cn:法戈; zh-tw:法哥; zh-hk:法戈;' }, { type = 'item', original = 'Frederick', rule = 'zh-hans:弗雷德里克; zh-hant:弗雷德里克; zh-tw:菲德里克;' }, { type = 'item', original = 'Fresno', rule = 'zh-hans:弗雷斯诺; zh-hant:佛雷斯諾;' }, { type = 'text', text = [[ ===G=== ]] }, { type = 'item', original = 'Green Bay, Wisconsin', rule = 'zh:格林貝; zh-cn:格林贝; zh-tw:綠灣;' }, { type = 'text', text = [[ ===H=== ]] }, { type = 'item', original = 'Huston, Texas', rule = 'zh-cn:休斯敦;zh-tw:休士頓;zh-hk:侯斯頓;zh-sg:休斯顿;' }, { type = 'item', original = 'Huston, Texas', rule = '休斯頓=>zh-cn:休斯敦;休斯頓=>zh-tw:休士頓;休斯頓=>zh-hk:侯斯頓;休斯頓=>zh-mo:侯斯頓;' }, { type = 'item', original = 'Hercules', rule = 'zh-hans:赫拉克勒斯; zh-hant:海克力斯;' }, { type = 'text', text = [[ ===I=== ]] }, { type = 'text', text = [[ ===J=== ]] }, { type = 'item', original = 'Jackson', rule = 'zh-cn:杰克逊;zh-tw:傑克森;zh-hk:積遜;zh-sg:杰森;' }, { type = 'item', original = 'Jacksonville, Florida', rule = 'zh-cn:杰克逊维尔; zh-tw:傑克孫維; zh-hk:積遜威爾; zh-sg:杰森维尔;' }, { type = 'item', original = 'Jacksonville, Florida', rule = '傑克遜威爾=>zh-cn:杰克逊维尔; 傑克遜威爾=>zh-tw:傑克孫維; 傑克遜威爾=>zh-hk:積遜威爾; 傑克遜威爾=>zh-mo:積遜威爾;' }, { type = 'text', text = [[ ===K=== ]] }, { type = 'text', text = [[ ===L=== ]] }, { type = 'item', original = 'Lafayette', rule = 'zh-hans:拉斐特; zh-hant:拉法葉;' }, { type = 'item', rule = 'zh-hans:拉斯罗普; zh-hant:萊思羅普; ',original='Lathrop'}, { type = 'item', original = 'Lemon Grove', rule = 'zh-hans:莱蒙格罗韦; zh-hant:檸檬林;' }, { type = 'item', original = 'Live Oak', rule = 'zh-hans:利夫奥克; zh-hant:活橡;' }, { type = 'item', rule = 'zh-hans:洛迪; zh-hant:洛戴; ',original='Lodi'}, { type = 'text', text = [[ ===M=== ]] }, { type = 'item', original = 'Manhattan, New York', rule = 'zh-hans:曼哈顿;zh-hk:曼克頓;zh-tw:曼哈頓;' }, { type = 'item', original = 'Memphis, Tennessee', rule = 'zh-cn:孟菲斯; zh-tw:曼非斯; zh-hk:孟菲斯;' }, { type = 'item', original = 'Minneapolis, Minnesota', rule = 'zh-cn:明尼阿波利斯; zh-tw:明尼亞波利斯; zh-hk:明尼阿波利斯;' }, { type = 'item', rule = 'zh-hans:曼特卡; zh-hant:曼提加; ', original='Manteca' }, { type = 'item', original = 'Martinez', rule = 'zh-hans:马丁内斯; zh-hant:馬丁尼茲;' }, { type = 'item', original = 'Menlo Park', rule = 'zh-hans:门洛帕克; zh-hant:門洛公園;' }, { type = 'item', original = 'Merced', rule = 'zh-hans:默塞德; zh-hant:美熹德;' }, { type = 'item', original = 'Monterey', rule = 'zh-hans:蒙特雷; zh-hk:蒙特雷; zh-tw:蒙特瑞;' }, { type = 'text', text = [[ ===N=== ]] }, { type = 'item', original = 'Nassau', rule = 'zh-cn:拿骚;zh-tw:拿索;zh-hk:蘭秀;' }, { type = 'item', original = 'Nassau', rule = '拿騷=>zh-tw:拿索;拿騷=>zh-hk:蘭秀;拿騷=>zh-mo:蘭秀;' }, { type = 'item', original = 'Nassau', rule = '拿紹=>zh-cn:拿骚;拿紹=>zh-my:拿骚;拿紹=>zh-sg:拿骚;拿紹=>zh-tw:拿索;拿紹=>zh-hk:蘭秀;拿紹=>zh-mo:蘭秀;' }, { type = 'item', original = 'Nassau', rule = '拿绍=>zh-cn:拿骚;拿绍=>zh-my:拿骚;拿绍=>zh-sg:拿骚;拿绍=>zh-tw:拿索;拿绍=>zh-hk:蘭秀;拿绍=>zh-mo:蘭秀;' }, { type = 'item', original = 'Newark, New Jersey', rule = 'zh-cn:纽瓦克; zh-hant:紐華克; zh-hk:紐瓦克;' }, { type = 'item', original = 'New Castle', rule = 'zh-hans:纽卡斯尔; zh-hk:紐卡素; zh-tw:新堡; zh-hant:紐卡斯爾;' }, { type = 'item', original = 'New Orleans', rule = 'zh-hans:新奥尔良; zh-sg:新奥尔良; zh-hant:紐奧良;' }, { type = 'text', text = [[ ===O=== ]] }, { type = 'item', original = 'Oakland', rule = 'zh-hans:奥克兰;zh-hant:奧克蘭;zh-hk:屋崙;' }, { type = 'item', original = 'Obispo', rule = 'zh-hans:奥比斯波;zh-hant:奧比斯保;' }, { type = 'text', text = [[ ===P=== ]] }, { type = 'text', text = [[ ===Q=== ]] }, { type = 'text', text = [[ ===R=== ]] }, { type = 'item', original = 'Rancho Cordova', rule = 'zh-hans:兰乔科尔多瓦; zh-hant:科多瓦牧場;' }, { type = 'item', original = 'Redwood City', rule = 'zh-hans:雷德伍德城; zh-hant:紅木城;' }, { type = 'text', text = [[ ===S=== ]] }, { type = 'item', original = 'Saint Louis', rule = 'zh-hans:圣路易; zh-hant:聖路易斯;' }, { type = 'item', original = 'Sacramento', rule = 'zh-hans:萨克拉门托; zh-hant:沙加緬度;' }, { type = 'item', original = 'San Bernardino', rule = 'zh-hans:圣贝纳迪诺; zh-hk:聖班納甸奴; zh-hant:聖伯納迪諾;' }, { type = 'item', original = 'San Diego', rule = 'zh-hans:圣迭戈; zh-hant:聖地牙哥; zh-hk:聖地亞哥; zh-mo:聖地亞哥;' }, { type = 'item', original = 'San Diego', rule = 'zh-hans:圣地亚哥; zh-hant:聖地牙哥; zh-hk:聖地亞哥; zh-mo:聖地亞哥;' }, { type = 'item', original = 'San José', rule = 'zh-hans:圣何塞; zh-hant:聖荷西;' }, { type = 'item', original = 'San Mateo', rule = 'zh-hans:圣马特奥; zh-hant:聖馬刁;' }, { type = 'item', original = 'San Pablo', rule = 'zh-hans:圣巴勃罗; zh-hant:聖帕布羅;' }, { type = 'item', original = 'Santa Barbara', rule = 'zh-hans:圣巴巴拉; zh-hant:聖塔芭芭拉;' }, { type = 'item', original = 'Santa Clara', rule = 'zh-hans:圣克拉拉; zh-hant:聖塔克拉拉;' }, { type = 'item', original = 'Santa Cruz', rule = 'zh-hans:圣克鲁兹; zh-hant:聖塔克魯茲;' }, { type = 'item', original = 'Santa Fe', rule = 'zh-hans:圣菲; zh-hant:聖塔菲;' }, { type = 'item', original = 'Santa Rosa', rule = 'zh-hans:圣罗莎; zh-hant:聖塔羅莎;' }, { type = 'item', original = 'Scotts Valley', rule = 'zh-hans:斯科茨谷; zh-hk:史葛斯谷; zh-hant:史考茲谷;' }, { type = 'item', original = 'Shepherd', rule = 'zh-hans:谢泼德; zh-tw:雪柏; zh-hant:謝潑德;' }, { type = 'item', original = 'Springfield', rule = 'zh-hans:斯普林菲尔德; zh-tw:春田; zh-hant:斯普林菲爾德;' }, { type = 'item', original = 'Stirling', rule = 'zh-cn:斯特灵;zh-hk:士他令;zh-tw:史特靈;' }, { type = 'item', original = 'Stirling', rule = '斯特靈=>zh-hk:士他令;斯特靈=>zh-mo:士他令;斯特靈=>zh-tw:史特靈;' }, { type = 'item', original = 'Stirling', rule = '士打令=>zh-cn:斯特灵;士打令=>zh-my:斯特灵;士打令=>zh-sg:斯特灵;士打令=>zh-tw:史特靈;' }, { type = 'item', original = 'Stirling', rule = '史特灵=>zh-cn:斯特灵;史特灵=>zh-my:斯特灵;史特灵=>zh-sg:斯特灵;史特灵=>zh-hk:士他令;史特灵=>zh-mo:士他令;' }, { type = 'item', original = 'Stirling', rule = '斯德零=>zh-cn:斯特灵;斯德零=>zh-my:斯特灵;斯德零=>zh-sg:斯特灵;斯德零=>zh-hk:士他令;斯德零=>zh-mo:士他令;斯德零=>zh-tw:史特靈;' }, { type = 'item', original = 'Stirling', rule = '斯特陵=>zh-cn:斯特灵;斯特陵=>zh-my:斯特灵;斯特陵=>zh-sg:斯特灵;斯特陵=>zh-hk:士他令;斯特陵=>zh-mo:士他令;斯特陵=>zh-tw:史特靈;' }, { type = 'item', original = 'Stirling', rule = '斯特凌=>zh-cn:斯特灵;斯特凌=>zh-my:斯特灵;斯特凌=>zh-sg:斯特灵;斯特凌=>zh-hk:士他令;斯特凌=>zh-mo:士他令;斯特凌=>zh-tw:史特靈;' }, { type = 'item', original = 'Stirling', rule = '斯特林=>zh-cn:斯特灵;斯特林=>zh-my:斯特灵;斯特林=>zh-sg:斯特灵;斯特林=>zh-hk:士他令;斯特林=>zh-mo:士他令;斯特林=>zh-tw:史特靈;' }, { type = 'item', original = 'Stirling', rule = '史特林=>zh-cn:斯特灵;史特林=>zh-my:斯特灵;史特林=>zh-sg:斯特灵;史特林=>zh-hk:士他令;史特林=>zh-mo:士他令;史特林=>zh-tw:史特靈;' }, { type = 'item', original = 'Stockton', rule = 'zh-hans:斯托克顿; zh-hk:士德頓; zh-hant:史塔克頓;' }, { type = 'item', original = 'Stanford', rule = 'zh-hans:斯坦福; zh-hant:史丹福;' }, { type = 'text', text = [[ ===T=== ]] }, { type = 'item', original = 'Teton', rule = 'zh-cn:蒂顿; zh-tw:提頓; ' }, { type = 'item', original = 'Thousand Oaks', rule = 'zh-hans:绍曾德奥克斯; zh-hant:千橡;' }, { type = 'item', original = 'Tracy', rule = 'zh-hans:特雷西; zh-hk:翠絲; zh-hant:雀西;' }, { type = 'item', original = 'Tulsa, Oklahoma', rule = 'zh-hans:塔尔萨; zh-hk:塔爾薩; zh-tw:土爾沙;' }, -- 美國國務院平臺通譯“塔爾薩”，臺灣單譯“土爾沙”，原文發音/ˈtʌlsə/。 { type = 'text', text = [[ ===U=== ]] }, { type = 'text', text = [[ ===V=== ]] }, { type = 'text', text = [[ ===W=== ]] }, { type = 'item', original = 'Wakefield', rule = 'zh-hk:域菲路;zh-tw:韋克菲爾德;zh-cn:韦克菲尔德;'}, { type = 'item', original = 'Wilmington', rule = 'zh-cn:威尔明顿; zh-tw:威明頓; zh-hant:威爾明頓;' }, { type = 'item', original = 'Winston-Salem, North Carolina', rule = 'zh-cn:温斯顿-塞勒姆; zh-tw:溫斯頓-撒冷; zh-hk:溫斯頓-塞勒姆;' }, { type = 'item', original = 'Woodland', rule = 'zh-hans:伍德兰; zh-hant:森林地;' }, { type = 'item', original = 'Watsonville', rule = 'zh-hans:沃森维尔; zh-hant:華生維爾;' }, { type = 'text', text = [[ ===X=== ]] }, { type = 'text', text = [[ ===Y=== ]] }, { type = 'item', original = 'Yosemite', rule = 'zh-hans:约塞米蒂; zh-hant:優勝美地;' }, { type = 'text', text = [[ ===Z=== ]] }, { type = 'text', text = [[ == 相關字詞 == ]] }, { type = 'item', original = 'county', rule = 'zh-cn:县; zh-tw:郡; zh-hk:縣;' }, { type = 'item', original = 'counties', rule = 'zh-cn:郡县; zh-tw:郡縣; zh-hk:郡縣;' }, { type = 'item', original = 'Thirteen Colonies', rule = 'zh-hant:十三殖民地; zh-hans:十三个殖民地;' }, { type = 'item', original = 'Federal Information Processing Standards', rule = 'zh-tw:聯邦資料處理標準; zh-cn:联邦信息处理标准;' }, { type = 'text', text = [[ ]] }, }, }
</text>
<sha1>2g6hq0cu3n5kkkl6b4lfx4e9xd3zpm8</sha1>
</revision>
</page>
<page>
<title>Module:CGroup/core</title>
<ns>828</ns>
<id>7421135</id>
<revision>
<id>64936222</id>
<parentid>64904843</parentid>
<timestamp>2021-03-27T00:05:11Z</timestamp>
<contributor>
<username>Xiplus-abot</username>
<id>2737953</id>
</contributor>
<minor/>
<comment>
已更改“[[Module:CGroup/core]]”的保护等级：高風險模板：12541引用<!-- [[User:Xiplus-abot/task/3|機器人3]] -->（[编辑=仅允许模板编辑员和管理员]（无限期）[移动=仅允许模板编辑员和管理员]（无限期））
</comment>
<model>Scribunto</model>
<format>text/plain</format>
<text bytes="280" xml:space="preserve">
local p = {} function p.Item(o, r) -- See [[Wikipedia:字詞轉換處理/公共轉換組]] -- o: 原文。若無此屬性，應使用nil而非空字串（''）。 -- r: 用於全文轉換的規則，必填。 return { type = 'item', original = o, rule = r }; end return p
</text>
<sha1>qxady00rpzy7pb9lmslf6pl7i4xz1nn</sha1>
</revision>
</page>
<page>
<title>Module:Citation/CS1</title>
<ns>828</ns>
<id>5253820</id>
<revision>
<id>64216429</id>
<parentid>63958697</parentid>
<timestamp>2021-02-10T08:35:59Z</timestamp>
<contributor>
<username>Tigerzeng</username>
<id>1586693</id>
</contributor>
<comment>[[Module_talk:Citation/CS1#关于PMC及PMID值]]</comment>
<model>Scribunto</model>
<format>text/plain</format>
<text bytes="188173" xml:space="preserve">
local z = { error_categories = {}; -- for categorizing citations that contain errors error_ids = {}; message_tail = {}; maintenance_cats = {}; -- for categorizing citations that aren't erroneous per se, but could use a little work properties_cats = {}; -- for categorizing citations based on certain properties, language of source for instance } --[[--------------------------< F O R W A R D D E C L A R A T I O N S >-------------------------------------- ]] local dates, year_date_check -- functions in Module:Citation/CS1/Date_validation local cfg = {}; -- table of configuration tables that are defined in Module:Citation/CS1/Configuration local whitelist = {}; -- table of tables listing valid template parameter names; defined in Module:Citation/CS1/Whitelist --[[--------------------------< I S _ S E T >------------------------------------------------------------------ Returns true if argument is set; false otherwise. Argument is 'set' when it exists (not nil) or when it is not an empty string. This function is global because it is called from both this module and from Date validation ]] function is_set( var ) return not (var == nil or var == ''); end --[[--------------------------< F I R S T _ S E T >------------------------------------------------------------ Locates and returns the first set value in a table of values where the order established in the table, left-to-right (or top-to-bottom), is the order in which the values are evaluated. Returns nil if none are set. This version replaces the original 'for _, val in pairs do' and a similar version that used ipairs. With the pairs version the order of evaluation could not be guaranteed. With the ipairs version, a nil value would terminate the for-loop before it reached the actual end of the list. ]] local function first_set (list, count) local i = 1; while i <= count do -- loop through all items in list if is_set( list[i] ) then return list[i]; -- return the first set list member end i = i + 1; -- point to next end end --[[--------------------------< I N _ A R R A Y >-------------------------------------------------------------- Whether needle is in haystack ]] local function in_array( needle, haystack ) if needle == nil then return false; end for n,v in ipairs( haystack ) do if v == needle then return n; end end return false; end --[[--------------------------< S U B S T I T U T E >---------------------------------------------------------- Populates numbered arguments in a message string using an argument table. ]] local function substitute( msg, args ) return args and mw.message.newRawMessage( msg, args ):plain() or msg; end --[[--------------------------< E R R O R _ C O M M E N T >---------------------------------------------------- Wraps error messages with css markup according to the state of hidden. ]] local function error_comment( content, hidden ) return substitute( hidden and cfg.presentation['hidden-error'] or cfg.presentation['visible-error'], content ); end --[[--------------------------< S E T _ E R R O R >-------------------------------------------------------------- Sets an error condition and returns the appropriate error message. The actual placement of the error message in the output is the responsibility of the calling function. ]] local function set_error( error_id, arguments, raw, prefix, suffix ) local error_state = cfg.error_conditions[ error_id ]; prefix = prefix or ""; suffix = suffix or ""; if error_state == nil then error( cfg.messages['undefined_error'] ); elseif is_set( error_state.category ) then table.insert( z.error_categories, error_state.category ); end local message = substitute( error_state.message, arguments ); message = message .. " ([[" .. cfg.messages['help page link'] .. "#" .. error_state.anchor .. "|" .. cfg.messages['help page label'] .. "]])"; z.error_ids[ error_id ] = true; if in_array( error_id, { 'bare_url_missing_title', 'trans_missing_title' } ) and z.error_ids['citation_missing_title'] then return '', false; end message = table.concat({ prefix, message, suffix }); if raw == true then return message, error_state.hidden; end return error_comment( message, error_state.hidden ); end --[[--------------------------< A D D _ M A I N T _ C A T >------------------------------------------------------ Adds a category to z.maintenance_cats using names from the configuration file with additional text if any. To prevent duplication, the added_maint_cats table lists the categories by key that have been added to z.maintenance_cats. ]] local added_maint_cats = {} -- list of maintenance categories that have been added to z.maintenance_cats local function add_maint_cat (key, arguments) if not added_maint_cats [key] then added_maint_cats [key] = true; -- note that we've added this category table.insert( z.maintenance_cats, substitute (cfg.maint_cats [key], arguments)); -- make name then add to table end end --[[--------------------------< A D D _ P R O P _ C A T >-------------------------------------------------------- Adds a category to z.properties_cats using names from the configuration file with additional text if any. ]] local added_prop_cats = {} -- list of property categories that have been added to z.properties_cats local function add_prop_cat (key, arguments) if not added_prop_cats [key] then added_prop_cats [key] = true; -- note that we've added this category table.insert( z.properties_cats, substitute (cfg.prop_cats [key], arguments)); -- make name then add to table end end --[[--------------------------< A D D _ V A N C _ E R R O R >---------------------------------------------------- Adds a single Vancouver system error message to the template's output regardless of how many error actually exist. To prevent duplication, added_vanc_errs is nil until an error message is emitted. ]] local added_vanc_errs; -- flag so we only emit one Vancouver error / category local function add_vanc_error () if not added_vanc_errs then added_vanc_errs = true; -- note that we've added this category table.insert( z.message_tail, { set_error( 'vancouver', {}, true ) } ); end end --[[--------------------------< I S _ S C H E M E >------------------------------------------------------------ does this thing that purports to be a uri scheme seem to be a valid scheme? The scheme is checked to see if it is in agreement with http://tools.ietf.org/html/std66#section-3.1 which says: Scheme names consist of a sequence of characters beginning with a letter and followed by any combination of letters, digits, plus ("+"), period ("."), or hyphen ("-"). returns true if it does, else false ]] local function is_scheme (scheme) return scheme and scheme:match ('^%a[%a%d%+%.%-]*:'); -- true if scheme is set and matches the pattern end --[=[-------------------------< I S _ D O M A I N _ N A M E >-------------------------------------------------- Does this thing that purports to be a domain name seem to be a valid domain name? Syntax defined here: http://tools.ietf.org/html/rfc1034#section-3.5 BNF defined here: https://tools.ietf.org/html/rfc4234 Single character names are generally reserved; see https://tools.ietf.org/html/draft-ietf-dnsind-iana-dns-01#page-15; see also [[Single-letter second-level domain]] list of tlds: https://www.iana.org/domains/root/db rfc952 (modified by rfc 1123) requires the first and last character of a hostname to be a letter or a digit. Between the first and last characters the name may use letters, digits, and the hyphen. Also allowed are IPv4 addresses. IPv6 not supported domain is expected to be stripped of any path so that the last character in the last character of the tld. tld is two or more alpha characters. Any preceding '//' (from splitting a url with a scheme) will be stripped here. Perhaps not necessary but retained incase it is necessary for IPv4 dot decimal. There are several tests: the first character of the whole domain name including subdomains must be a letter or a digit single-letter/digit second-level domains in the .org TLD q, x, and z SL domains in the .com TLD i and q SL domains in the .net TLD single-letter SL domains in the ccTLDs (where the ccTLD is two letters) two-character SL domains in gTLDs (where the gTLD is two or more letters) three-plus-character SL domains in gTLDs (where the gTLD is two or more letters) IPv4 dot-decimal address format; TLD not allowed returns true if domain appears to be a proper name and tld or IPv4 address, else false ]=] local function is_domain_name (domain) if not domain then return false; -- if not set, abandon end domain = domain:gsub ('^//', ''); -- strip '//' from domain name if present; done here so we only have to do it once if not domain:match ('^[%a%d]') then -- first character must be letter or digit return false; end if domain:match ('%f[%a%d][%a%d]%.org$') then -- one character .org hostname return true; elseif domain:match ('%f[%a][qxz]%.com$') then -- assigned one character .com hostname (x.com times out 2015-12-10) return true; elseif domain:match ('%f[%a][iq]%.net$') then -- assigned one character .net hostname (q.net registered but not active 2015-12-10) return true; elseif domain:match ('%f[%a%d][%a%d][%a%d%-]+[%a%d]%.xn%-%-[%a%d]+$') then -- internationalized domain name with ACE prefix return true; elseif domain:match ('%f[%a%d][%a%d]%.cash$') then -- one character/digit .cash hostname return true; elseif domain:match ('%f[%a%d][%a%d]%.%a%a$') then -- one character hostname and cctld (2 chars) return true; elseif domain:match ('%f[%a%d][%a%d][%a%d]%.%a%a+$') then -- two character hostname and tld return true; elseif domain:match ('%f[%a%d][%a%d][%a%d%-]+[%a%d]%.%a%a+$') then -- three or more character hostname.hostname or hostname.tld return true; elseif domain:match ('^%d%d?%d?%.%d%d?%d?%.%d%d?%d?%.%d%d?%d?') then -- IPv4 address return true; else return false; end end --[[--------------------------< I S _ U R L >------------------------------------------------------------------ returns true if the scheme and domain parts of a url appear to be a valid url; else false. This function is the last step in the validation process. This function is separate because there are cases that are not covered by split_url(), for example is_parameter_ext_wikilink() which is looking for bracketted external wikilinks. ]] local function is_url (scheme, domain) if is_set (scheme) then -- if scheme is set check it and domain return is_scheme (scheme) and is_domain_name (domain); else return is_domain_name (domain); -- scheme not set when url is protocol relative end end --[[--------------------------< S P L I T _ U R L >------------------------------------------------------------ Split a url into a scheme, authority indicator, and domain. If protocol relative url, return nil scheme and domain else return nil for both scheme and domain. When not protocol relative, get scheme, authority indicator, and domain. If there is an authority indicator (one or more '/' characters following the scheme's colon), make sure that there are only 2. ]] local function split_url (url_str) local scheme, authority, domain; url_str = url_str:gsub ('([%a%d])%.?[/%?#].*$', '%1'); -- strip FQDN terminator and path(/), query(?), fragment (#) (the capture prevents false replacement of '//') if url_str:match ('^//%S*') then -- if there is what appears to be a protocol relative url domain = url_str:match ('^//(%S*)') elseif url_str:match ('%S-:/*%S+') then -- if there is what appears to be a scheme, optional authority indicator, and domain name scheme, authority, domain = url_str:match ('(%S-:)(/*)(%S+)'); -- extract the scheme, authority indicator, and domain portions authority = authority:gsub ('//', '', 1); -- replace place 1 pair of '/' with nothing; if is_set(authority) then -- if anything left (1 or 3+ '/' where authority should be) then return scheme; -- return scheme only making domain nil which will cause an error message end domain = domain:gsub ('(%a):%d+', '%1'); -- strip port number if present end return scheme, domain; end --[[--------------------------< L I N K _ P A R A M _ O K >--------------------------------------------------- checks the content of |title-link=, |series-link=, |author-link= etc for properly formatted content: no wikilinks, no urls Link parameters are to hold the title of a wikipedia article so none of the WP:TITLESPECIALCHARACTERS are allowed: # < > [ ] | { } _ except the underscore which is used as a space in wiki urls and # which is used for section links returns false when the value contains any of these characters. When there are no illegal characters, this function returns TRUE if value DOES NOT appear to be a valid url (the |<param>-link= parameter is ok); else false when value appears to be a valid url (the |<param>-link= parameter is NOT ok). ]] local function link_param_ok (value) local scheme, domain; if value:find ('[<>%[%]|{}]') then -- if any prohibited characters return false; end scheme, domain = split_url (value); -- get scheme or nil and domain or nil from url; return not is_url (scheme, domain); -- return true if value DOES NOT appear to be a valid url end --[[--------------------------< C H E C K _ U R L >------------------------------------------------------------ Determines whether a URL string appears to be valid. First we test for space characters. If any are found, return false. Then split the url into scheme and domain portions, or for protocol relative (//example.com) urls, just the domain. Use is_url() to validate the two portions of the url. If both are valid, or for protocol relative if domain is valid, return true, else false. ]] local function check_url( url_str ) if nil == url_str:match ("^%S+$") then -- if there are any spaces in |url=value it can't be a proper url return false; end local scheme, domain; scheme, domain = split_url (url_str); -- get scheme or nil and domain or nil from url; return is_url (scheme, domain); -- return true if value appears to be a valid url end --[=[-------------------------< I S _ P A R A M E T E R _ E X T _ W I K I L I N K >---------------------------- Return true if a parameter value has a string that begins and ends with square brackets [ and ] and the first non-space characters following the opening bracket appear to be a url. The test will also find external wikilinks that use protocol relative urls. Also finds bare urls. The frontier pattern prevents a match on interwiki links which are similar to scheme:path urls. The tests that find bracketed urls are required because the parameters that call this test (currently |title=, |chapter=, |work=, and |publisher=) may have wikilinks and there are articles or redirects like '//Hus' so, while uncommon, |title=[[//Hus]] is possible as might be [[en://Hus]]. ]=] local function is_parameter_ext_wikilink (value) local scheme, domain; value = value:gsub ('([^%s/])/[%a%d].*', '%1'); -- strip path information (the capture prevents false replacement of '//') if value:match ('%f[%[]%[%a%S*:%S+.*%]') then -- if ext wikilink with scheme and domain: [xxxx://yyyyy.zzz] scheme, domain = value:match ('%f[%[]%[(%a%S*:)(%S+).*%]') elseif value:match ('%f[%[]%[//%S*%.%S+.*%]') then -- if protocol relative ext wikilink: [//yyyyy.zzz] domain = value:match ('%f[%[]%[//(%S*%.%S+).*%]'); elseif value:match ('%a%S*:%S+') then -- if bare url with scheme; may have leading or trailing plain text scheme, domain = value:match ('(%a%S*:)(%S+)'); elseif value:match ('//%S*%.%S+') then -- if protocol relative bare url: //yyyyy.zzz; may have leading or trailing plain text domain = value:match ('//(%S*%.%S+)'); -- what is left should be the domain else return false; -- didn't find anything that is obviously a url end return is_url (scheme, domain); -- return true if value appears to be a valid url end --[[-------------------------< C H E C K _ F O R _ U R L >----------------------------------------------------- loop through a list of parameters and their values. Look at the value and if it has an external link, emit an error message. ]] local function check_for_url (parameter_list) local error_message = ''; for k, v in pairs (parameter_list) do -- for each parameter in the list if is_parameter_ext_wikilink (v) then -- look at the value; if there is a url add an error message if is_set(error_message) then -- once we've added the first portion of the error message ... error_message=error_message .. ", "; -- ... add a comma space separator end error_message=error_message .. "&#124;" .. k .. "="; -- add the failed parameter end end if is_set (error_message) then -- done looping, if there is an error message, display it table.insert( z.message_tail, { set_error( 'param_has_ext_link', {error_message}, true ) } ); end end --[[--------------------------< S A F E _ F O R _ I T A L I C S >---------------------------------------------- Protects a string that will be wrapped in wiki italic markup '' ... '' Note: We cannot use <i> for italics, as the expected behavior for italics specified by ''...'' in the title is that they will be inverted (i.e. unitalicized) in the resulting references. In addition, <i> and '' tend to interact poorly under Mediawiki's HTML tidy. ]] local function safe_for_italics( str ) if not is_set(str) then return str; else if str:sub(1,1) == "'" then str = "<span></span>" .. str; end if str:sub(-1,-1) == "'" then str = str .. "<span></span>"; end -- Remove newlines as they break italics. return str:gsub( '\n', ' ' ); end end --[[--------------------------< S A F E _ F O R _ U R L >------------------------------------------------------ Escape sequences for content that will be used for URL descriptions ]] local function safe_for_url( str ) if str:match( "%[%[.-%]%]" ) ~= nil then table.insert( z.message_tail, { set_error( 'wikilink_in_url', {}, true ) } ); end return str:gsub( '[%[%]\n]', { ['['] = '&#91;', [']'] = '&#93;', ['\n'] = ' ' } ); end --[[--------------------------< W R A P _ S T Y L E >---------------------------------------------------------- Applies styling to various parameters. Supplied string is wrapped using a message_list configuration taking one argument; protects italic styled parameters. Additional text taken from citation_config.presentation - the reason this function is similar to but separate from wrap_msg(). ]] local function wrap_style (key, str) if not is_set( str ) then return ""; elseif in_array( key, { 'italic-title', 'trans-italic-title' } ) then str = safe_for_italics( str ); end return substitute( cfg.presentation[key], {str} ); end --[[--------------------------< E X T E R N A L _ L I N K >---------------------------------------------------- Format an external link with error checking ]] local function external_link( URL, label, source ) local error_str = ""; if not is_set( label ) then label = URL; if is_set( source ) then error_str = set_error( 'bare_url_missing_title', { wrap_style ('parameter', source) }, false, " " ); else error( cfg.messages["bare_url_no_origin"] ); end end if not check_url( URL ) then error_str = set_error( 'bad_url', {wrap_style ('parameter', source)}, false, " " ) .. error_str; end return table.concat({ "[", URL, " ", safe_for_url( label ), "]", error_str }); end --[[--------------------------< E X T E R N A L _ L I N K _ I D >---------------------------------------------- Formats a wiki style external link ]] local function external_link_id(options) local url_string = options.id; if options.encode == true or options.encode == nil then url_string = mw.uri.encode( url_string ); end return mw.ustring.format( '[%s%s%s \<span title\=\"%s\"\>%s%s%s\<\/span\>]', options.prefix, url_string, options.suffix or "", options.link, options.label, options.separator or "&nbsp;", mw.text.nowiki(options.id) ); end --[[--------------------------< D E P R E C A T E D _ P A R A M E T E R >-------------------------------------- Categorize and emit an error message when the citation contains one or more deprecated parameters. The function includes the offending parameter name to the error message. Only one error message is emitted regardless of the number of deprecated parameters in the citation. ]] local page_in_deprecated_cat; -- sticky flag so that the category is added only once local function deprecated_parameter(name) if not page_in_deprecated_cat then page_in_deprecated_cat = true; -- note that we've added this category table.insert( z.message_tail, { set_error( 'deprecated_params', {name}, true ) } ); -- add error message end end --[[--------------------------< K E R N _ Q U O T E S >-------------------------------------------------------- Apply kerning to open the space between the quote mark provided by the Module and a leading or trailing quote mark contained in a |title= or |chapter= parameter's value. This function will positive kern either single or double quotes: "'Unkerned title with leading and trailing single quote marks'" " 'Kerned title with leading and trailing single quote marks' " (in real life the kerning isn't as wide as this example) Double single quotes (italic or bold wikimarkup) are not kerned. Call this function for chapter titles, for website titles, etc; not for book titles. ]] local function kern_quotes (str) local cap=''; local cap2=''; cap, cap2 = str:match ("^([\"\'])([^\'].+)"); -- match leading double or single quote but not double single quotes if is_set (cap) then str = substitute (cfg.presentation['kern-left'], {cap, cap2}); end cap, cap2 = str:match ("^(.+[^\'])([\"\'])$") if is_set (cap) then str = substitute (cfg.presentation['kern-right'], {cap, cap2}); end return str; end --[[--------------------------< F O R M A T _ S C R I P T _ V A L U E >---------------------------------------- |script-title= holds title parameters that are not written in Latin based scripts: Chinese, Japanese, Arabic, Hebrew, etc. These scripts should not be italicized and may be written right-to-left. The value supplied by |script-title= is concatenated onto Title after Title has been wrapped in italic markup. Regardless of language, all values provided by |script-title= are wrapped in <bdi>...</bdi> tags to isolate rtl languages from the English left to right. |script-title= provides a unique feature. The value in |script-title= may be prefixed with a two-character ISO639-1 language code and a colon: |script-title=ja:*** *** (where * represents a Japanese character) Spaces between the two-character code and the colon and the colon and the first script character are allowed: |script-title=ja : *** *** |script-title=ja: *** *** |script-title=ja :*** *** Spaces preceding the prefix are allowed: |script-title = ja:*** *** The prefix is checked for validity. If it is a valid ISO639-1 language code, the lang attribute (lang="ja") is added to the <bdi> tag so that browsers can know the language the tag contains. This may help the browser render the script more correctly. If the prefix is invalid, the lang attribute is not added. At this time there is no error message for this condition. Supports |script-title= and |script-chapter= TODO: error messages when prefix is invalid ISO639-1 code; when script_value has prefix but no script; ]] local function format_script_value (script_value) local lang=''; -- initialize to empty string local name; if script_value:match('^%l%l%s*:') then -- if first 3 non-space characters are script language prefix lang = script_value:match('^(%l%l)%s*:%s*%S.*'); -- get the language prefix or nil if there is no script if not is_set (lang) then return ''; -- script_value was just the prefix so return empty string end -- if we get this far we have prefix and script name = mw.language.fetchLanguageName( lang, mw.getContentLanguage():getCode() ); -- get language name so that we can use it to categorize if is_set (name) then -- is prefix a proper ISO 639-1 language code? script_value = script_value:gsub ('^%l%l%s*:%s*', ''); -- strip prefix from script -- is prefix one of these language codes? if in_array (lang, {'ar', 'bg', 'bs', 'dv', 'el', 'fa', 'he', 'hy', 'ja', 'ka', 'ko', 'ku', 'mk', 'ps', 'ru', 'sd', 'sr', 'th', 'uk', 'ug', 'yi', 'zh'}) then add_prop_cat ('script_with_name', {name, lang}) else add_prop_cat ('script') end lang = ' lang="' .. lang .. '" '; -- convert prefix into a lang attribute else lang = ''; -- invalid so set lang to empty string end end if is_set(script_value) then script_value = '-{R|' .. script_value .. '}-'; end script_value = substitute (cfg.presentation['bdi'], {lang, script_value}); -- isolate in case script is rtl return script_value; end --[[--------------------------< S C R I P T _ C O N C A T E N A T E >------------------------------------------ Initially for |title= and |script-title=, this function concatenates those two parameter values after the script value has been wrapped in <bdi> tags. ]] local function script_concatenate (title, script) if is_set(title) then title = '-{' .. title .. '}-'; end if is_set (script) then script = format_script_value (script); -- <bdi> tags, lang atribute, categorization, etc; returns empty string on error if is_set (script) then title = title .. ' ' .. script; -- concatenate title and script title end end return title; end --[[--------------------------< W R A P _ M S G >-------------------------------------------------------------- Applies additional message text to various parameter values. Supplied string is wrapped using a message_list configuration taking one argument. Supports lower case text for {{citation}} templates. Additional text taken from citation_config.messages - the reason this function is similar to but separate from wrap_style(). ]] local function wrap_msg (key, str, lower) if not is_set( str ) then return ""; end if true == lower then local msg; msg = cfg.messages[key]:lower(); -- set the message to lower case before return substitute( msg, str ); -- including template text else return substitute( cfg.messages[key], str ); end end --[[-------------------------< I S _ A L I A S _ U S E D >----------------------------------------------------- This function is used by select_one() to determine if one of a list of alias parameters is in the argument list provided by the template. Input: args – pointer to the arguments table from calling template alias – one of the list of possible aliases in the aliases lists from Module:Citation/CS1/Configuration index – for enumerated parameters, identifies which one enumerated – true/false flag used choose how enumerated aliases are examined value – value associated with an alias that has previously been selected; nil if not yet selected selected – the alias that has previously been selected; nil if not yet selected error_list – list of aliases that are duplicates of the alias already selected Returns: value – value associated with alias we selected or that was previously selected or nil if an alias not yet selected selected – the alias we selected or the alias that was previously selected or nil if an alias not yet selected ]] local function is_alias_used (args, alias, index, enumerated, value, selected, error_list) if enumerated then -- is this a test for an enumerated parameters? alias = alias:gsub ('#', index); -- replace '#' with the value in index else alias = alias:gsub ('#', ''); -- remove '#' if it exists end if is_set(args[alias]) then -- alias is in the template's argument list if value ~= nil and selected ~= alias then -- if we have already selected one of the aliases local skip; for _, v in ipairs(error_list) do -- spin through the error list to see if we've added this alias if v == alias then skip = true; break; -- has been added so stop looking end end if not skip then -- has not been added so table.insert( error_list, alias ); -- add error alias to the error list end else value = args[alias]; -- not yet selected an alias, so select this one selected = alias; end end return value, selected; -- return newly selected alias, or previously selected alias end --[[--------------------------< S E L E C T _ O N E >---------------------------------------------------------- Chooses one matching parameter from a list of parameters to consider. The list of parameters to consider is just names. For parameters that may be enumerated, the position of the numerator in the parameter name is identified by the '#' so |author-last1= and |author1-last= are represented as 'author-last#' and 'author#-last'. Because enumerated parameter |<param>1= is an alias of |<param>= we must test for both possibilities. Generates an error if more than one match is present. ]] local function select_one( args, aliases_list, error_condition, index ) local value = nil; -- the value assigned to the selected parameter local selected = ''; -- the name of the parameter we have chosen local error_list = {}; if index ~= nil then index = tostring(index); end for _, alias in ipairs( aliases_list ) do -- for each alias in the aliases list if alias:match ('#') then -- if this alias can be enumerated if '1' == index then -- when index is 1 test for enumerated and non-enumerated aliases value, selected = is_alias_used (args, alias, index, false, value, selected, error_list); -- first test for non-enumerated alias end value, selected = is_alias_used (args, alias, index, true, value, selected, error_list); -- test for enumerated alias else value, selected = is_alias_used (args, alias, index, false, value, selected, error_list); --test for non-enumerated alias end end if #error_list > 0 and 'none' ~= error_condition then -- for cases where this code is used outside of extract_names() local error_str = ""; for _, k in ipairs( error_list ) do if error_str ~= "" then error_str = error_str .. cfg.messages['parameter-separator'] end error_str = error_str .. wrap_style ('parameter', k); end if #error_list > 1 then error_str = error_str .. cfg.messages['parameter-final-separator']; else error_str = error_str .. cfg.messages['parameter-pair-separator']; end error_str = error_str .. wrap_style ('parameter', selected); table.insert( z.message_tail, { set_error( error_condition, {error_str}, true ) } ); end return value, selected; end --[[--------------------------< F O R M A T _ C H A P T E R _ T I T L E >-------------------------------------- Format the four chapter parameters: |script-chapter=, |chapter=, |trans-chapter=, and |chapter-url= into a single Chapter meta- parameter (chapter_url_source used for error messages). ]] local function format_chapter_title (scriptchapter, chapter, transchapter, chapterurl, chapter_url_source, no_quotes) local chapter_error = ''; if not is_set (chapter) then chapter = ''; -- to be safe for concatenation else if false == no_quotes then chapter = kern_quotes (chapter); -- if necessary, separate chapter title's leading and trailing quote marks from Module provided quote marks chapter = wrap_style ('quoted-title', chapter); end end chapter = script_concatenate (chapter, scriptchapter) -- <bdi> tags, lang atribute, categorization, etc; must be done after title is wrapped if is_set (transchapter) then transchapter = wrap_style ('trans-quoted-title', transchapter); if is_set (chapter) then chapter = chapter .. ' ' .. transchapter; else -- here when transchapter without chapter or script-chapter chapter = transchapter; -- chapter_error = ' ' .. set_error ('trans_missing_title', {'chapter'}); end end if is_set (chapterurl) then chapter = external_link (chapterurl, chapter, chapter_url_source); -- adds bare_url_missing_title error if appropriate end return chapter .. chapter_error; end --[[--------------------------< H A S _ I N V I S I B L E _ C H A R S >---------------------------------------- This function searches a parameter's value for nonprintable or invisible characters. The search stops at the first match. This function will detect the visible replacement character when it is part of the wikisource. Detects but ignores nowiki and math stripmarkers. Also detects other named stripmarkers (gallery, math, pre, ref) and identifies them with a slightly different error message. See also coins_cleanup(). Detects but ignores the character pattern that results from the transclusion of {{'}} templates. Output of this function is an error message that identifies the character or the Unicode group, or the stripmarker that was detected along with its position (or, for multi-byte characters, the position of its first byte) in the parameter value. ]] local function has_invisible_chars (param, v) local position = ''; -- position of invisible char or starting position of stripmarker local dummy; -- end of matching string; not used but required to hold end position when a capture is returned local capture; -- used by stripmarker detection to hold name of the stripmarker local i=1; local stripmarker, apostrophe; while cfg.invisible_chars[i] do local char=cfg.invisible_chars[i][1] -- the character or group name local pattern=cfg.invisible_chars[i][2] -- the pattern used to find it position, dummy, capture = mw.ustring.find (v, pattern) -- see if the parameter value contains characters that match the pattern if position then if 'nowiki' == capture or 'math' == capture or -- nowiki and math stripmarkers (not an error condition) ('templatestyles' == capture) then -- templatestyles stripmarker allowed stripmarker = true; -- set a flag elseif true == stripmarker and 'delete' == char then -- because stripmakers begin and end with the delete char, assume that we've found one end of a stripmarker position = nil; -- unset elseif 'apostrophe' == char then -- apostrophe template uses &zwj;, hair space and zero-width space apostrophe = true; elseif true == apostrophe and in_array (char, {'zero width joiner', 'zero width space', 'hair space'}) then position = nil; -- unset else local err_msg; if capture then err_msg = capture .. ' ' .. cfg.invisible_chars[i][3] or char; else err_msg = cfg.invisible_chars[i][3] or (char .. ' character'); end table.insert( z.message_tail, { set_error( 'invisible_char', {err_msg, wrap_style ('parameter', param), position}, true ) } ); -- add error message return; -- and done with this parameter end end i=i+1; -- bump our index end end --[[--------------------------< A R G U M E N T _ W R A P P E R >---------------------------------------------- Argument wrapper. This function provides support for argument mapping defined in the configuration file so that multiple names can be transparently aliased to single internal variable. ]] local function argument_wrapper( args ) local origin = {}; return setmetatable({ ORIGIN = function( self, k ) local dummy = self[k]; --force the variable to be loaded. return origin[k]; end }, { __index = function ( tbl, k ) if origin[k] ~= nil then return nil; end local args, list, v = args, cfg.aliases[k]; if type( list ) == 'table' then v, origin[k] = select_one( args, list, 'redundant_parameters' ); if origin[k] == nil then origin[k] = ''; -- Empty string, not nil end elseif list ~= nil then v, origin[k] = args[list], list; else -- maybe let through instead of raising an error? -- v, origin[k] = args[k], k; error( cfg.messages['unknown_argument_map'] ); end -- Empty strings, not nil; if v == nil then v = cfg.defaults[k] or ''; origin[k] = ''; end tbl = rawset( tbl, k, v ); return v; end, }); end --[[--------------------------< V A L I D A T E >-------------------------------------------------------------- Looks for a parameter's name in the whitelist. Parameters in the whitelist can have three values: true - active, supported parameters false - deprecated, supported parameters nil - unsupported parameters ]] local function validate( name ) local name = tostring( name ); local state = whitelist.basic_arguments[ name ]; -- Normal arguments if true == state then return true; end -- valid actively supported parameter if false == state then deprecated_parameter (name); -- parameter is deprecated but still supported return true; end -- Arguments with numbers in them name = name:gsub( "%d+", "#" ); -- replace digit(s) with # (last25 becomes last# state = whitelist.numbered_arguments[ name ]; if true == state then return true; end -- valid actively supported parameter if false == state then deprecated_parameter (name); -- parameter is deprecated but still supported return true; end return false; -- Not supported because not found or name is set to nil end -- Formats a wiki style internal link local function internal_link_id(options) return mw.ustring.format( '[[%s%s%s|\<span title\=\"%s\"\>%s\<\/span\>%s%s]]', options.prefix, options.id, options.suffix or "", options.link, options.label, options.separator or "&nbsp;", mw.text.nowiki(options.id) ); end --[[--------------------------< N O W R A P _ D A T E >-------------------------------------------------------- When date is YYYY-MM-DD format wrap in nowrap span: <span ...>YYYY-MM-DD</span>. When date is DD MMMM YYYY or is MMMM DD, YYYY then wrap in nowrap span: <span ...>DD MMMM</span> YYYY or <span ...>MMMM DD,</span> YYYY DOES NOT yet support MMMM YYYY or any of the date ranges. ]] local function nowrap_date (date) local cap=''; local cap2=''; if date:match("^%d%d%d%d%-%d%d%-%d%d$") then date = substitute (cfg.presentation['nowrap1'], date); elseif date:match("^%a+%s*%d%d?,%s+%d%d%d%d$") or date:match ("^%d%d?%s*%a+%s+%d%d%d%d$") then cap, cap2 = string.match (date, "^(.*)%s+(%d%d%d%d)$"); date = substitute (cfg.presentation['nowrap2'], {cap, cap2}); end return date; end --[[--------------------------< IS _ V A L I D _ I S X N >----------------------------------------------------- ISBN-10 and ISSN validator code calculates checksum across all isbn/issn digits including the check digit. ISBN-13 is checked in check_isbn(). If the number is valid the result will be 0. Before calling this function, issbn/issn must be checked for length and stripped of dashes, spaces and other non-isxn characters. ]] local function is_valid_isxn (isxn_str, len) local temp = 0; isxn_str = { isxn_str:byte(1, len) }; -- make a table of byte values '0' → 0x30 .. '9' → 0x39, 'X' → 0x58 len = len+1; -- adjust to be a loop counter for i, v in ipairs( isxn_str ) do -- loop through all of the bytes and calculate the checksum if v == string.byte( "X" ) then -- if checkdigit is X (compares the byte value of 'X' which is 0x58) temp = temp + 10*( len - i ); -- it represents 10 decimal else temp = temp + tonumber( string.char(v) )*(len-i); end end return temp % 11 == 0; -- returns true if calculation result is zero end --[[--------------------------< IS _ V A L I D _ I S X N _ 1 3 >---------------------------------------------- ISBN-13 and ISMN validator code calculates checksum across all 13 isbn/ismn digits including the check digit. If the number is valid, the result will be 0. Before calling this function, isbn-13/ismn must be checked for length and stripped of dashes, spaces and other non-isxn-13 characters. ]] local function is_valid_isxn_13 (isxn_str) local temp=0; isxn_str = { isxn_str:byte(1, 13) }; -- make a table of byte values '0' → 0x30 .. '9' → 0x39 for i, v in ipairs( isxn_str ) do temp = temp + (3 - 2*(i % 2)) * tonumber( string.char(v) ); -- multiply odd index digits by 1, even index digits by 3 and sum; includes check digit end return temp % 10 == 0; -- sum modulo 10 is zero when isbn-13/ismn is correct end --[[--------------------------< C H E C K _ I S B N >------------------------------------------------------------ Determines whether an ISBN string is valid ]] local function check_isbn( isbn_str ) if nil ~= isbn_str:match("[^%s-0-9X]") then return false; end -- fail if isbn_str contains anything but digits, hyphens, or the uppercase X isbn_str = isbn_str:gsub( "-", "" ):gsub( " ", "" ); -- remove hyphens and spaces local len = isbn_str:len(); if len ~= 10 and len ~= 13 then return false; end if len == 10 then if isbn_str:match( "^%d*X?$" ) == nil then return false; end return is_valid_isxn(isbn_str, 10); else local temp = 0; if isbn_str:match( "^97[89]%d*$" ) == nil then return false; end -- isbn13 begins with 978 or 979; ismn begins with 979 return is_valid_isxn_13 (isbn_str); end end --[[--------------------------< C H E C K _ I S M N >------------------------------------------------------------ Determines whether an ISMN string is valid. Similar to isbn-13, ismn is 13 digits begining 979-0-... and uses the same check digit calculations. See http://www.ismn-international.org/download/Web_ISMN_Users_Manual_2008-6.pdf section 2, pages 9–12. ]] local function ismn (id) local handler = cfg.id_handlers['ISMN']; local text; local valid_ismn = true; id=id:gsub( "[%s-–]", "" ); -- strip spaces, hyphens, and endashes from the ismn if 13 ~= id:len() or id:match( "^9790%d*$" ) == nil then -- ismn must be 13 digits and begin 9790 valid_ismn = false; else valid_ismn=is_valid_isxn_13 (id); -- validate ismn end -- text = internal_link_id({link = handler.link, label = handler.label, -- use this (or external version) when there is some place to link to -- prefix=handler.prefix,id=id,separator=handler.separator, encode=handler.encode}) text="[[" .. handler.link .. "|" .. handler.label .. "]]" .. handler.separator .. id; -- because no place to link to yet if false == valid_ismn then text = text .. ' ' .. set_error( 'bad_ismn' ) -- add an error message if the issn is invalid end return text; end --[[--------------------------< I S S N >---------------------------------------------------------------------- Validate and format an issn. This code fixes the case where an editor has included an ISSN in the citation but has separated the two groups of four digits with a space. When that condition occurred, the resulting link looked like this: |issn=0819 4327 gives: [http://www.worldcat.org/issn/0819 4327 0819 4327] -- can't have spaces in an external link This code now prevents that by inserting a hyphen at the issn midpoint. It also validates the issn for length and makes sure that the checkdigit agrees with the calculated value. Incorrect length (8 digits), characters other than 0-9 and X, or checkdigit / calculated value mismatch will all cause a check issn error message. The issn is always displayed with a hyphen, even if the issn was given as a single group of 8 digits. ]] local function issn(id, e) local issn_copy = id; -- save a copy of unadulterated issn; use this version for display if issn does not validate local handler; local text; local valid_issn = true; if e then handler = cfg.id_handlers['EISSN']; else handler = cfg.id_handlers['ISSN']; end id=id:gsub( "[%s-–]", "" ); -- strip spaces, hyphens, and endashes from the issn if 8 ~= id:len() or nil == id:match( "^%d*X?$" ) then -- validate the issn: 8 digits long, containing only 0-9 or X in the last position valid_issn=false; -- wrong length or improper character else valid_issn=is_valid_isxn(id, 8); -- validate issn end if true == valid_issn then id = string.sub( id, 1, 4 ) .. "-" .. string.sub( id, 5 ); -- if valid, display correctly formatted version else id = issn_copy; -- if not valid, use the show the invalid issn with error message end text = external_link_id({link = handler.link, label = handler.label, prefix=handler.prefix,id=id,separator=handler.separator, encode=handler.encode}) if false == valid_issn then text = text .. ' ' .. set_error( 'bad_issn' ) -- add an error message if the issn is invalid end return text end --[[--------------------------< A M A Z O N >------------------------------------------------------------------ Formats a link to Amazon. Do simple error checking: asin must be mix of 10 numeric or uppercase alpha characters. If a mix, first character must be uppercase alpha; if all numeric, asins must be 10-digit isbn. If 10-digit isbn, add a maintenance category so a bot or awb script can replace |asin= with |isbn=. Error message if not 10 characters, if not isbn10, if mixed and first character is a digit. ]] local function amazon(id, domain) local err_cat = "" if not id:match("^[%d%u][%d%u][%d%u][%d%u][%d%u][%d%u][%d%u][%d%u][%d%u][%d%u]$") then err_cat = ' ' .. set_error ('bad_asin'); -- asin is not a mix of 10 uppercase alpha and numeric characters else if id:match("^%d%d%d%d%d%d%d%d%d[%dX]$") then -- if 10-digit numeric (or 9 digits with terminal X) if check_isbn( id ) then -- see if asin value is isbn10 add_maint_cat ('ASIN'); elseif not is_set (err_cat) then err_cat = ' ' .. set_error ('bad_asin'); -- asin is not isbn10 end elseif not id:match("^%u[%d%u]+$") then err_cat = ' ' .. set_error ('bad_asin'); -- asin doesn't begin with uppercase alpha end end if not is_set(domain) then domain = "com"; elseif in_array (domain, {'jp', 'uk'}) then -- Japan, United Kingdom domain = "co." .. domain; elseif in_array (domain, {'au', 'br', 'mx'}) then -- Australia, Brazil, Mexico domain = "com." .. domain; end local handler = cfg.id_handlers['ASIN']; return external_link_id({link=handler.link, label=handler.label, prefix=handler.prefix .. domain .. "/dp/", id=id, encode=handler.encode, separator = handler.separator}) .. err_cat; end --[[--------------------------< A R X I V >-------------------------------------------------------------------- See: http://arxiv.org/help/arxiv_identifier format and error check arXiv identifier. There are three valid forms of the identifier: the first form, valid only between date codes 9108 and 0703 is: arXiv:<archive>.<class>/<date code><number><version> where: <archive> is a string of alpha characters - may be hyphenated; no other punctuation <class> is a string of alpha characters - may be hyphenated; no other punctuation <date code> is four digits in the form YYMM where YY is the last two digits of the four-digit year and MM is the month number January = 01 first digit of YY for this form can only 9 and 0 <number> is a three-digit number <version> is a 1 or more digit number preceded with a lowercase v; no spaces (undocumented) the second form, valid from April 2007 through December 2014 is: arXiv:<date code>.<number><version> where: <date code> is four digits in the form YYMM where YY is the last two digits of the four-digit year and MM is the month number January = 01 <number> is a four-digit number <version> is a 1 or more digit number preceded with a lowercase v; no spaces the third form, valid from January 2015 is: arXiv:<date code>.<number><version> where: <date code> and <version> are as defined for 0704-1412 <number> is a five-digit number ]] local function arxiv (id, class) local handler = cfg.id_handlers['ARXIV']; local year, month, version; local err_cat = ''; local text; if id:match("^%a[%a%.%-]+/[90]%d[01]%d%d%d%d$") or id:match("^%a[%a%.%-]+/[90]%d[01]%d%d%d%dv%d+$") then -- test for the 9108-0703 format w/ & w/o version year, month = id:match("^%a[%a%.%-]+/([90]%d)([01]%d)%d%d%d[v%d]*$"); year = tonumber(year); month = tonumber(month); if ((not (90 < year or 8 > year)) or (1 > month or 12 < month)) or -- if invalid year or invalid month ((91 == year and 7 > month) or (7 == year and 3 < month)) then -- if years ok, are starting and ending months ok? err_cat = ' ' .. set_error( 'bad_arxiv' ); -- set error message end elseif id:match("^%d%d[01]%d%.%d%d%d%d$") or id:match("^%d%d[01]%d%.%d%d%d%dv%d+$") then -- test for the 0704-1412 w/ & w/o version year, month = id:match("^(%d%d)([01]%d)%.%d%d%d%d[v%d]*$"); year = tonumber(year); month = tonumber(month); if ((7 > year) or (14 < year) or (1 > month or 12 < month)) or -- is year invalid or is month invalid? (doesn't test for future years) ((7 == year) and (4 > month)) then --or -- when year is 07, is month invalid (before April)? err_cat = ' ' .. set_error( 'bad_arxiv' ); -- set error message end elseif id:match("^%d%d[01]%d%.%d%d%d%d%d$") or id:match("^%d%d[01]%d%.%d%d%d%d%dv%d+$") then -- test for the 1501- format w/ & w/o version year, month = id:match("^(%d%d)([01]%d)%.%d%d%d%d%d[v%d]*$"); year = tonumber(year); month = tonumber(month); if ((15 > year) or (1 > month or 12 < month)) then -- is year invalid or is month invalid? (doesn't test for future years) err_cat = ' ' .. set_error( 'bad_arxiv' ); -- set error message end else err_cat = ' ' .. set_error( 'bad_arxiv' ); -- arXiv id doesn't match any format end text = external_link_id({link = handler.link, label = handler.label, prefix=handler.prefix,id=id,separator=handler.separator, encode=handler.encode}) .. err_cat; if is_set (class) then class = ' [[' .. '//arxiv.org/archive/' .. class .. ' ' .. class .. ']]'; -- external link within square brackets, not wikilink else class = ''; -- empty string for concatenation end return text .. class; end --[[ lccn normalization (http://www.loc.gov/marc/lccn-namespace.html#normalization) 1. Remove all blanks. 2. If there is a forward slash (/) in the string, remove it, and remove all characters to the right of the forward slash. 3. If there is a hyphen in the string: a. Remove it. b. Inspect the substring following (to the right of) the (removed) hyphen. Then (and assuming that steps 1 and 2 have been carried out): 1. All these characters should be digits, and there should be six or less. (not done in this function) 2. If the length of the substring is less than 6, left-fill the substring with zeroes until the length is six. Returns a normalized lccn for lccn() to validate. There is no error checking (step 3.b.1) performed in this function. ]] local function normalize_lccn (lccn) lccn = lccn:gsub ("%s", ""); -- 1. strip whitespace if nil ~= string.find (lccn,'/') then lccn = lccn:match ("(.-)/"); -- 2. remove forward slash and all character to the right of it end local prefix local suffix prefix, suffix = lccn:match ("(.+)%-(.+)"); -- 3.a remove hyphen by splitting the string into prefix and suffix if nil ~= suffix then -- if there was a hyphen suffix=string.rep("0", 6-string.len (suffix)) .. suffix; -- 3.b.2 left fill the suffix with 0s if suffix length less than 6 lccn=prefix..suffix; -- reassemble the lccn end return lccn; end --[[ Format LCCN link and do simple error checking. LCCN is a character string 8-12 characters long. The length of the LCCN dictates the character type of the first 1-3 characters; the rightmost eight are always digits. http://info-uri.info/registry/OAIHandler?verb=GetRecord&metadataPrefix=reg&identifier=info:lccn/ length = 8 then all digits length = 9 then lccn[1] is lower case alpha length = 10 then lccn[1] and lccn[2] are both lower case alpha or both digits length = 11 then lccn[1] is lower case alpha, lccn[2] and lccn[3] are both lower case alpha or both digits length = 12 then lccn[1] and lccn[2] are both lower case alpha ]] local function lccn(lccn) local handler = cfg.id_handlers['LCCN']; local err_cat = ''; -- presume that LCCN is valid local id = lccn; -- local copy of the lccn id = normalize_lccn (id); -- get canonical form (no whitespace, hyphens, forward slashes) local len = id:len(); -- get the length of the lccn if 8 == len then if id:match("[^%d]") then -- if LCCN has anything but digits (nil if only digits) err_cat = ' ' .. set_error( 'bad_lccn' ); -- set an error message end elseif 9 == len then -- LCCN should be adddddddd if nil == id:match("%l%d%d%d%d%d%d%d%d") then -- does it match our pattern? err_cat = ' ' .. set_error( 'bad_lccn' ); -- set an error message end elseif 10 == len then -- LCCN should be aadddddddd or dddddddddd if id:match("[^%d]") then -- if LCCN has anything but digits (nil if only digits) ... if nil == id:match("^%l%l%d%d%d%d%d%d%d%d") then -- ... see if it matches our pattern err_cat = ' ' .. set_error( 'bad_lccn' ); -- no match, set an error message end end elseif 11 == len then -- LCCN should be aaadddddddd or adddddddddd if not (id:match("^%l%l%l%d%d%d%d%d%d%d%d") or id:match("^%l%d%d%d%d%d%d%d%d%d%d")) then -- see if it matches one of our patterns err_cat = ' ' .. set_error( 'bad_lccn' ); -- no match, set an error message end elseif 12 == len then -- LCCN should be aadddddddddd if not id:match("^%l%l%d%d%d%d%d%d%d%d%d%d") then -- see if it matches our pattern err_cat = ' ' .. set_error( 'bad_lccn' ); -- no match, set an error message end else err_cat = ' ' .. set_error( 'bad_lccn' ); -- wrong length, set an error message end if not is_set (err_cat) and nil ~= lccn:find ('%s') then err_cat = ' ' .. set_error( 'bad_lccn' ); -- lccn contains a space, set an error message end return external_link_id({link = handler.link, label = handler.label, prefix=handler.prefix,id=lccn,separator=handler.separator, encode=handler.encode}) .. err_cat; end --[[--------------------------< P M I D >---------------------------------------------------------------------- Format PMID and do simple error checking. PMIDs are sequential numbers beginning at 1 and counting up. This code checks the PMID to see that it contains only digits and is less than test_limit; the value in local variable test_limit will need to be updated periodically as more PMIDs are issued. ]] local function pmid(id) local test_limit = 36000000; -- update this value as PMIDs approach local handler = cfg.id_handlers['PMID']; local err_cat = ''; -- presume that PMID is valid if id:match("[^%d]") then -- if PMID has anything but digits err_cat = ' ' .. set_error( 'bad_pmid' ); -- set an error message else -- PMID is only digits local id_num = tonumber(id); -- convert id to a number for range testing if 1 > id_num or test_limit < id_num then -- if PMID is outside test limit boundaries err_cat = ' ' .. set_error( 'bad_pmid' ); -- set an error message end end return external_link_id({link = handler.link, label = handler.label, prefix=handler.prefix,id=id,separator=handler.separator, encode=handler.encode}) .. err_cat; end --[[--------------------------< I S _ E M B A R G O E D >------------------------------------------------------ Determines if a PMC identifier's online version is embargoed. Compares the date in |embargo= against today's date. If embargo date is in the future, returns the content of |embargo=; otherwise, returns and empty string because the embargo has expired or because |embargo= was not set in this cite. ]] local function is_embargoed (embargo) if is_set (embargo) then local lang = mw.getContentLanguage(); local good1, embargo_date, good2, todays_date; good1, embargo_date = pcall( lang.formatDate, lang, 'U', embargo ); good2, todays_date = pcall( lang.formatDate, lang, 'U' ); if good1 and good2 then -- if embargo date and today's date are good dates if tonumber( embargo_date ) >= tonumber( todays_date ) then -- is embargo date is in the future? return embargo; -- still embargoed else add_maint_cat ('embargo') return ''; -- unset because embargo has expired end end end return ''; -- |embargo= not set return empty string end --[[--------------------------< P M C >------------------------------------------------------------------------ Format a PMC, do simple error checking, and check for embargoed articles. The embargo parameter takes a date for a value. If the embargo date is in the future the PMC identifier will not be linked to the article. If the embargo date is today or in the past, or if it is empty or omitted, then the PMC identifier is linked to the article through the link at cfg.id_handlers['PMC'].prefix. PMC embargo date testing is done in function is_embargoed () which is called earlier because when the citation has |pmc=<value> but does not have a |url= then |title= is linked with the PMC link. Function is_embargoed () returns the embargo date if the PMC article is still embargoed, otherwise it returns an empty string. PMCs are sequential numbers beginning at 1 and counting up. This code checks the PMC to see that it contains only digits and is less than test_limit; the value in local variable test_limit will need to be updated periodically as more PMCs are issued. ]] local function pmc(id, embargo) local test_limit = 10000000; -- update this value as PMCs approach local handler = cfg.id_handlers['PMC']; local err_cat = ''; -- presume that PMC is valid local id_num; local text; id_num = id:match ('^[Pp][Mm][Cc](%d+)$'); -- identifier with pmc prefix if is_set (id_num) then add_maint_cat ('pmc_format'); else -- plain number without pmc prefix id_num = id:match ('^%d+$'); -- if here id is all digits end if is_set (id_num) then -- id_num has a value so test it id_num = tonumber(id_num); -- convert id_num to a number for range testing if 1 > id_num or test_limit < id_num then -- if PMC is outside test limit boundaries err_cat = ' ' .. set_error( 'bad_pmc' ); -- set an error message else id = tostring (id_num); -- make sure id is a string end else -- when id format incorrect err_cat = ' ' .. set_error( 'bad_pmc' ); -- set an error message end if is_set (embargo) then -- is PMC is still embargoed? text = table.concat ( -- still embargoed so no external link { make_wikilink (handler.link, handler.label), handler.separator, id, err_cat }); else text = external_link_id({link = handler.link, label = handler.label, -- no embargo date or embargo has expired, ok to link to article prefix=handler.prefix,id=id,separator=handler.separator, encode=handler.encode}) .. err_cat; end return text; end --[[--------------------------< D O I >------------------------------------------------------------------------ Formats a DOI and checks for DOI errors. DOI names contain two parts: prefix and suffix separated by a forward slash. Prefix: directory indicator '10.' followed by a registrant code Suffix: character string of any length chosen by the registrant This function checks a DOI name for: prefix/suffix. If the doi name contains spaces or endashes, or, if it ends with a period or a comma, this function will emit a bad_doi error message. DOI names are case-insensitive and can incorporate any printable Unicode characters so the test for spaces, endash, and terminal punctuation may not be technically correct but it appears, that in practice these characters are rarely if ever used in doi names. ]] local function doi(id, inactive) local cat = "" local handler = cfg.id_handlers['DOI']; local text; if is_set(inactive) then local inactive_year = inactive:match("%d%d%d%d") or ''; -- try to get the year portion from the inactive date if is_set(inactive_year) then table.insert( z.error_categories, "自" .. inactive_year .. "年含有不活躍DOI的頁面" ); else table.insert( z.error_categories, "含有不活躍DOI的頁面" ); -- when inactive doesn't contain a recognizable year end inactive = " (" .. cfg.messages['inactive'] .. " " .. inactive .. ")" end text = external_link_id({link = handler.link, label = handler.label, prefix=handler.prefix,id=id,separator=handler.separator, encode=handler.encode}) .. (inactive or '') if nil == id:match("^10%.[^%s–]-/[^%s–]-[^%.,]$") then -- doi must begin with '10.', must contain a fwd slash, must not contain spaces or endashes, and must not end with period or comma cat = ' ' .. set_error( 'bad_doi' ); end return text .. cat end --[[--------------------------< H D L >------------------------------------------------------------------------ Formats an HDL with minor error checking. HDL names contain two parts: prefix and suffix separated by a forward slash. Prefix: character string using any character in the UCS-2 character set except '/' Suffix: character string of any length using any character in the UCS-2 character set chosen by the registrant This function checks a HDL name for: prefix/suffix. If the HDL name contains spaces, endashes, or, if it ends with a period or a comma, this function will emit a bad_hdl error message. HDL names are case-insensitive and can incorporate any printable Unicode characters so the test for endashes and terminal punctuation may not be technically correct but it appears, that in practice these characters are rarely if ever used in HDLs. ]] local function hdl(id) local handler = cfg.id_handlers['HDL']; local text = external_link_id({link = handler.link, label = handler.label, prefix=handler.prefix,id=id,separator=handler.separator, encode=handler.encode}) if nil == id:match("^[^%s–]-/[^%s–]-[^%.,]$") then -- hdl must contain a fwd slash, must not contain spaces, endashes, and must not end with period or comma text = text .. ' ' .. set_error( 'bad_hdl' ); end return text; end --[[--------------------------< O P E N L I B R A R Y >-------------------------------------------------------- Formats an OpenLibrary link, and checks for associated errors. ]] local function openlibrary(id) local code = id:match("^%d+([AMW])$"); -- only digits followed by 'A', 'M', or 'W' local handler = cfg.id_handlers['OL']; if ( code == "A" ) then return external_link_id({link=handler.link, label=handler.label, prefix=handler.prefix .. 'authors/OL', id=id, separator=handler.separator, encode = handler.encode}) elseif ( code == "M" ) then return external_link_id({link=handler.link, label=handler.label, prefix=handler.prefix .. 'books/OL', id=id, separator=handler.separator, encode = handler.encode}) elseif ( code == "W" ) then return external_link_id({link=handler.link, label=handler.label, prefix=handler.prefix .. 'works/OL', id=id, separator=handler.separator, encode = handler.encode}) else return external_link_id({link=handler.link, label=handler.label, prefix=handler.prefix .. 'OL', id=id, separator=handler.separator, encode = handler.encode}) .. ' ' .. set_error( 'bad_ol' ); end end --[[--------------------------< M E S S A G E _ I D >---------------------------------------------------------- Validate and format a usenet message id. Simple error checking, looks for 'id-left@id-right' not enclosed in '<' and/or '>' angle brackets. ]] local function message_id (id) local handler = cfg.id_handlers['USENETID']; text = external_link_id({link = handler.link, label = handler.label, prefix=handler.prefix,id=id,separator=handler.separator, encode=handler.encode}) if not id:match('^.+@.+$') or not id:match('^[^<].*[^>]$')then -- doesn't have '@' or has one or first or last character is '< or '>' text = text .. ' ' .. set_error( 'bad_message_id' ) -- add an error message if the message id is invalid end return text end --[[--------------------------< S E T _ T I T L E T Y P E >---------------------------------------------------- This function sets default title types (equivalent to the citation including |type=<default value>) for those templates that have defaults. Also handles the special case where it is desirable to omit the title type from the rendered citation (|type=none). ]] local function set_titletype (cite_class, title_type) if is_set(title_type) then if "none" == title_type then title_type = ""; -- if |type=none then type parameter not displayed end return title_type; -- if |type= has been set to any other value use that value end return cfg.title_types [cite_class] or ''; -- set template's default title type; else empty string for concatenation end --[[--------------------------< C L E A N _ I S B N >---------------------------------------------------------- Removes irrelevant text and dashes from ISBN number Similar to that used for Special:BookSources ]] local function clean_isbn( isbn_str ) return isbn_str:gsub( "[^-0-9X]", "" ); end --[[--------------------------< E S C A P E _ L U A _ M A G I C _ C H A R S >---------------------------------- Returns a string where all of lua's magic characters have been escaped. This is important because functions like string.gsub() treat their pattern and replace strings as patterns, not literal strings. ]] local function escape_lua_magic_chars (argument) argument = argument:gsub("%%", "%%%%"); -- replace % with %% argument = argument:gsub("([%^%$%(%)%.%[%]%*%+%-%?])", "%%%1"); -- replace all other lua magic pattern characters return argument; end --[[--------------------------< S T R I P _ A P O S T R O P H E _ M A R K U P >-------------------------------- Strip wiki italic and bold markup from argument so that it doesn't contaminate COinS metadata. This function strips common patterns of apostrophe markup. We presume that editors who have taken the time to markup a title have, as a result, provided valid markup. When they don't, some single apostrophes are left behind. ]] local function strip_apostrophe_markup (argument) if not is_set (argument) then return argument; end while true do if argument:match ("%'%'%'%'%'") then -- bold italic (5) argument=argument:gsub("%'%'%'%'%'", ""); -- remove all instances of it elseif argument:match ("%'%'%'%'") then -- italic start and end without content (4) argument=argument:gsub("%'%'%'%'", ""); elseif argument:match ("%'%'%'") then -- bold (3) argument=argument:gsub("%'%'%'", ""); elseif argument:match ("%'%'") then -- italic (2) argument=argument:gsub("%'%'", ""); else break; end end return argument; -- done end --[[--------------------------< M A K E _ C O I N S _ T I T L E >---------------------------------------------- Makes a title for COinS from Title and / or ScriptTitle (or any other name-script pairs) Apostrophe markup (bold, italics) is stripped from each value so that the COinS metadata isn't correupted with strings of %27%27... ]] local function make_coins_title (title, script) if is_set (title) then title = strip_apostrophe_markup (title); -- strip any apostrophe markup else title=''; -- if not set, make sure title is an empty string end if is_set (script) then script = script:gsub ('^%l%l%s*:%s*', ''); -- remove language prefix if present (script value may now be empty string) script = strip_apostrophe_markup (script); -- strip any apostrophe markup else script=''; -- if not set, make sure script is an empty string end if is_set (title) and is_set (script) then script = ' ' .. script; -- add a space before we concatenate end return title .. script; -- return the concatenation end --[[--------------------------< G E T _ C O I N S _ P A G E S >------------------------------------------------ Extract page numbers from external wikilinks in any of the |page=, |pages=, or |at= parameters for use in COinS. ]] local function get_coins_pages (pages) local pattern; if not is_set (pages) then return pages; end -- if no page numbers then we're done while true do pattern = pages:match("%[(%w*:?//[^ ]+%s+)[%w%d].*%]"); -- pattern is the opening bracket, the url and following space(s): "[url " if nil == pattern then break; end -- no more urls pattern = escape_lua_magic_chars (pattern); -- pattern is not a literal string; escape lua's magic pattern characters pages = pages:gsub(pattern, ""); -- remove as many instances of pattern as possible end pages = pages:gsub("[%[%]]", ""); -- remove the brackets pages = pages:gsub("–", "-" ); -- replace endashes with hyphens pages = pages:gsub("&%w+;", "-" ); -- and replace html entities (&ndash; etc.) with hyphens; do we need to replace numerical entities like &#32; and the like? return pages; end -- Gets the display text for a wikilink like [[A|B]] or [[B]] gives B local function remove_wiki_link( str ) return (str:gsub( "%[%[([^%[%]]*)%]%]", function(l) return l:gsub( "^[^|]*|(.*)$", "%1" ):gsub("^%s*(.-)%s*$", "%1"); end)); end -- Converts a hyphen to a dash local function hyphen_to_dash( str ) if not is_set(str) or str:match( "[%[%]{}<>]" ) ~= nil then return str; end return str:gsub( '-', '–' ); end --[[--------------------------< S A F E _ J O I N >------------------------------------------------------------ Joins a sequence of strings together while checking for duplicate separation characters. ]] local function safe_join( tbl, duplicate_char ) --[[ Note: we use string functions here, rather than ustring functions. This has considerably faster performance and should work correctly as long as the duplicate_char is strict ASCII. The strings in tbl may be ASCII or UTF8. ]] local str = ''; -- the output string local comp = ''; -- what does 'comp' mean? local end_chr = ''; local trim; for _, value in ipairs( tbl ) do if value == nil then value = ''; end if str == '' then -- if output string is empty str = value; -- assign value to it (first time through the loop) elseif value ~= '' then if value:sub(1,1) == '<' then -- Special case of values enclosed in spans and other markup. comp = value:gsub( "%b<>", "" ); -- remove html markup (<span>string</span> -> string) else comp = value; end -- typically duplicate_char is sepc if comp:sub(1,1) == duplicate_char then -- is first charactier same as duplicate_char? why test first character? -- Because individual string segments often (always?) begin with terminal punct for th -- preceding segment: 'First element' .. 'sepc next element' .. etc? trim = false; end_chr = str:sub(-1,-1); -- get the last character of the output string -- str = str .. "<HERE(enchr=" .. end_chr.. ")" -- debug stuff? if end_chr == duplicate_char then -- if same as separator str = str:sub(1,-2); -- remove it elseif end_chr == "'" then -- if it might be wikimarkup if str:sub(-3,-1) == duplicate_char .. "''" then -- if last three chars of str are sepc'' str = str:sub(1, -4) .. "''"; -- remove them and add back '' elseif str:sub(-5,-1) == duplicate_char .. "]]''" then -- if last five chars of str are sepc]]'' trim = true; -- why? why do this and next differently from previous? elseif str:sub(-4,-1) == duplicate_char .. "]''" then -- if last four chars of str are sepc]'' trim = true; -- same question end elseif end_chr == "]" then -- if it might be wikimarkup if str:sub(-3,-1) == duplicate_char .. "]]" then -- if last three chars of str are sepc]] wikilink trim = true; elseif str:sub(-2,-1) == duplicate_char .. "]" then -- if last two chars of str are sepc] external link trim = true; elseif str:sub(-4,-1) == duplicate_char .. "'']" then -- normal case when |url=something & |title=Title. trim = true; end elseif end_chr == " " then -- if last char of output string is a space if str:sub(-2,-1) == duplicate_char .. " " then -- if last two chars of str are <sepc><space> str = str:sub(1,-3); -- remove them both end end if trim then if value ~= comp then -- value does not equal comp when value contains html markup local dup2 = duplicate_char; if dup2:match( "%A" ) then dup2 = "%" .. dup2; end -- if duplicate_char not a letter then escape it value = value:gsub( "(%b<>)" .. dup2, "%1", 1 ) -- remove duplicate_char if it follows html markup else value = value:sub( 2, -1 ); -- remove duplicate_char when it is first character end end end str = str .. value; --add it to the output string end end return str; end --[[--------------------------< I S _ G O O D _ V A N C _ N A M E >-------------------------------------------- For Vancouver Style, author/editor names are supposed to be rendered in Latin (read ASCII) characters. When a name uses characters that contain diacritical marks, those characters are to converted to the corresponding Latin character. When a name is written using a non-Latin alphabet or logogram, that name is to be transliterated into Latin characters. These things are not currently possible in this module so are left to the editor to do. This test allows |first= and |last= names to contain any of the letters defined in the four Unicode Latin character sets [http://www.unicode.org/charts/PDF/U0000.pdf C0 Controls and Basic Latin] 0041–005A, 0061–007A [http://www.unicode.org/charts/PDF/U0080.pdf C1 Controls and Latin-1 Supplement] 00C0–00D6, 00D8–00F6, 00F8–00FF [http://www.unicode.org/charts/PDF/U0100.pdf Latin Extended-A] 0100–017F [http://www.unicode.org/charts/PDF/U0180.pdf Latin Extended-B] 0180–01BF, 01C4–024F |lastn= also allowed to contain hyphens, spaces, and apostrophes. (http://www.ncbi.nlm.nih.gov/books/NBK7271/box/A35029/) |firstn= also allowed to contain hyphens, spaces, apostrophes, and periods At the time of this writing, I had to write the 'if nil == mw.ustring.find ...' test ouside of the code editor and paste it here because the code editor gets confused between character insertion point and cursor position. ]] local function is_good_vanc_name (last, first) if nil == mw.ustring.find (last, "^[A-Za-zÀ-ÖØ-öø-ƿǄ-ɏ%-%s%']*$") or nil == mw.ustring.find (first, "^[A-Za-zÀ-ÖØ-öø-ƿǄ-ɏ%-%s%'%.]*$") then add_vanc_error (); return false; -- not a string of latin characters; Vancouver required Romanization end; return true; end --[[--------------------------< R E D U C E _ T O _ I N I T I A L S >------------------------------------------ Attempts to convert names to initials in support of |name-list-format=vanc. Names in |firstn= may be separated by spaces or hyphens, or for initials, a period. See http://www.ncbi.nlm.nih.gov/books/NBK7271/box/A35062/. Vancouver style requires family rank designations (Jr, II, III, etc) to be rendered as Jr, 2nd, 3rd, etc. This form is not currently supported by this code so correctly formed names like Smith JL 2nd are converted to Smith J2. See http://www.ncbi.nlm.nih.gov/books/NBK7271/box/A35085/. This function uses ustring functions because firstname initials may be any of the unicode Latin characters accepted by is_good_vanc_name (). ]] local function reduce_to_initials(first) if mw.ustring.match(first, "^%u%u$") then return first end; -- when first contains just two upper-case letters, nothing to do local initials = {} local i = 0; -- counter for number of initials for word in mw.ustring.gmatch(first, "[^%s%.%-]+") do -- names separated by spaces, hyphens, or periods table.insert(initials, mw.ustring.sub(word,1,1)) -- Vancouver format does not include full stops. i = i + 1; -- bump the counter if 2 <= i then break; end -- only two initials allowed in Vancouver system; if 2, quit end return table.concat(initials) -- Vancouver format does not include spaces. end --[[--------------------------< L I S T _ P E O P L E >------------------------------------------------------- Formats a list of people (e.g. authors / editors) ]] local function list_people(control, people, etal, list_name) -- TODO: why is list_name here? not used in this function local sep; local namesep; local format = control.format local maximum = control.maximum local lastauthoramp = control.lastauthoramp; local text = {} if 'vanc' == format then -- Vancouver-like author/editor name styling? sep = ','; -- name-list separator between authors is a comma namesep = ' '; -- last/first separator is a space else sep = ';' -- name-list separator between authors is a semicolon namesep = ', ' -- last/first separator is <comma><space> end if sep:sub(-1,-1) ~= " " then sep = sep .. " " end if is_set (maximum) and maximum < 1 then return "", 0; end -- returned 0 is for EditorCount; not used for authors for i,person in ipairs(people) do if is_set(person.last) then local mask = person.mask local one local sep_one = sep; if is_set (maximum) and i > maximum then etal = true; break; elseif (mask ~= nil) then local n = tonumber(mask) if (n ~= nil) then one = string.rep("&mdash;",n) else one = mask; sep_one = " "; end else one = person.last local first = person.first if is_set(first) then if ( "vanc" == format ) then -- if vancouver format one = one:gsub ('%.', ''); -- remove periods from surnames (http://www.ncbi.nlm.nih.gov/books/NBK7271/box/A35029/) if not person.corporate and is_good_vanc_name (one, first) then -- and name is all Latin characters; corporate authors not tested first = reduce_to_initials(first) -- attempt to convert first name(s) to initials end end one = one .. namesep .. first end if is_set(person.link) and person.link ~= control.page_name then one = "[[" .. person.link .. "|" .. one .. "]]" -- link author/editor if this page is not the author's/editor's page end end table.insert( text, one ) table.insert( text, sep_one ) end end local count = #text / 2; -- (number of names + number of separators) divided by 2 if count > 0 then if count > 1 and is_set(lastauthoramp) and not etal then text[#text-2] = " & "; -- replace last separator with ampersand text end text[#text] = nil; -- erase the last separator end local result = table.concat(text) -- construct list if etal and is_set (result) then -- etal may be set by |display-authors=etal but we might not have a last-first list result = result .. sep .. ' ' .. cfg.messages['et al']; -- we've go a last-first list and etal so add et al. end return result, count end --[[--------------------------< A N C H O R _ I D >------------------------------------------------------------ Generates a CITEREF anchor ID if we have at least one name or a date. Otherwise returns an empty string. namelist is one of the contributor-, author-, or editor-name lists chosen in that order. year is Year or anchor_year. ]] local function anchor_id (namelist, year) local names={}; -- a table for the one to four names and year for i,v in ipairs (namelist) do -- loop through the list and take up to the first four last names names[i] = v.last if i == 4 then break end -- if four then done end table.insert (names, year); -- add the year at the end local id = table.concat(names); -- concatenate names and year for CITEREF id if is_set (id) then -- if concatenation is not an empty string return "CITEREF" .. id; -- add the CITEREF portion else return ''; -- return an empty string; no reason to include CITEREF id in this citation end end --[[--------------------------< N A M E _ H A S _ E T A L >---------------------------------------------------- Evaluates the content of author and editor name parameters for variations on the theme of et al. If found, the et al. is removed, a flag is set to true and the function returns the modified name and the flag. This function never sets the flag to false but returns it's previous state because it may have been set by previous passes through this function or by the parameters |display-authors=etal or |display-editors=etal ]] local function name_has_etal (name, etal, nocat) if is_set (name) then -- name can be nil in which case just return local etal_pattern = "[;,]? *[\"']*%f[%a][Ee][Tt] *[Aa][Ll][%.\"']*$" -- variations on the 'et al' theme local others_pattern = "[;,]? *%f[%a]and [Oo]thers"; -- and alternate to et al. if name:match (etal_pattern) then -- variants on et al. name = name:gsub (etal_pattern, ''); -- if found, remove etal = true; -- set flag (may have been set previously here or by |display-authors=etal) if not nocat then -- no categorization for |vauthors= add_maint_cat ('etal'); -- and add a category if not already added end elseif name:match (others_pattern) then -- if not 'et al.', then 'and others'? name = name:gsub (others_pattern, ''); -- if found, remove etal = true; -- set flag (may have been set previously here or by |display-authors=etal) if not nocat then -- no categorization for |vauthors= add_maint_cat ('etal'); -- and add a category if not already added end end end return name, etal; -- end --[[--------------------------< E X T R A C T _ N A M E S >---------------------------------------------------- Gets name list from the input arguments Searches through args in sequential order to find |lastn= and |firstn= parameters (or their aliases), and their matching link and mask parameters. Stops searching when both |lastn= and |firstn= are not found in args after two sequential attempts: found |last1=, |last2=, and |last3= but doesn't find |last4= and |last5= then the search is done. This function emits an error message when there is a |firstn= without a matching |lastn=. When there are 'holes' in the list of last names, |last1= and |last3= are present but |last2= is missing, an error message is emitted. |lastn= is not required to have a matching |firstn=. When an author or editor parameter contains some form of 'et al.', the 'et al.' is stripped from the parameter and a flag (etal) returned that will cause list_people() to add the static 'et al.' text from Module:Citation/CS1/Configuration. This keeps 'et al.' out of the template's metadata. When this occurs, the page is added to a maintenance category. ]] local function extract_names(args, list_name) local names = {}; -- table of names local last; -- individual name components local first; local link; local mask; local i = 1; -- loop counter/indexer local n = 1; -- output table indexer local count = 0; -- used to count the number of times we haven't found a |last= (or alias for authors, |editor-last or alias for editors) local etal=false; -- return value set to true when we find some form of et al. in an author parameter local err_msg_list_name = list_name:match ("(%w+)List") .. 's list'; -- modify AuthorList or EditorList for use in error messages if necessary while true do last = select_one( args, cfg.aliases[list_name .. '-Last'], 'redundant_parameters', i ); -- search through args for name components beginning at 1 first = select_one( args, cfg.aliases[list_name .. '-First'], 'redundant_parameters', i ); link = select_one( args, cfg.aliases[list_name .. '-Link'], 'redundant_parameters', i ); mask = select_one( args, cfg.aliases[list_name .. '-Mask'], 'redundant_parameters', i ); last, etal = name_has_etal (last, etal, false); -- find and remove variations on et al. first, etal = name_has_etal (first, etal, false); -- find and remove variations on et al. if first and not last then -- if there is a firstn without a matching lastn table.insert( z.message_tail, { set_error( 'first_missing_last', {err_msg_list_name, i}, true ) } ); -- add this error message elseif not first and not last then -- if both firstn and lastn aren't found, are we done? count = count + 1; -- number of times we haven't found last and first if 2 <= count then -- two missing names and we give up break; -- normal exit or there is a two-name hole in the list; can't tell which end else -- we have last with or without a first if is_set (link) and false == link_param_ok (link) then -- do this test here in case link is missing last table.insert( z.message_tail, { set_error( 'bad_paramlink', list_name:match ("(%w+)List"):lower() .. '-link' .. i )}); -- url or wikilink in author link; end names[n] = {last = last, first = first, link = link, mask = mask, corporate=false}; -- add this name to our names list (corporate for |vauthors= only) n = n + 1; -- point to next location in the names table if 1 == count then -- if the previous name was missing table.insert( z.message_tail, { set_error( 'missing_name', {err_msg_list_name, i-1}, true ) } ); -- add this error message end count = 0; -- reset the counter, we're looking for two consecutive missing names end i = i + 1; -- point to next args location end return names, etal; -- all done, return our list of names end --[[--------------------------< B U I L D _ I D _ L I S T >-------------------------------------------------------- Populates ID table from arguments using configuration settings. Loops through cfg.id_handlers and searches args for any of the parameters listed in each cfg.id_handlers['...'].parameters. If found, adds the parameter and value to the identifier list. Emits redundant error message is more than one alias exists in args ]] local function extract_ids( args ) local id_list = {}; -- list of identifiers found in args for k, v in pairs( cfg.id_handlers ) do -- k is uc identifier name as index to cfg.id_handlers; e.g. cfg.id_handlers['ISBN'], v is a table v = select_one( args, v.parameters, 'redundant_parameters' ); -- v.parameters is a table of aliases for k; here we pick one from args if present if is_set(v) then id_list[k] = v; end -- if found in args, add identifier to our list end return id_list; end --[[--------------------------< B U I L D _ I D _ L I S T >-------------------------------------------------------- Takes a table of IDs created by extract_ids() and turns it into a table of formatted ID outputs. inputs: id_list – table of identifiers built by extract_ids() options – table of various template parameter values used to modify some manually handled identifiers ]] local function build_id_list( id_list, options ) local new_list, handler = {}; function fallback(k) return { __index = function(t,i) return cfg.id_handlers[k][i] end } end; for k, v in pairs( id_list ) do -- k is uc identifier name as index to cfg.id_handlers; e.g. cfg.id_handlers['ISBN'], v is a table -- fallback to read-only cfg handler = setmetatable( { ['id'] = v }, fallback(k) ); if handler.mode == 'external' then table.insert( new_list, {handler.label, external_link_id( handler ) } ); elseif handler.mode == 'internal' then table.insert( new_list, {handler.label, internal_link_id( handler ) } ); elseif handler.mode ~= 'manual' then error( cfg.messages['unknown_ID_mode'] ); elseif k == 'DOI' then table.insert( new_list, {handler.label, doi( v, options.DoiBroken ) } ); elseif k == 'HDL' then table.insert( new_list, {handler.label, hdl( v ) } ); elseif k == 'ARXIV' then table.insert( new_list, {handler.label, arxiv( v, options.Class ) } ); elseif k == 'ASIN' then table.insert( new_list, {handler.label, amazon( v, options.ASINTLD ) } ); elseif k == 'LCCN' then table.insert( new_list, {handler.label, lccn( v ) } ); elseif k == 'OL' or k == 'OLA' then table.insert( new_list, {handler.label, openlibrary( v ) } ); elseif k == 'PMC' then table.insert( new_list, {handler.label, pmc( v, options.Embargo ) } ); elseif k == 'PMID' then table.insert( new_list, {handler.label, pmid( v ) } ); elseif k == 'ISMN' then table.insert( new_list, {handler.label, ismn( v ) } ); elseif k == 'ISSN' then table.insert( new_list, {handler.label, issn( v ) } ); elseif k == 'EISSN' then table.insert( new_list, {handler.label, issn( v, true ) } ); -- true distinguishes eissn from issn elseif k == 'ISBN' then local ISBN = internal_link_id( handler ); if not check_isbn( v ) and not is_set(options.IgnoreISBN) then ISBN = ISBN .. set_error( 'bad_isbn', {}, false, " ", "" ); end table.insert( new_list, {handler.label, ISBN } ); elseif k == 'USENETID' then table.insert( new_list, {handler.label, message_id( v ) } ); else error( cfg.messages['unknown_manual_ID'] ); end end function comp( a, b ) -- used in following table.sort() return a[1] < b[1]; end table.sort( new_list, comp ); for k, v in ipairs( new_list ) do new_list[k] = v[2]; end return new_list; end --[[--------------------------< C O I N S _ C L E A N U P >---------------------------------------------------- Cleanup parameter values for the metadata by removing or replacing invisible characters and certain html entities. 2015-12-10: there is a bug in mw.text.unstripNoWiki (). It replaced math stripmarkers with the appropriate content when it shouldn't. See https://phabricator.wikimedia.org/T121085 and Wikipedia_talk:Lua#stripmarkers_and_mw.text.unstripNoWiki.28.29 TODO: move the replacement patterns and replacement values into a table in /Configuration similar to the invisible characters table? ]] local function coins_cleanup (value) value = mw.text.unstripNoWiki (value); -- replace nowiki stripmarkers with their content value = value:gsub ('<span class="nowrap" style="padding%-left:0%.1em;">&#39;s</span>', "'s"); -- replace {{'s}} template with simple apostrophe-s value = value:gsub ('&zwj;\226\128\138\039\226\128\139', "'"); -- replace {{'}} with simple apostrophe value = value:gsub ('\226\128\138\039\226\128\139', "'"); -- replace {{'}} with simple apostrophe (as of 2015-12-11) value = value:gsub ('&nbsp;', ' '); -- replace &nbsp; entity with plain space value = value:gsub ('\226\128\138', ' '); -- replace hair space with plain space value = value:gsub ('&zwj;', ''); -- remove &zwj; entities value = value:gsub ('[\226\128\141\226\128\139]', '') -- remove zero-width joiner, zero-width space value = value:gsub ('[\194\173\009\010\013]', ' '); -- replace soft hyphen, horizontal tab, line feed, carriage return with plain space return value; end --[[--------------------------< C O I N S >-------------------------------------------------------------------- COinS metadata (see <http://ocoins.info/>) allows automated tools to parse the citation information. ]] local function COinS(data, class) if 'table' ~= type(data) or nil == next(data) then return ''; end for k, v in pairs (data) do -- spin through all of the metadata parameter values if 'ID_list' ~= k and 'Authors' ~= k then -- except the ID_list and Author tables (author nowiki stripmarker done when Author table processed) data[k] = coins_cleanup (v); end end local ctx_ver = "Z39.88-2004"; -- treat table strictly as an array with only set values. local OCinSoutput = setmetatable( {}, { __newindex = function(self, key, value) if is_set(value) then rawset( self, #self+1, table.concat{ key, '=', mw.uri.encode( remove_wiki_link( value ) ) } ); end end }); if in_array (class, {'arxiv', 'journal', 'news'}) or (in_array (class, {'conference', 'interview', 'map', 'press release', 'web'}) and is_set(data.Periodical)) or ('citation' == class and is_set(data.Periodical) and not is_set (data.Encyclopedia)) then OCinSoutput.rft_val_fmt = "info:ofi/fmt:kev:mtx:journal"; -- journal metadata identifier if 'arxiv' == class then -- set genre according to the type of citation template we are rendering OCinSoutput["rft.genre"] = "preprint"; -- cite arxiv elseif 'conference' == class then OCinSoutput["rft.genre"] = "conference"; -- cite conference (when Periodical set) elseif 'web' == class then OCinSoutput["rft.genre"] = "unknown"; -- cite web (when Periodical set) else OCinSoutput["rft.genre"] = "article"; -- journal and other 'periodical' articles end OCinSoutput["rft.jtitle"] = data.Periodical; -- journal only if is_set (data.Map) then OCinSoutput["rft.atitle"] = data.Map; -- for a map in a periodical else OCinSoutput["rft.atitle"] = data.Title; -- all other 'periodical' article titles end -- these used onlu for periodicals OCinSoutput["rft.ssn"] = data.Season; -- keywords: winter, spring, summer, fall OCinSoutput["rft.chron"] = data.Chron; -- free-form date components OCinSoutput["rft.volume"] = data.Volume; -- does not apply to books OCinSoutput["rft.issue"] = data.Issue; OCinSoutput["rft.pages"] = data.Pages; -- also used in book metadata elseif 'thesis' ~= class then -- all others except cite thesis are treated as 'book' metadata; genre distinguishes OCinSoutput.rft_val_fmt = "info:ofi/fmt:kev:mtx:book"; -- book metadata identifier if 'report' == class or 'techreport' == class then -- cite report and cite techreport OCinSoutput["rft.genre"] = "report"; elseif 'conference' == class then -- cite conference when Periodical not set OCinSoutput["rft.genre"] = "conference"; elseif in_array (class, {'book', 'citation', 'encyclopaedia', 'interview', 'map'}) then if is_set (data.Chapter) then OCinSoutput["rft.genre"] = "bookitem"; OCinSoutput["rft.atitle"] = data.Chapter; -- book chapter, encyclopedia article, interview in a book, or map title else if 'map' == class or 'interview' == class then OCinSoutput["rft.genre"] = 'unknown'; -- standalone map or interview else OCinSoutput["rft.genre"] = 'book'; -- book and encyclopedia end end else --{'audio-visual', 'AV-media-notes', 'DVD-notes', 'episode', 'interview', 'mailinglist', 'map', 'newsgroup', 'podcast', 'press release', 'serial', 'sign', 'speech', 'web'} OCinSoutput["rft.genre"] = "unknown"; end OCinSoutput["rft.btitle"] = data.Title; -- book only OCinSoutput["rft.place"] = data.PublicationPlace; -- book only OCinSoutput["rft.series"] = data.Series; -- book only OCinSoutput["rft.pages"] = data.Pages; -- book, journal OCinSoutput["rft.edition"] = data.Edition; -- book only OCinSoutput["rft.pub"] = data.PublisherName; -- book and dissertation else -- cite thesis OCinSoutput.rft_val_fmt = "info:ofi/fmt:kev:mtx:dissertation"; -- dissertation metadata identifier OCinSoutput["rft.title"] = data.Title; -- dissertation (also patent but that is not yet supported) OCinSoutput["rft.degree"] = data.Degree; -- dissertation only OCinSoutput['rft.inst'] = data.PublisherName; -- book and dissertation end -- and now common parameters (as much as possible) OCinSoutput["rft.date"] = data.Date; -- book, journal, dissertation for k, v in pairs( data.ID_list ) do -- what to do about these? For now assume that they are common to all? if k == 'ISBN' then v = clean_isbn( v ) end local id = cfg.id_handlers[k].COinS; if string.sub( id or "", 1, 4 ) == 'info' then -- for ids that are in the info:registry OCinSoutput["rft_id"] = table.concat{ id, "/", v }; elseif string.sub (id or "", 1, 3 ) == 'rft' then -- for isbn, issn, eissn, etc that have defined COinS keywords OCinSoutput[ id ] = v; elseif id then -- when cfg.id_handlers[k].COinS is not nil OCinSoutput["rft_id"] = table.concat{ cfg.id_handlers[k].prefix, v }; -- others; provide a url end end --[[ for k, v in pairs( data.ID_list ) do -- what to do about these? For now assume that they are common to all? local id, value = cfg.id_handlers[k].COinS; if k == 'ISBN' then value = clean_isbn( v ); else value = v; end if string.sub( id or "", 1, 4 ) == 'info' then OCinSoutput["rft_id"] = table.concat{ id, "/", v }; else OCinSoutput[ id ] = value; end end ]] local last, first; for k, v in ipairs( data.Authors ) do last, first = coins_cleanup (v.last), coins_cleanup (v.first or ''); -- replace any nowiki strip markers, non-printing or invisible characers if k == 1 then -- for the first author name only if is_set(last) and is_set(first) then -- set these COinS values if |first= and |last= specify the first author name OCinSoutput["rft.aulast"] = last; -- book, journal, dissertation OCinSoutput["rft.aufirst"] = first; -- book, journal, dissertation elseif is_set(last) then OCinSoutput["rft.au"] = last; -- book, journal, dissertation -- otherwise use this form for the first name end else -- for all other authors if is_set(last) and is_set(first) then OCinSoutput["rft.au"] = table.concat{ last, ", ", first }; -- book, journal, dissertation elseif is_set(last) then OCinSoutput["rft.au"] = last; -- book, journal, dissertation end end end OCinSoutput.rft_id = data.URL; OCinSoutput.rfr_id = table.concat{ "info:sid/", mw.site.server:match( "[^/]*$" ), ":", data.RawPage }; OCinSoutput = setmetatable( OCinSoutput, nil ); -- sort with version string always first, and combine. table.sort( OCinSoutput ); table.insert( OCinSoutput, 1, "ctx_ver=" .. ctx_ver ); -- such as "Z39.88-2004" return table.concat(OCinSoutput, "&"); end --[[--------------------------< G E T _ I S O 6 3 9 _ C O D E >------------------------------------------------ Validates language names provided in |language= parameter if not an ISO639-1 code. Handles the special case that is Norwegian where ISO639-1 code 'no' is mapped to language name 'Norwegian Bokmål' by Extention:CLDR. Returns the language name and associated ISO639-1 code. Because case of the source may be incorrect or different from the case that Wikimedia uses, the name comparisons are done in lower case and when a match is found, the Wikimedia version (assumed to be correct) is returned along with the code. When there is no match, we return the original language name string. mw.language.fetchLanguageNames() will return a list of languages that aren't part of ISO639-1. Names that aren't ISO639-1 but that are included in the list will be found if that name is provided in the |language= parameter. For example, if |language=Samaritan Aramaic, that name will be found with the associated code 'sam', not an ISO639-1 code. When names are found and the associated code is not two characters, this function returns only the Wikimedia language name. Adapted from code taken from Module:Check ISO 639-1. ]] local function get_iso639_code (lang) if 'norwegian' == lang:lower() then -- special case related to Wikimedia remap of code 'no' at Extension:CLDR return 'Norwegian', 'no'; -- Make sure rendered version is properly capitalized end local languages = mw.language.fetchLanguageNames(mw.getContentLanguage():getCode(), 'all') -- get a list of language names known to Wikimedia -- ('all' is required for North Ndebele, South Ndebele, and Ojibwa) local langlc = mw.ustring.lower(lang); -- lower case version for comparisons for code, name in pairs(languages) do -- scan the list to see if we can find our language if langlc == mw.ustring.lower(name) then if 2 ~= code:len() then -- ISO639-1 codes only return name; -- so return the name but not the code end return name, code; -- found it, return name to ensure proper capitalization and the ISO639-1 code end end return lang; -- not valid language; return language in original case and nil for ISO639-1 code end --[[--------------------------< L A N G U A G E _ P A R A M E T E R >------------------------------------------ Get language name from ISO639-1 code value provided. If a code is valid use the returned name; if not, then use the value that was provided with the language parameter. There is an exception. There are three ISO639-1 codes for Norewegian language variants. There are two official variants: Norwegian Bokmål (code 'nb') and Norwegian Nynorsk (code 'nn'). The third, code 'no', is defined by ISO639-1 as 'Norwegian' though in Norway this is pretty much meaningless. However, it appears that on enwiki, editors are for the most part unaware of the nb and nn variants (compare page counts for these variants at Category:Articles with non-English-language external links. Because Norwegian Bokmål is the most common language variant, Media wiki has been modified to return Norwegian Bokmål for ISO639-1 code 'no'. Here we undo that and return 'Norwegian' when editors use |language=no. We presume that editors don't know about the variants or can't descriminate between them. See Help talk:Citation Style_1#An ISO 639-1 language name test When |language= contains a valid ISO639-1 code, the page is assigned to the category for that code: Category:Norwegian-language sources (no) if the page is a mainspace page and the ISO639-1 code is not 'en'. Similarly, if the parameter is |language=Norwegian, it will be categorized in the same way. This function supports multiple languages in the form |language=nb, French, th where the language names or codes are separated from each other by commas. ]] local function language_parameter (lang) local code; -- the ISO639-1 two character code local name; -- the language name local language_list = {}; -- table of language names to be rendered local names_table = {}; -- table made from the value assigned to |language= names_table = mw.text.split (lang, '%s*,%s*'); -- names should be a comma separated list for _, lang in ipairs (names_table) do -- reuse lang if lang:match ('^%a%a%-') or 2 == lang:len() then -- ISO639-1 language code are 2 characters (fetchLanguageName also supports 3 character codes) if lang:match ('^zh-') then name = mw.language.fetchLanguageName( lang:lower(), lang:lower() ); else name = mw.language.fetchLanguageName( lang:lower(), mw.getContentLanguage():getCode() ); -- get ISO 639-1 language name if Language is a proper code end end if is_set (name) then -- if Language specified a valid ISO639-1 code code = lang:lower(); -- save it else name, code = get_iso639_code (lang); -- attempt to get code from name (assign name here so that we are sure of proper capitalization) end if is_set (code) then if 'no' == code then name = '挪威语' end; -- override wikimedia when code is 'no' if 'zh' ~= code and not code:match ('^zh-') then -- English not the language add_prop_cat ('foreign_lang_source', {name, code}) end else add_maint_cat ('unknown_lang'); -- add maint category if not already added end table.insert (language_list, name); name = ''; -- so we can reuse it end code = #language_list -- reuse code as number of languages in the list if 2 >= code then name = table.concat (language_list, '及') -- insert '及' between two language names elseif 2 < code then language_list[code] = '及' .. language_list[code]; -- prepend last name with '及' name = table.concat (language_list, '、'); -- and concatenate with '<comma><space>' separators name = name:gsub ('、及', '及', 1); end return (" " .. wrap_msg ('language', name)); -- otherwise wrap with '(in ...)' end --[[--------------------------< S E T _ C S 1 _ S T Y L E >---------------------------------------------------- Set style settings for CS1 citation templates. Returns separator and postscript settings ]] local function set_cs1_style (ps) if not is_set (ps) then -- unless explicitely set to something ps = '.'; -- terminate the rendered citation with a period end return '.', ps; -- separator is a full stop end --[[--------------------------< S E T _ C S 2 _ S T Y L E >---------------------------------------------------- Set style settings for CS2 citation templates. Returns separator, postscript, ref settings ]] local function set_cs2_style (ps, ref) if not is_set (ps) then -- if |postscript= has not been set, set cs2 default ps = ''; -- make sure it isn't nil end if not is_set (ref) then -- if |ref= is not set ref = "harv"; -- set default |ref=harv end return ',', ps, ref; -- separator is a comma end --[[--------------------------< G E T _ S E T T I N G S _ F R O M _ C I T E _ C L A S S >---------------------- When |mode= is not set or when its value is invalid, use config.CitationClass and parameter values to establish rendered style. ]] local function get_settings_from_cite_class (ps, ref, cite_class) local sep; if (cite_class == "citation") then -- for citation templates (CS2) sep, ps, ref = set_cs2_style (ps, ref); else -- not a citation template so CS1 sep, ps = set_cs1_style (ps); end return sep, ps, ref -- return them all end --[[--------------------------< S E T _ S T Y L E >------------------------------------------------------------ Establish basic style settings to be used when rendering the citation. Uses |mode= if set and valid or uses config.CitationClass from the template's #invoke: to establish style. ]] local function set_style (mode, ps, ref, cite_class) local sep; if 'cs2' == mode then -- if this template is to be rendered in CS2 (citation) style sep, ps, ref = set_cs2_style (ps, ref); elseif 'cs1' == mode then -- if this template is to be rendered in CS1 (cite xxx) style sep, ps = set_cs1_style (ps); else -- anything but cs1 or cs2 sep, ps, ref = get_settings_from_cite_class (ps, ref, cite_class); -- get settings based on the template's CitationClass end if 'none' == ps:lower() then -- if assigned value is 'none' then ps = ''; -- set to empty string end return sep, ps, ref end --[=[-------------------------< I S _ P D F >------------------------------------------------------------------ Determines if a url has the file extension that is one of the pdf file extensions used by [[MediaWiki:Common.css]] when applying the pdf icon to external links. returns true if file extension is one of the recognized extension, else false ]=] local function is_pdf (url) return url:match ('%.pdf[%?#]?') or url:match ('%.PDF[%?#]?'); end --[[--------------------------< S T Y L E _ F O R M A T >------------------------------------------------------ Applies css style to |format=, |chapter-format=, etc. Also emits an error message if the format parameter does not have a matching url parameter. If the format parameter is not set and the url contains a file extension that is recognized as a pdf document by MediaWiki's commons.css, this code will set the format parameter to (PDF) with the appropriate styling. ]] local function style_format (format, url, fmt_param, url_param) if is_set (format) then format = wrap_style ('format', format); -- add leading space, parenthases, resize if not is_set (url) then format = format .. set_error( 'format_missing_url', {fmt_param, url_param} ); -- add an error message end elseif is_pdf (url) then -- format is not set so if url is a pdf file then format = wrap_style ('format', 'PDF'); -- set format to pdf else format = ''; -- empty string for concatenation end return format; end --[[--------------------------< G E T _ D I S P L A Y _ A U T H O R S _ E D I T O R S >------------------------ Returns a number that may or may not limit the length of the author or editor name lists. When the value assigned to |display-authors= is a number greater than or equal to zero, return the number and the previous state of the 'etal' flag (false by default but may have been set to true if the name list contains some variant of the text 'et al.'). When the value assigned to |display-authors= is the keyword 'etal', return a number that is one greater than the number of authors in the list and set the 'etal' flag true. This will cause the list_people() to display all of the names in the name list followed by 'et al.' In all other cases, returns nil and the previous state of the 'etal' flag. ]] local function get_display_authors_editors (max, count, list_name, etal) if is_set (max) then if 'etal' == max:lower():gsub("[ '%.]", '') then -- the :gsub() portion makes 'etal' from a variety of 'et al.' spellings and stylings max = count + 1; -- number of authors + 1 so display all author name plus et al. etal = true; -- overrides value set by extract_names() elseif max:match ('^%d+$') then -- if is a string of numbers max = tonumber (max); -- make it a number if max >= count and 'authors' == list_name then -- AUTHORS ONLY -- if |display-xxxxors= value greater than or equal to number of authors/editors add_maint_cat ('disp_auth_ed', list_name); end else -- not a valid keyword or number table.insert( z.message_tail, { set_error( 'invalid_param_val', {'display-' .. list_name, max}, true ) } ); -- add error message max = nil; -- unset end elseif 'authors' == list_name then -- AUTHORS ONLY need to clear implicit et al category max = count + 1; -- number of authors + 1 end return max, etal; end --[[--------------------------< E X T R A _ T E X T _ I N _ P A G E _ C H E C K >------------------------------ Adds page to Category:CS1 maint: extra text if |page= or |pages= has what appears to be some form of p. or pp. abbreviation in the first characters of the parameter content. check Page and Pages for extraneous p, p., pp, and pp. at start of parameter value: good pattern: '^P[^%.P%l]' matches when |page(s)= begins PX or P# but not Px where x and X are letters and # is a dgiit bad pattern: '^[Pp][Pp]' matches matches when |page(s)= begins pp or pP or Pp or PP ]] local function extra_text_in_page_check (page) -- local good_pattern = '^P[^%.P%l]'; local good_pattern = '^P[^%.Pp]'; -- ok to begin with uppercase P: P7 (pg 7 of section P) but not p123 (page 123) TODO: add Gg for PG or Pg? -- local bad_pattern = '^[Pp][Pp]'; local bad_pattern = '^[Pp]?[Pp]%.?[ %d]'; if not page:match (good_pattern) and (page:match (bad_pattern) or page:match ('^[Pp]ages?')) then add_maint_cat ('extra_text'); end -- if Page:match ('^[Pp]?[Pp]%.?[ %d]') or Page:match ('^[Pp]ages?[ %d]') or -- Pages:match ('^[Pp]?[Pp]%.?[ %d]') or Pages:match ('^[Pp]ages?[ %d]') then -- add_maint_cat ('extra_text'); -- end end --[[--------------------------< P A R S E _ V A U T H O R S _ V E D I T O R S >-------------------------------- This function extracts author / editor names from |vauthors= or |veditors= and finds matching |xxxxor-maskn= and |xxxxor-linkn= in args. It then returns a table of assembled names just as extract_names() does. Author / editor names in |vauthors= or |veditors= must be in Vancouver system style. Corporate or institutional names may sometimes be required and because such names will often fail the is_good_vanc_name() and other format compliance tests, are wrapped in doubled paranethese ((corporate name)) to suppress the format tests. This function sets the vancouver error when a reqired comma is missing and when there is a space between an author's initials. ]] local function parse_vauthors_veditors (args, vparam, list_name) local names = {}; -- table of names assembled from |vauthors=, |author-maskn=, |author-linkn= local v_name_table = {}; local etal = false; -- return value set to true when we find some form of et al. vauthors parameter local last, first, link, mask; local corporate = false; vparam, etal = name_has_etal (vparam, etal, true); -- find and remove variations on et al. do not categorize (do it here because et al. might have a period) if vparam:find ('%[%[') or vparam:find ('%]%]') then -- no wikilinking vauthors names add_vanc_error (); end v_name_table = mw.text.split(vparam, "%s*,%s*") -- names are separated by commas for i, v_name in ipairs(v_name_table) do if v_name:match ('^%(%(.+%)%)$') then -- corporate authors are wrapped in doubled parenthese to supress vanc formatting and error detection first = ''; -- set to empty string for concatenation and because it may have been set for previous author/editor last = v_name:match ('^%(%((.+)%)%)$') corporate = true; elseif string.find(v_name, "%s") then lastfirstTable = {} lastfirstTable = mw.text.split(v_name, "%s") first = table.remove(lastfirstTable); -- removes and returns value of last element in table which should be author intials last = table.concat(lastfirstTable, " ") -- returns a string that is the concatenation of all other names that are not initials if mw.ustring.match (last, '%a+%s+%u+%s+%a+') or mw.ustring.match (v_name, ' %u %u$') then add_vanc_error (); -- matches last II last; the case when a comma is missing or a space between two intiials end else first = ''; -- set to empty string for concatenation and because it may have been set for previous author/editor last = v_name; -- last name or single corporate name? Doesn't support multiword corporate names? do we need this? end if is_set (first) and not mw.ustring.match (first, "^%u?%u$") then -- first shall contain one or two upper-case letters, nothing else add_vanc_error (); end -- this from extract_names () link = select_one( args, cfg.aliases[list_name .. '-Link'], 'redundant_parameters', i ); mask = select_one( args, cfg.aliases[list_name .. '-Mask'], 'redundant_parameters', i ); names[i] = {last = last, first = first, link = link, mask = mask, corporate=corporate}; -- add this assembled name to our names list end return names, etal; -- all done, return our list of names end --[[--------------------------< S E L E C T _ A U T H O R _ E D I T O R _ S O U R C E >------------------------ Select one of |authors=, |authorn= / |lastn / firstn=, or |vauthors= as the source of the author name list or select one of |editors=, |editorn= / editor-lastn= / |editor-firstn= or |veditors= as the source of the editor name list. Only one of these appropriate three will be used. The hierarchy is: |authorn= (and aliases) highest and |authors= lowest and similarly, |editorn= (and aliases) highest and |editors= lowest When looking for |authorn= / |editorn= parameters, test |xxxxor1= and |xxxxor2= (and all of their aliases); stops after the second test which mimicks the test used in extract_names() when looking for a hole in the author name list. There may be a better way to do this, I just haven't discovered what that way is. Emits an error message when more than one xxxxor name source is provided. In this function, vxxxxors = vauthors or veditors; xxxxors = authors or editors as appropriate. ]] local function select_author_editor_source (vxxxxors, xxxxors, args, list_name) local lastfirst = false; if select_one( args, cfg.aliases[list_name .. '-Last'], 'none', 1 ) or -- do this twice incase we have a first 1 without a last1 select_one( args, cfg.aliases[list_name .. '-Last'], 'none', 2 ) then lastfirst=true; end if (is_set (vxxxxors) and true == lastfirst) or -- these are the three error conditions (is_set (vxxxxors) and is_set (xxxxors)) or (true == lastfirst and is_set (xxxxors)) then local err_name; if 'AuthorList' == list_name then -- figure out which name should be used in error message err_name = 'author'; else err_name = 'editor'; end table.insert( z.message_tail, { set_error( 'redundant_parameters', {err_name .. '-name-list parameters'}, true ) } ); -- add error message end if true == lastfirst then return 1 end; -- return a number indicating which author name source to use if is_set (vxxxxors) then return 2 end; if is_set (xxxxors) then return 3 end; return 1; -- no authors so return 1; this allows missing author name test to run in case there is a first without last end --[[--------------------------< I S _ V A L I D _ P A R A M E T E R _ V A L U E >------------------------------ This function is used to validate a parameter's assigned value for those parameters that have only a limited number of allowable values (yes, y, true, no, etc). When the parameter value has not been assigned a value (missing or empty in the source template) the function refurns true. If the parameter value is one of the list of allowed values returns true; else, emits an error message and returns false. ]] local function is_valid_parameter_value (value, name, possible) if not is_set (value) then return true; -- an empty parameter is ok elseif in_array(value:lower(), possible) then return true; else table.insert( z.message_tail, { set_error( 'invalid_param_val', {name, value}, true ) } ); -- not an allowed value so add error message return false end end --[[--------------------------< T E R M I N A T E _ N A M E _ L I S T >---------------------------------------- This function terminates a name list (author, contributor, editor) with a separator character (sepc) and a space when the last character is not a sepc character or when the last three characters are not sepc followed by two closing square brackets (close of a wikilink). When either of these is true, the name_list is terminated with a single space character. ]] local function terminate_name_list (name_list, sepc) if (string.sub (name_list,-1,-1) == sepc) or (string.sub (name_list,-3,-1) == sepc .. ']]') then -- if last name in list ends with sepc char return name_list .. " "; -- don't add another else return name_list .. sepc .. ' '; -- otherwise terninate the name list end end --[[-------------------------< F O R M A T _ V O L U M E _ I S S U E >---------------------------------------- returns the concatenation of the formatted volume and issue parameters as a single string; or formatted volume or formatted issue, or an empty string if neither are set. ]] local function format_volume_issue (volume, issue, cite_class, origin, sepc, lower) if not is_set (volume) and not is_set (issue) then return ''; end if 'magazine' == cite_class or (in_array (cite_class, {'citation', 'map'}) and 'magazine' == origin) then if is_set (volume) and is_set (issue) then return wrap_msg ('vol-no', {sepc, volume, issue}, lower); elseif is_set (volume) then return wrap_msg ('vol', {sepc, volume}, lower); else return wrap_msg ('issue', {sepc, issue}, lower); end end local vol = ''; if is_set (volume) then if (6 < mw.ustring.len(volume)) then vol = substitute (cfg.messages['j-vol'], {sepc, volume}); else vol = wrap_style ('vol-bold', hyphen_to_dash(volume)); end end if is_set (issue) then return vol .. substitute (cfg.messages['j-issue'], issue); end return vol; end --[[-------------------------< F O R M A T _ P A G E S _ S H E E T S >----------------------------------------- adds static text to one of |page(s)= or |sheet(s)= values and returns it with all of the others set to empty strings. The return order is: page, pages, sheet, sheets Singular has priority over plural when both are provided. ]] local function format_pages_sheets (page, pages, sheet, sheets, cite_class, origin, sepc, nopp, lower) if 'map' == cite_class then -- only cite map supports sheet(s) as in-source locators if is_set (sheet) then if 'journal' == origin then return '', '', wrap_msg ('j-sheet', sheet, lower), ''; else return '', '', wrap_msg ('sheet', {sepc, sheet}, lower), ''; end elseif is_set (sheets) then if 'journal' == origin then return '', '', '', wrap_msg ('j-sheets', sheets, lower); else return '', '', '', wrap_msg ('sheets', {sepc, sheets}, lower); end end end local is_journal = 'journal' == cite_class or (in_array (cite_class, {'citation', 'map'}) and 'journal' == origin); if is_set (page) then if is_journal then return substitute (cfg.messages['j-page(s)'], page), '', '', ''; elseif not nopp then return substitute (cfg.messages['p-prefix'], {sepc, page}), '', '', ''; else return substitute (cfg.messages['nopp'], {sepc, page}), '', '', ''; end elseif is_set(pages) then if is_journal then return substitute (cfg.messages['j-page(s)'], pages), '', '', ''; elseif tonumber(pages) ~= nil and not nopp then -- if pages is only digits, assume a single page number return '', substitute (cfg.messages['p-prefix'], {sepc, pages}), '', ''; elseif not nopp then return '', substitute (cfg.messages['pp-prefix'], {sepc, pages}), '', ''; else return '', substitute (cfg.messages['nopp'], {sepc, pages}), '', ''; end end return '', '', '', ''; -- return empty strings end --[[--------------------------< C I T A T I O N 0 >------------------------------------------------------------ This is the main function doing the majority of the citation formatting. ]] local function citation0( config, args) --[[ Load Input Parameters The argument_wrapper facilitates the mapping of multiple aliases to single internal variable. ]] local A = argument_wrapper( args ); local i -- Pick out the relevant fields from the arguments. Different citation templates -- define different field names for the same underlying things. local author_etal; local a = {}; -- authors list from |lastn= / |firstn= pairs or |vauthors= local Authors; local NameListFormat = A['NameListFormat']; do -- to limit scope of selected local selected = select_author_editor_source (A['Vauthors'], A['Authors'], args, 'AuthorList'); if 1 == selected then a, author_etal = extract_names (args, 'AuthorList'); -- fetch author list from |authorn= / |lastn= / |firstn=, |author-linkn=, and |author-maskn= elseif 2 == selected then NameListFormat = 'vanc'; -- override whatever |name-list-format= might be a, author_etal = parse_vauthors_veditors (args, args.vauthors, 'AuthorList'); -- fetch author list from |vauthors=, |author-linkn=, and |author-maskn= elseif 3 == selected then Authors = A['Authors']; -- use content of |authors= end end local Coauthors = A['Coauthors']; local Others = A['Others']; local editor_etal; local e = {}; -- editors list from |editor-lastn= / |editor-firstn= pairs or |veditors= local Editors; do -- to limit scope of selected local selected = select_author_editor_source (A['Veditors'], A['Editors'], args, 'EditorList'); if 1 == selected then e, editor_etal = extract_names (args, 'EditorList'); -- fetch editor list from |editorn= / |editor-lastn= / |editor-firstn=, |editor-linkn=, and |editor-maskn= elseif 2 == selected then NameListFormat = 'vanc'; -- override whatever |name-list-format= might be e, editor_etal = parse_vauthors_veditors (args, args.veditors, 'EditorList'); -- fetch editor list from |veditors=, |editor-linkn=, and |editor-maskn= elseif 3 == selected then Editors = A['Editors']; -- use content of |editors= end end local t = {}; -- translators list from |translator-lastn= / translator-firstn= pairs local Translators; -- assembled translators name list t = extract_names (args, 'TranslatorList'); -- fetch translator list from |translatorn= / |translator-lastn=, -firstn=, -linkn=, -maskn= local c = {}; -- contributors list from |contributor-lastn= / contributor-firstn= pairs local Contributors; -- assembled contributors name list local Contribution = A['Contribution']; if in_array(config.CitationClass, {"book","citation"}) and not is_set(A['Periodical']) then -- |contributor= and |contribution= only supported in book cites c = extract_names (args, 'ContributorList'); -- fetch contributor list from |contributorn= / |contributor-lastn=, -firstn=, -linkn=, -maskn= if 0 < #c then if not is_set (Contribution) then -- |contributor= requires |contribution= table.insert( z.message_tail, { set_error( 'contributor_missing_required_param', 'contribution')}); -- add missing contribution error message c = {}; -- blank the contributors' table; it is used as a flag later end if 0 == #a then -- |contributor= requires |author= table.insert( z.message_tail, { set_error( 'contributor_missing_required_param', 'author')}); -- add missing author error message c = {}; -- blank the contributors' table; it is used as a flag later end end else -- if not a book cite if select_one (args, cfg.aliases['ContributorList-Last'], 'redundant_parameters', 1 ) then -- are there contributor name list parameters? table.insert( z.message_tail, { set_error( 'contributor_ignored')}); -- add contributor ignored error message end Contribution = nil; -- unset end if not is_valid_parameter_value (NameListFormat, 'name-list-format', cfg.keywords['name-list-format']) then -- only accepted value for this parameter is 'vanc' NameListFormat = ''; -- anything else, set to empty string end local Year = A['Year']; local PublicationDate = A['PublicationDate']; local OrigYear = A['OrigYear']; local Date = A['Date']; local LayDate = A['LayDate']; ------------------------------------------------- Get title data local Title = A['Title']; local ScriptTitle = A['ScriptTitle']; local BookTitle = A['BookTitle']; local Conference = A['Conference']; local TransTitle = A['TransTitle']; local TitleNote = A['TitleNote']; local TitleLink = A['TitleLink']; if is_set (TitleLink) and false == link_param_ok (TitleLink) then table.insert( z.message_tail, { set_error( 'bad_paramlink', A:ORIGIN('TitleLink'))}); -- url or wikilink in |title-link=; end local Chapter = A['Chapter']; local ScriptChapter = A['ScriptChapter']; local ChapterLink -- = A['ChapterLink']; -- deprecated as a parameter but still used internally by cite episode local TransChapter = A['TransChapter']; local TitleType = A['TitleType']; local Degree = A['Degree']; local Docket = A['Docket']; local ArchiveFormat = A['ArchiveFormat']; local ArchiveURL = A['ArchiveURL']; local URL = A['URL'] local URLorigin = A:ORIGIN('URL'); -- get name of parameter that holds URL local ChapterURL = A['ChapterURL']; local ChapterURLorigin = A:ORIGIN('ChapterURL'); -- get name of parameter that holds ChapterURL local ConferenceFormat = A['ConferenceFormat']; local ConferenceURL = A['ConferenceURL']; local ConferenceURLorigin = A:ORIGIN('ConferenceURL'); -- get name of parameter that holds ConferenceURL local Periodical = A['Periodical']; local Periodical_origin = A:ORIGIN('Periodical'); -- get the name of the periodical parameter local Series = A['Series']; local Volume; local Issue; local Page; local Pages; local At; if in_array (config.CitationClass, cfg.templates_using_volume) and not ('conference' == config.CitationClass and not is_set (Periodical)) then Volume = A['Volume']; end if in_array (config.CitationClass, cfg.templates_using_issue) and not (in_array (config.CitationClass, {'conference', 'map'}) and not is_set (Periodical))then Issue = A['Issue']; end local Position = ''; if not in_array (config.CitationClass, cfg.templates_not_using_page) then Page = A['Page']; Pages = hyphen_to_dash( A['Pages'] ); At = A['At']; end local Edition = A['Edition']; local PublicationPlace = A['PublicationPlace'] local Place = A['Place']; local PublisherName = A['PublisherName']; local RegistrationRequired = A['RegistrationRequired']; if not is_valid_parameter_value (RegistrationRequired, 'registration', cfg.keywords ['yes_true_y']) then RegistrationRequired=nil; end local SubscriptionRequired = A['SubscriptionRequired']; if not is_valid_parameter_value (SubscriptionRequired, 'subscription', cfg.keywords ['yes_true_y']) then SubscriptionRequired=nil; end local Via = A['Via']; local AccessDate = A['AccessDate']; local ArchiveDate = A['ArchiveDate']; local Agency = A['Agency']; local DeadURL = A['DeadURL'] if not is_valid_parameter_value (DeadURL, 'dead-url', cfg.keywords ['deadurl']) then -- set in config.defaults to 'yes' DeadURL = ''; -- anything else, set to empty string end local Language = A['Language']; local Format = A['Format']; local ChapterFormat = A['ChapterFormat']; local DoiBroken = A['DoiBroken']; local ID = A['ID']; local ASINTLD = A['ASINTLD']; local IgnoreISBN = A['IgnoreISBN']; if not is_valid_parameter_value (IgnoreISBN, 'ignore-isbn-error', cfg.keywords ['yes_true_y']) then IgnoreISBN = nil; -- anything else, set to empty string end local Embargo = A['Embargo']; local Class = A['Class']; -- arxiv class identifier local ID_list = extract_ids( args ); local Quote = A['Quote']; local LayFormat = A['LayFormat']; local LayURL = A['LayURL']; local LaySource = A['LaySource']; local Transcript = A['Transcript']; local TranscriptFormat = A['TranscriptFormat']; local TranscriptURL = A['TranscriptURL'] local TranscriptURLorigin = A:ORIGIN('TranscriptURL'); -- get name of parameter that holds TranscriptURL local LastAuthorAmp = A['LastAuthorAmp']; if not is_valid_parameter_value (LastAuthorAmp, 'last-author-amp', cfg.keywords ['yes_true_y']) then LastAuthorAmp = nil; -- set to empty string end local no_tracking_cats = A['NoTracking']; if not is_valid_parameter_value (no_tracking_cats, 'no-tracking', cfg.keywords ['yes_true_y']) then no_tracking_cats = nil; -- set to empty string end --these are used by cite interview local Callsign = A['Callsign']; local City = A['City']; local Program = A['Program']; --local variables that are not cs1 parameters local use_lowercase; -- controls capitalization of certain static text local this_page = mw.title.getCurrentTitle(); -- also used for COinS and for language local anchor_year; -- used in the CITEREF identifier local COinS_date = {}; -- holds date info extracted from |date= for the COinS metadata by Module:Date verification -- set default parameter values defined by |mode= parameter. If |mode= is empty or omitted, use CitationClass to set these values local Mode = A['Mode']; if not is_valid_parameter_value (Mode, 'mode', cfg.keywords['mode']) then Mode = ''; end local sepc; -- separator between citation elements for CS1 a period, for CS2, a comma local PostScript; local Ref; sepc, PostScript, Ref = set_style (Mode:lower(), A['PostScript'], A['Ref'], config.CitationClass); use_lowercase = ( sepc == ',' ); -- used to control capitalization for certain static text --check this page to see if it is in one of the namespaces that cs1 is not supposed to add to the error categories if not is_set (no_tracking_cats) then -- ignore if we are already not going to categorize this page if in_array (this_page.nsText, cfg.uncategorized_namespaces) then no_tracking_cats = "true"; -- set no_tracking_cats end for _,v in ipairs (cfg.uncategorized_subpages) do -- cycle through page name patterns if this_page.text:match (v) then -- test page name against each pattern no_tracking_cats = "true"; -- set no_tracking_cats break; -- bail out if one is found end end end -- check for extra |page=, |pages= or |at= parameters. (also sheet and sheets while we're at it) select_one( args, {'page', 'p', 'pp', 'pages', 'at', 'sheet', 'sheets'}, 'redundant_parameters' ); -- this is a dummy call simply to get the error message and category local NoPP = A['NoPP'] if is_set (NoPP) and is_valid_parameter_value (NoPP, 'nopp', cfg.keywords ['yes_true_y']) then NoPP = true; else NoPP = nil; -- unset, used as a flag later end if is_set(Page) then if is_set(Pages) or is_set(At) then Pages = ''; -- unset the others At = ''; end extra_text_in_page_check (Page); -- add this page to maint cat if |page= value begins with what looks like p. or pp. elseif is_set(Pages) then if is_set(At) then At = ''; -- unset end extra_text_in_page_check (Pages); -- add this page to maint cat if |pages= value begins with what looks like p. or pp. end -- both |publication-place= and |place= (|location=) allowed if different if not is_set(PublicationPlace) and is_set(Place) then PublicationPlace = Place; -- promote |place= (|location=) to |publication-place end if PublicationPlace == Place then Place = ''; end -- don't need both if they are the same --[[ Parameter remapping for cite encyclopedia: When the citation has these parameters: |encyclopedia and |title then map |title to |article and |encyclopedia to |title |encyclopedia and |article then map |encyclopedia to |title |encyclopedia then map |encyclopedia to |title |trans_title maps to |trans_chapter when |title is re-mapped |url maps to |chapterurl when |title is remapped All other combinations of |encyclopedia, |title, and |article are not modified ]] local Encyclopedia = A['Encyclopedia']; if ( config.CitationClass == "encyclopaedia" ) or ( config.CitationClass == "citation" and is_set (Encyclopedia)) then -- test code for citation if is_set(Periodical) then -- Periodical is set when |encyclopedia is set if is_set(Title) or is_set (ScriptTitle) then if not is_set(Chapter) then Chapter = Title; -- |encyclopedia and |title are set so map |title to |article and |encyclopedia to |title ScriptChapter = ScriptTitle; TransChapter = TransTitle; ChapterURL = URL; if not is_set (ChapterURL) and is_set (TitleLink) then Chapter= '[[' .. TitleLink .. '|' .. Chapter .. ']]'; end Title = Periodical; ChapterFormat = Format; Periodical = ''; -- redundant so unset TransTitle = ''; URL = ''; Format = ''; TitleLink = ''; ScriptTitle = ''; end else -- |title not set Title = Periodical; -- |encyclopedia set and |article set or not set so map |encyclopedia to |title Periodical = ''; -- redundant so unset end end end -- Special case for cite techreport. if (config.CitationClass == "techreport") then -- special case for cite techreport if is_set(A['Number']) then -- cite techreport uses 'number', which other citations alias to 'issue' if not is_set(ID) then -- can we use ID for the "number"? ID = A['Number']; -- yes, use it else -- ID has a value so emit error message table.insert( z.message_tail, { set_error('redundant_parameters', {wrap_style ('parameter', 'id') .. ' and ' .. wrap_style ('parameter', 'number')}, true )}); end end end -- special case for cite interview if (config.CitationClass == "interview") then if is_set(Program) then ID = ' ' .. Program; end if is_set(Callsign) then if is_set(ID) then ID = ID .. sepc .. ' ' .. Callsign; else ID = ' ' .. Callsign; end end if is_set(City) then if is_set(ID) then ID = ID .. sepc .. ' ' .. City; else ID = ' ' .. City; end end if is_set(Others) then if is_set(TitleType) then Others = ' ' .. TitleType .. ' with ' .. Others; TitleType = ''; else Others = ' ' .. 'Interview with ' .. Others; end else Others = '(Interview)'; end end -- special case for cite mailing list if (config.CitationClass == "mailinglist") then Periodical = A ['MailingList']; elseif 'mailinglist' == A:ORIGIN('Periodical') then Periodical = ''; -- unset because mailing list is only used for cite mailing list end -- Account for the oddity that is {{cite conference}}, before generation of COinS data. if 'conference' == config.CitationClass then if is_set(BookTitle) then Chapter = Title; -- ChapterLink = TitleLink; -- |chapterlink= is deprecated ChapterURL = URL; ChapterURLorigin = URLorigin; URLorigin = ''; ChapterFormat = Format; TransChapter = TransTitle; Title = BookTitle; Format = ''; -- TitleLink = ''; TransTitle = ''; URL = ''; end elseif 'speech' ~= config.CitationClass then Conference = ''; -- not cite conference or cite speech so make sure this is empty string end -- cite map oddities local Cartography = ""; local Scale = ""; local Sheet = A['Sheet'] or ''; local Sheets = A['Sheets'] or ''; if config.CitationClass == "map" then Chapter = A['Map']; ChapterURL = A['MapURL']; TransChapter = A['TransMap']; ChapterURLorigin = A:ORIGIN('MapURL'); ChapterFormat = A['MapFormat']; Cartography = A['Cartography']; if is_set( Cartography ) then Cartography = sepc .. " " .. wrap_msg ('cartography', Cartography, use_lowercase); end Scale = A['Scale']; if is_set( Scale ) then Scale = sepc .. " " .. Scale; end end -- Account for the oddities that are {{cite episode}} and {{cite serial}}, before generation of COinS data. if 'episode' == config.CitationClass or 'serial' == config.CitationClass then local AirDate = A['AirDate']; local SeriesLink = A['SeriesLink']; if is_set (SeriesLink) and false == link_param_ok (SeriesLink) then table.insert( z.message_tail, { set_error( 'bad_paramlink', A:ORIGIN('SeriesLink'))}); end local Network = A['Network']; local Station = A['Station']; local s, n = {}, {}; -- do common parameters first if is_set(Network) then table.insert(n, Network); end if is_set(Station) then table.insert(n, Station); end ID = table.concat(n, sepc .. ' '); if not is_set (Date) and is_set (AirDate) then -- promote airdate to date Date = AirDate; end if 'episode' == config.CitationClass then -- handle the oddities that are strictly {{cite episode}} local Season = A['Season']; local SeriesNumber = A['SeriesNumber']; if is_set (Season) and is_set (SeriesNumber) then -- these are mutually exclusive so if both are set table.insert( z.message_tail, { set_error( 'redundant_parameters', {wrap_style ('parameter', 'season') .. ' and ' .. wrap_style ('parameter', 'seriesno')}, true ) } ); -- add error message SeriesNumber = ''; -- unset; prefer |season= over |seriesno= end -- assemble a table of parts concatenated later into Series if is_set(Season) then table.insert(s, wrap_msg ('season', Season, use_lowercase)); end if is_set(SeriesNumber) then table.insert(s, wrap_msg ('series', SeriesNumber, use_lowercase)); end if is_set(Issue) then table.insert(s, wrap_msg ('episode', Issue, use_lowercase)); end Issue = ''; -- unset because this is not a unique parameter Chapter = Title; -- promote title parameters to chapter ScriptChapter = ScriptTitle; ChapterLink = TitleLink; -- alias episodelink TransChapter = TransTitle; ChapterURL = URL; ChapterURLorigin = A:ORIGIN('URL'); Title = Series; -- promote series to title TitleLink = SeriesLink; Series = table.concat(s, sepc .. ' '); -- this is concatenation of season, seriesno, episode number if is_set (ChapterLink) and not is_set (ChapterURL) then -- link but not URL Chapter = '[[' .. ChapterLink .. '|' .. Chapter .. ']]'; -- ok to wikilink elseif is_set (ChapterLink) and is_set (ChapterURL) then -- if both are set, URL links episode; Series = '[[' .. ChapterLink .. '|' .. Series .. ']]'; -- series links with ChapterLink (episodelink -> TitleLink -> ChapterLink) ugly end URL = ''; -- unset TransTitle = ''; ScriptTitle = ''; else -- now oddities that are cite serial Issue = ''; -- unset because this parameter no longer supported by the citation/core version of cite serial Chapter = A['Episode']; -- TODO: make |episode= available to cite episode someday? if is_set (Series) and is_set (SeriesLink) then Series = '[[' .. SeriesLink .. '|' .. Series .. ']]'; end Series = wrap_style ('italic-title', Series); -- series is italicized end end -- end of {{cite episode}} stuff -- Account for the oddities that are {{cite arxiv}}, before generation of COinS data. if 'arxiv' == config.CitationClass then if not is_set (ID_list['ARXIV']) then -- |arxiv= or |eprint= required for cite arxiv table.insert( z.message_tail, { set_error( 'arxiv_missing', {}, true ) } ); -- add error message elseif is_set (Series) then -- series is an alias of version ID_list['ARXIV'] = ID_list['ARXIV'] .. Series; -- concatenate version onto the end of the arxiv identifier Series = ''; -- unset deprecated_parameter ('version'); -- deprecated parameter but only for cite arxiv end if first_set ({AccessDate, At, Chapter, Format, Page, Pages, Periodical, PublisherName, URL, -- a crude list of parameters that are not supported by cite arxiv ID_list['ASIN'], ID_list['BIBCODE'], ID_list['DOI'], ID_list['ISBN'], ID_list['ISSN'], ID_list['JFM'], ID_list['JSTOR'], ID_list['LCCN'], ID_list['MR'], ID_list['OCLC'], ID_list['OL'], ID_list['OSTI'], ID_list['PMC'], ID_list['PMID'], ID_list['RFC'], ID_list['SSRN'], ID_list['USENETID'], ID_list['ZBL']},27) then table.insert( z.message_tail, { set_error( 'arxiv_params_not_supported', {}, true ) } ); -- add error message AccessDate= ''; -- set these to empty string; not supported in cite arXiv PublisherName = ''; -- (if the article has been published, use cite journal, or other) Chapter = ''; URL = ''; Format = ''; Page = ''; Pages = ''; At = ''; end Periodical = 'arXiv'; -- set to arXiv for COinS; after that, must be set to empty string end -- handle type parameter for those CS1 citations that have default values if in_array(config.CitationClass, {"AV-media-notes", "DVD-notes", "mailinglist", "map", "podcast", "pressrelease", "report", "techreport", "thesis"}) then TitleType = set_titletype (config.CitationClass, TitleType); if is_set(Degree) and "Thesis" == TitleType then -- special case for cite thesis TitleType = Degree .. "论文"; end end if is_set(TitleType) then -- if type parameter is specified TitleType = substitute( cfg.messages['type'], TitleType); -- display it in parentheses end -- legacy: promote concatenation of |month=, and |year= to Date if Date not set; or, promote PublicationDate to Date if neither Date nor Year are set. if not is_set (Date) then Date = Year; -- promote Year to Date Year = nil; -- make nil so Year as empty string isn't used for CITEREF if not is_set (Date) and is_set(PublicationDate) then -- use PublicationDate when |date= and |year= are not set Date = PublicationDate; -- promote PublicationDate to Date PublicationDate = ''; -- unset, no longer needed end end if PublicationDate == Date then PublicationDate = ''; end -- if PublicationDate is same as Date, don't display in rendered citation --[[ Go test all of the date-holding parameters for valid MOS:DATE format and make sure that dates are real dates. This must be done before we do COinS because here is where we get the date used in the metadata. Date validation supporting code is in Module:Citation/CS1/Date_validation ]] do -- create defined block to contain local variables error_message and mismatch local error_message = ''; -- AirDate has been promoted to Date so not necessary to check it anchor_year, error_message = dates({['access-date']=AccessDate, ['archive-date']=ArchiveDate, ['date']=Date, ['doi-broken-date']=DoiBroken, ['embargo']=Embargo, ['lay-date']=LayDate, ['publication-date']=PublicationDate, ['year']=Year}, COinS_date); if is_set (Year) and is_set (Date) then -- both |date= and |year= not normally needed; local mismatch = year_date_check (Year, Date) if 0 == mismatch then -- |year= does not match a year-value in |date= if is_set (error_message) then -- if there is already an error message error_message = error_message .. ', '; -- tack on this additional message end error_message = error_message .. '&#124;year= / &#124;date= mismatch'; elseif 1 == mismatch then -- |year= matches year-value in |date= add_maint_cat ('date_year'); end end if is_set(error_message) then table.insert( z.message_tail, { set_error( 'bad_date', {error_message}, true ) } ); -- add this error message end end -- end of do -- Account for the oddity that is {{cite journal}} with |pmc= set and |url= not set. Do this after date check but before COInS. -- Here we unset Embargo if PMC not embargoed (|embargo= not set in the citation) or if the embargo time has expired. Otherwise, holds embargo date Embargo = is_embargoed (Embargo); -- if config.CitationClass == "journal" and not is_set(URL) and is_set(ID_list['PMC']) then if not is_set (Embargo) then -- if not embargoed or embargo has expired URL=cfg.id_handlers['PMC'].prefix .. ID_list['PMC']; -- set url to be the same as the PMC external link if not embargoed URLorigin = cfg.id_handlers['PMC'].parameters[1]; -- set URLorigin to parameter name for use in error message if citation is missing a |title= end end -- At this point fields may be nil if they weren't specified in the template use. We can use that fact. -- Test if citation has no title if not is_set(Title) and not is_set(TransTitle) and not is_set(ScriptTitle) then if 'episode' == config.CitationClass then -- special case for cite episode; TODO: is there a better way to do this? table.insert( z.message_tail, { set_error( 'citation_missing_title', {'series'}, true ) } ); else table.insert( z.message_tail, { set_error( 'citation_missing_title', {'title'}, true ) } ); end end if 'none' == Title and in_array (config.CitationClass, {'journal', 'citation'}) and is_set (Periodical) and 'journal' == A:ORIGIN('Periodical') then -- special case for journal cites Title = ''; -- set title to empty string add_maint_cat ('untitled'); end check_for_url ({ -- add error message when any of these parameters contains a URL ['title']=Title, [A:ORIGIN('Chapter')]=Chapter, [A:ORIGIN('Periodical')]=Periodical, [A:ORIGIN('PublisherName')] = PublisherName, }); -- COinS metadata (see <http://ocoins.info/>) for automated parsing of citation information. -- handle the oddity that is cite encyclopedia and {{citation |encyclopedia=something}}. Here we presume that -- when Periodical, Title, and Chapter are all set, then Periodical is the book (encyclopedia) title, Title -- is the article title, and Chapter is a section within the article. So, we remap local coins_chapter = Chapter; -- default assuming that remapping not required local coins_title = Title; -- et tu if 'encyclopaedia' == config.CitationClass or ('citation' == config.CitationClass and is_set (Encyclopedia)) then if is_set (Chapter) and is_set (Title) and is_set (Periodical) then -- if all are used then coins_chapter = Title; -- remap coins_title = Periodical; end end local coins_author = a; -- default for coins rft.au if 0 < #c then -- but if contributor list coins_author = c; -- use that instead end -- this is the function call to COinS() local OCinSoutput = COinS({ ['Periodical'] = Periodical, ['Encyclopedia'] = Encyclopedia, ['Chapter'] = make_coins_title (coins_chapter, ScriptChapter), -- Chapter and ScriptChapter stripped of bold / italic wikimarkup ['Map'] = Map, ['Degree'] = Degree; -- cite thesis only ['Title'] = make_coins_title (coins_title, ScriptTitle), -- Title and ScriptTitle stripped of bold / italic wikimarkup ['PublicationPlace'] = PublicationPlace, ['Date'] = COinS_date.rftdate, -- COinS_date has correctly formatted date if Date is valid; ['Season'] = COinS_date.rftssn, ['Chron'] = COinS_date.rftchron or (not COinS_date.rftdate and Date) or '', -- chron but if not set and invalid date format use Date; keep this last bit? ['Series'] = Series, ['Volume'] = Volume, ['Issue'] = Issue, ['Pages'] = get_coins_pages (first_set ({Sheet, Sheets, Page, Pages, At}, 5)), -- pages stripped of external links ['Edition'] = Edition, ['PublisherName'] = PublisherName, ['URL'] = first_set ({ChapterURL, URL}, 2), ['Authors'] = coins_author, ['ID_list'] = ID_list, ['RawPage'] = this_page.prefixedText, }, config.CitationClass); -- Account for the oddities that are {{cite arxiv}}, AFTER generation of COinS data. if 'arxiv' == config.CitationClass then -- we have set rft.jtitle in COinS to arXiv, now unset so it isn't displayed Periodical = ''; -- periodical not allowed in cite arxiv; if article has been published, use cite journal end -- special case for cite newsgroup. Do this after COinS because we are modifying Publishername to include some static text if 'newsgroup' == config.CitationClass then if is_set (PublisherName) then PublisherName = substitute (cfg.messages['newsgroup'], external_link( 'news:' .. PublisherName, PublisherName, A:ORIGIN('PublisherName') )); end end -- Now perform various field substitutions. -- We also add leading spaces and surrounding markup and punctuation to the -- various parts of the citation, but only when they are non-nil. local EditorCount; -- used only for choosing {ed.) or (eds.) annotation at end of editor name-list do local last_first_list; local maximum; local control = { format = NameListFormat, -- empty string or 'vanc' maximum = nil, -- as if display-authors or display-editors not set lastauthoramp = LastAuthorAmp, page_name = this_page.text -- get current page name so that we don't wikilink to it via editorlinkn }; do -- do editor name list first because coauthors can modify control table maximum , editor_etal = get_display_authors_editors (A['DisplayEditors'], #e, 'editors', editor_etal); --[[ Preserve old-style implicit et al. 临时修复"Category:含有旧式缩略标签的引用的页面 in editors"的问题，中文版目前与英文版逻辑不一样，暂时不需要这个分类。等以后更新时再看怎么处理 --2017.6.23 shizhao if not is_set(maximum) and #e == 4 then maximum = 3; table.insert( z.message_tail, { set_error('implict_etal_editor', {}, true) } ); end ]] control.maximum = maximum; last_first_list, EditorCount = list_people(control, e, editor_etal, 'editor'); if is_set (Editors) then if editor_etal then Editors = Editors .. ' ' .. cfg.messages['et al']; -- add et al. to editors parameter beause |display-editors=etal EditorCount = 2; -- with et al., |editors= is multiple names; spoof to display (eds.) annotation else EditorCount = 2; -- we don't know but assume |editors= is multiple names; spoof to display (eds.) annotation end else Editors = last_first_list; -- either an author name list or an empty string end if 1 == EditorCount and (true == editor_etal or 1 < #e) then -- only one editor displayed but includes etal then EditorCount = 2; -- spoof to display (eds.) annotation end end do -- now do translators control.maximum = #t; -- number of translators Translators = list_people(control, t, false, 'translator'); -- et al not currently supported end do -- now do contributors control.maximum = #c; -- number of contributors Contributors = list_people(control, c, false, 'contributor'); -- et al not currently supported end do -- now do authors control.maximum , author_etal = get_display_authors_editors (A['DisplayAuthors'], #a, 'authors', author_etal); if is_set(Coauthors) then -- if the coauthor field is also used, prevent ampersand and et al. formatting. control.lastauthoramp = nil; control.maximum = #a + 1; end last_first_list = list_people(control, a, author_etal, 'author'); if is_set (Authors) then Authors, author_etal = name_has_etal (Authors, author_etal, false); -- find and remove variations on et al. if author_etal then Authors = Authors .. ' ' .. cfg.messages['et al']; -- add et al. to authors parameter end else Authors = last_first_list; -- either an author name list or an empty string end end -- end of do if not is_set(Authors) and is_set(Coauthors) then -- coauthors aren't displayed if one of authors=, authorn=, or lastn= isn't specified table.insert( z.message_tail, { set_error('coauthors_missing_author', {}, true) } ); -- emit error message end end -- apply |[xx-]format= styling; at the end, these parameters hold correctly styled format annotation, -- an error message if the associated url is not set, or an empty string for concatenation ArchiveFormat = style_format (ArchiveFormat, ArchiveURL, 'archive-format', 'archive-url'); ConferenceFormat = style_format (ConferenceFormat, ConferenceURL, 'conference-format', 'conference-url'); Format = style_format (Format, URL, 'format', 'url'); LayFormat = style_format (LayFormat, LayURL, 'lay-format', 'lay-url'); TranscriptFormat = style_format (TranscriptFormat, TranscriptURL, 'transcript-format', 'transcripturl'); -- special case for chapter format so no error message or cat when chapter not supported if not (in_array(config.CitationClass, {'web','news','journal', 'magazine', 'pressrelease','podcast', 'newsgroup', 'arxiv'}) or ('citation' == config.CitationClass and is_set (Periodical) and not is_set (Encyclopedia))) then ChapterFormat = style_format (ChapterFormat, ChapterURL, 'chapter-format', 'chapter-url'); end if not is_set(URL) then --and if in_array(config.CitationClass, {"web","podcast", "mailinglist"}) then -- Test if cite web or cite podcast |url= is missing or empty table.insert( z.message_tail, { set_error( 'cite_web_url', {}, true ) } ); end -- Test if accessdate is given without giving a URL if is_set(AccessDate) and not is_set(ChapterURL)then -- ChapterURL may be set when the others are not set; TODO: move this to a separate test? table.insert( z.message_tail, { set_error( 'accessdate_missing_url', {}, true ) } ); AccessDate = ''; end end local OriginalURL, OriginalURLorigin, OriginalFormat; -- TODO: swap chapter and title here so that archive applies to most specific if both are set? DeadURL = DeadURL:lower(); -- used later when assembling archived text if is_set( ArchiveURL ) then if is_set (URL) then OriginalURL = URL; -- save copy of original source URL OriginalURLorigin = URLorigin; -- name of url parameter for error messages OriginalFormat = Format; -- and original |format= if 'no' ~= DeadURL then -- if URL set then archive-url applies to it URL = ArchiveURL -- swap-in the archive's url URLorigin = A:ORIGIN('ArchiveURL') -- name of archive url parameter for error messages Format = ArchiveFormat or ''; -- swap in archive's format end elseif is_set (ChapterURL) then -- URL not set so if chapter-url is set apply archive url to it OriginalURL = ChapterURL; -- save copy of source chapter's url for archive text OriginalURLorigin = ChapterURLorigin; -- name of chapter-url parameter for error messages OriginalFormat = ChapterFormat; -- and original |format= if 'no' ~= DeadURL then ChapterURL = ArchiveURL -- swap-in the archive's url ChapterURLorigin = A:ORIGIN('ArchiveURL') -- name of archive-url parameter for error messages ChapterFormat = ArchiveFormat or ''; -- swap in archive's format end end end if in_array(config.CitationClass, {'web','news','journal', 'magazine', 'pressrelease','podcast', 'newsgroup', 'arxiv'}) or -- if any of the 'periodical' cites except encyclopedia ('citation' == config.CitationClass and is_set (Periodical) and not is_set (Encyclopedia)) then local chap_param; if is_set (Chapter) then -- get a parameter name from one of these chapter related meta-parameters chap_param = A:ORIGIN ('Chapter') elseif is_set (TransChapter) then chap_param = A:ORIGIN ('TransChapter') elseif is_set (ChapterURL) then chap_param = A:ORIGIN ('ChapterURL') elseif is_set (ScriptChapter) then chap_param = A:ORIGIN ('ScriptChapter') else is_set (ChapterFormat) chap_param = A:ORIGIN ('ChapterFormat') end if is_set (chap_param) then -- if we found one table.insert( z.message_tail, { set_error( 'chapter_ignored', {chap_param}, true ) } ); -- add error message Chapter = ''; -- and set them to empty string to be safe with concatenation TransChapter = ''; ChapterURL = ''; ScriptChapter = ''; ChapterFormat = ''; end else -- otherwise, format chapter / article title local no_quotes = false; -- default assume that we will be quoting the chapter parameter value if is_set (Contribution) and 0 < #c then -- if this is a contribution with contributor(s) if in_array (Contribution:lower(), cfg.keywords.contribution) then -- and a generic contribution title no_quotes = true; -- then render it unquoted end end Chapter = format_chapter_title (ScriptChapter, Chapter, TransChapter, ChapterURL, ChapterURLorigin, no_quotes); -- Contribution is also in Chapter if is_set (Chapter) then if 'map' == config.CitationClass and is_set (TitleType) then Chapter = Chapter .. ' ' .. TitleType; end Chapter = Chapter .. ChapterFormat .. sepc .. ' '; elseif is_set (ChapterFormat) then -- |chapter= not set but |chapter-format= is so ... Chapter = ChapterFormat .. sepc .. ' '; -- ... ChapterFormat has error message, we want to see it end end -- Format main title. if is_set(TitleLink) and is_set(Title) then Title = "[[" .. TitleLink .. "|" .. Title .. "]]" end if in_array(config.CitationClass, {'web','news','journal', 'magazine', 'pressrelease','podcast', 'newsgroup', 'mailinglist', 'arxiv'}) or ('citation' == config.CitationClass and is_set (Periodical) and not is_set (Encyclopedia)) or ('map' == config.CitationClass and is_set (Periodical)) then -- special case for cite map when the map is in a periodical treat as an article Title = kern_quotes (Title); -- if necessary, separate title's leading and trailing quote marks from Module provided quote marks Title = wrap_style ('quoted-title', Title); Title = script_concatenate (Title, ScriptTitle); -- <bdi> tags, lang atribute, categorization, etc; must be done after title is wrapped TransTitle= wrap_style ('trans-quoted-title', TransTitle ); elseif 'report' == config.CitationClass then -- no styling for cite report Title = script_concatenate (Title, ScriptTitle); -- <bdi> tags, lang atribute, categorization, etc; must be done after title is wrapped TransTitle= wrap_style ('trans-quoted-title', TransTitle ); -- for cite report, use this form for trans-title else Title = wrap_style ('italic-title', Title); Title = script_concatenate (Title, ScriptTitle); -- <bdi> tags, lang atribute, categorization, etc; must be done after title is wrapped TransTitle = wrap_style ('trans-italic-title', TransTitle); end TransError = ""; if is_set(TransTitle) then if is_set(Title) then TransTitle = " " .. TransTitle; else TransError = " " .. set_error( 'trans_missing_title', {'title'} ); end end Title = Title .. TransTitle; if is_set(Title) then if not is_set(TitleLink) and is_set(URL) then Title = external_link( URL, Title, URLorigin ) .. TransError .. Format; URL = ""; Format = ""; else Title = Title .. TransError; end end if is_set(Place) then Place = " " .. wrap_msg ('written', Place, use_lowercase) .. sepc .. " "; end if is_set (Conference) then if is_set (ConferenceURL) then Conference = external_link( ConferenceURL, Conference, ConferenceURLorigin ); end Conference = sepc .. " " .. Conference .. ConferenceFormat; elseif is_set(ConferenceURL) then Conference = sepc .. " " .. external_link( ConferenceURL, nil, ConferenceURLorigin ); end if not is_set(Position) then local Minutes = A['Minutes']; local Time = A['Time']; if is_set(Minutes) then if is_set (Time) then table.insert( z.message_tail, { set_error( 'redundant_parameters', {wrap_style ('parameter', 'minutes') .. ' and ' .. wrap_style ('parameter', 'time')}, true ) } ); end Position = " " .. Minutes .. " " .. cfg.messages['minutes']; else if is_set(Time) then local TimeCaption = A['TimeCaption'] if not is_set(TimeCaption) then TimeCaption = cfg.messages['event']; if sepc ~= '.' then TimeCaption = TimeCaption:lower(); end end Position = " " .. TimeCaption .. " " .. Time; end end else Position = " " .. Position; At = ''; end Page, Pages, Sheet, Sheets = format_pages_sheets (Page, Pages, Sheet, Sheets, config.CitationClass, Periodical_origin, sepc, NoPP, use_lowercase); At = is_set(At) and (sepc .. " " .. At) or ""; Position = is_set(Position) and (sepc .. " " .. Position) or ""; if config.CitationClass == 'map' then local Section = A['Section']; local Sections = A['Sections']; local Inset = A['Inset']; if is_set( Inset ) then Inset = sepc .. " " .. wrap_msg ('inset', Inset, use_lowercase); end if is_set( Sections ) then Section = sepc .. " " .. wrap_msg ('sections', Sections, use_lowercase); elseif is_set( Section ) then Section = sepc .. " " .. wrap_msg ('section', Section, use_lowercase); end At = At .. Inset .. Section; end if is_set (Language) then Language = language_parameter (Language); -- format, categories, name from ISO639-1, etc else Language=""; -- language not specified so make sure this is an empty string; end Others = is_set(Others) and (sepc .. " " .. Others) or ""; if is_set (Translators) then Others = sepc .. ' 由' .. Translators .. '翻译 ' .. Others; end TitleNote = is_set(TitleNote) and (sepc .. " " .. TitleNote) or ""; if is_set (Edition) then if Edition:match ('%f[%a][Ee]d%.?$') or Edition:match ('%f[%a][Ee]dition$') then add_maint_cat ('extra_text', 'edition'); end Edition = " " .. wrap_msg ('edition', Edition); else Edition = ''; end Series = is_set(Series) and (sepc .. " " .. Series) or ""; OrigYear = is_set(OrigYear) and (" [" .. OrigYear .. "]") or ""; Agency = is_set(Agency) and (sepc .. " " .. Agency) or ""; Volume = format_volume_issue (Volume, Issue, config.CitationClass, Periodical_origin, sepc, use_lowercase); ------------------------------------ totally unrelated data if is_set(Via) then Via = " " .. wrap_msg ('via', Via); end --[[ Subscription implies paywall; Registration does not. If both are used in a citation, the subscription required link note is displayed. There are no error messages for this condition. ]] if is_set (SubscriptionRequired) then SubscriptionRequired = sepc .. " " .. cfg.messages['subscription']; -- subscription required message elseif is_set (RegistrationRequired) then SubscriptionRequired = sepc .. " " .. cfg.messages['registration']; -- registration required message else SubscriptionRequired = ''; -- either or both might be set to something other than yes true y end if is_set(AccessDate) then local retrv_text = " " .. cfg.messages['retrieved'] AccessDate = nowrap_date (AccessDate); -- wrap in nowrap span if date in appropriate format if (sepc ~= ".") then retrv_text = retrv_text:lower() end -- if 'citation', lower case AccessDate = substitute (retrv_text, AccessDate); -- add retrieved text -- neither of these work; don't know why; it seems that substitute() isn't being called AccessDate = substitute (cfg.presentation['accessdate'], {sepc, AccessDate}); -- allow editors to hide accessdates end if is_set(ID) then ID = sepc .." ".. ID; end if "thesis" == config.CitationClass and is_set(Docket) then ID = sepc .." Docket ".. Docket .. ID; end if "report" == config.CitationClass and is_set(Docket) then -- for cite report when |docket= is set ID = sepc .. ' ' .. Docket; -- overwrite ID even if |id= is set end ID_list = build_id_list( ID_list, {DoiBroken = DoiBroken, ASINTLD = ASINTLD, IgnoreISBN = IgnoreISBN, Embargo=Embargo, Class = Class} ); if is_set(URL) then URL = " " .. external_link( URL, nil, URLorigin ); end if is_set(Quote) then if Quote:sub(1,1) == '"' and Quote:sub(-1,-1) == '"' then -- if first and last characters of quote are quote marks Quote = Quote:sub(2,-2); -- strip them off end Quote = sepc .." " .. wrap_style ('quoted-text', Quote ); -- wrap in <q>...</q> tags PostScript = ""; -- cs1|2 does not supply terminal punctuation when |quote= is set end local Archived if is_set(ArchiveURL) then if not is_set(ArchiveDate) then ArchiveDate = set_error('archive_missing_date'); end if "no" == DeadURL then local arch_text = cfg.messages['archived']; if sepc ~= "." then arch_text = arch_text:lower() end Archived = sepc .. " " .. substitute( cfg.messages['archived-not-dead'], { external_link( ArchiveURL, arch_text, A:ORIGIN('ArchiveURL') ) .. ArchiveFormat, ArchiveDate } ); if not is_set(OriginalURL) then Archived = Archived .. " " .. set_error('archive_missing_url'); end elseif is_set(OriginalURL) then -- DeadURL is empty, 'yes', 'true', 'y', 'unfit', 'usurped' local arch_text = cfg.messages['archived-dead']; if sepc ~= "." then arch_text = arch_text:lower() end if in_array (DeadURL, {'unfit', 'usurped'}) then Archived = sepc .. " " .. '原始内容存档于' .. ArchiveDate; -- format already styled else -- DeadURL is empty, 'yes', 'true', or 'y' Archived = sepc .. " " .. substitute( arch_text, { external_link( OriginalURL, cfg.messages['original'], OriginalURLorigin ) .. OriginalFormat, ArchiveDate } ); -- format already styled end else local arch_text = cfg.messages['archived-missing']; if sepc ~= "." then arch_text = arch_text:lower() end Archived = sepc .. " " .. substitute( arch_text, { set_error('archive_missing_url'), ArchiveDate } ); end elseif is_set (ArchiveFormat) then Archived = ArchiveFormat; -- if set and ArchiveURL not set ArchiveFormat has error message else Archived = "" end local Lay = ''; if is_set(LayURL) then if is_set(LayDate) then LayDate = " (" .. LayDate .. ")" end if is_set(LaySource) then LaySource = " &ndash; ''" .. safe_for_italics(LaySource) .. "''"; else LaySource = ""; end if sepc == '.' then Lay = sepc .. " " .. external_link( LayURL, cfg.messages['lay summary'], A:ORIGIN('LayURL') ) .. LayFormat .. LaySource .. LayDate else Lay = sepc .. " " .. external_link( LayURL, cfg.messages['lay summary']:lower(), A:ORIGIN('LayURL') ) .. LayFormat .. LaySource .. LayDate end elseif is_set (LayFormat) then -- Test if |lay-format= is given without giving a |lay-url= Lay = sepc .. LayFormat; -- if set and LayURL not set, then LayFormat has error message end if is_set(Transcript) then if is_set(TranscriptURL) then Transcript = external_link( TranscriptURL, Transcript, TranscriptURLorigin ); end Transcript = sepc .. ' ' .. Transcript .. TranscriptFormat; elseif is_set(TranscriptURL) then Transcript = external_link( TranscriptURL, nil, TranscriptURLorigin ); end local Publisher; if is_set(Periodical) and not in_array(config.CitationClass, {"encyclopaedia","web","pressrelease","podcast"}) then if is_set(PublisherName) then if is_set(PublicationPlace) then Publisher = PublicationPlace .. ": " .. PublisherName; else Publisher = PublisherName; end elseif is_set(PublicationPlace) then Publisher= PublicationPlace; else Publisher = ""; end if is_set(Publisher) then Publisher = " (" .. Publisher .. ")"; end else if is_set(PublisherName) then if is_set(PublicationPlace) then Publisher = sepc .. " " .. PublicationPlace .. ": " .. PublisherName; else Publisher = sepc .. " " .. PublisherName; end elseif is_set(PublicationPlace) then Publisher= sepc .. " " .. PublicationPlace; else Publisher = ''; end end -- Several of the above rely upon detecting this as nil, so do it last. if is_set(Periodical) then if is_set(Title) or is_set(TitleNote) then Periodical = sepc .. " " .. wrap_style ('italic-title', Periodical) else Periodical = wrap_style ('italic-title', Periodical) end end --[[ Handle the oddity that is cite speech. This code overrides whatever may be the value assigned to TitleNote (through |department=) and forces it to be " (Speech)" so that the annotation directly follows the |title= parameter value in the citation rather than the |event= parameter value (if provided). ]] if "speech" == config.CitationClass then -- cite speech only TitleNote = " (Speech)"; -- annotate the citation if is_set (Periodical) then -- if Periodical, perhaps because of an included |website= or |journal= parameter if is_set (Conference) then -- and if |event= is set Conference = Conference .. sepc .. " "; -- then add appropriate punctuation to the end of the Conference variable before rendering end end end -- Piece all bits together at last. Here, all should be non-nil. -- We build things this way because it is more efficient in LUA -- not to keep reassigning to the same string variable over and over. local tcommon; local tcommon2; -- used for book cite when |contributor= is set if in_array(config.CitationClass, {"journal","citation"}) and is_set(Periodical) then if is_set(Others) then Others = Others .. sepc .. " " end tcommon = safe_join( {Others, Title, TitleNote, Conference, Periodical, Format, TitleType, Series, Edition, Publisher, Agency}, sepc ); elseif in_array(config.CitationClass, {"book","citation"}) and not is_set(Periodical) then -- special cases for book cites if is_set (Contributors) then -- when we are citing foreword, preface, introduction, etc tcommon = safe_join( {Title, TitleNote}, sepc ); -- author and other stuff will come after this and before tcommon2 tcommon2 = safe_join( {Conference, Periodical, Format, TitleType, Series, Volume, Others, Edition, Publisher, Agency}, sepc ); else tcommon = safe_join( {Title, TitleNote, Conference, Periodical, Format, TitleType, Series, Volume, Others, Edition, Publisher, Agency}, sepc ); end elseif 'map' == config.CitationClass then -- special cases for cite map if is_set (Chapter) then -- map in a book; TitleType is part of Chapter tcommon = safe_join( {Title, Format, Edition, Scale, Series, Cartography, Others, Publisher, Volume}, sepc ); elseif is_set (Periodical) then -- map in a periodical tcommon = safe_join( {Title, TitleType, Format, Periodical, Scale, Series, Cartography, Others, Publisher, Volume}, sepc ); else -- a sheet or stand-alone map tcommon = safe_join( {Title, TitleType, Format, Edition, Scale, Series, Cartography, Others, Publisher}, sepc ); end elseif 'episode' == config.CitationClass then -- special case for cite episode tcommon = safe_join( {Title, TitleNote, TitleType, Series, Transcript, Edition, Publisher}, sepc ); else -- all other CS1 templates tcommon = safe_join( {Title, TitleNote, Conference, Periodical, Format, TitleType, Series, Volume, Others, Edition, Publisher, Agency}, sepc ); end if #ID_list > 0 then ID_list = safe_join( { sepc .. " ", table.concat( ID_list, sepc .. " " ), ID }, sepc ); else ID_list = ID; end -- LOCAL local xDate = Date local pgtext = Position .. Sheet .. Sheets .. Page .. Pages .. At; if ( is_set(Periodical) and Date ~= '' and not in_array(config.CitationClass, {"encyclopaedia","web"}) ) or ( in_array(config.CitationClass, {"book","news"}) ) then if in_array(config.CitationClass, {"journal","citation"}) and ( Volume ~= '' or Issue ~= '' ) then xDate = xDate .. ',' .. Volume end xDate = xDate .. pgtext pgtext = '' end if PublicationDate and PublicationDate ~= '' then xDate = xDate .. ' (' .. PublicationDate .. ')' end if OrigYear ~= '' then xDate = xDate .. OrigYear end if AccessDate ~= '' then xDate = xDate .. ' ' .. AccessDate end if xDate ~= '' then xDate = sepc .. ' ' .. xDate end -- END LOCAL local idcommon = safe_join( { URL, xDate, ID_list, Archived, Via, SubscriptionRequired, Lay, Language, Quote }, sepc ); local text; if is_set(Authors) then if is_set(Coauthors) then if 'vanc' == NameListFormat then -- separate authors and coauthors with proper name-list-separator Authors = Authors .. ', ' .. Coauthors; else Authors = Authors .. '; ' .. Coauthors; end end Authors = terminate_name_list (Authors, sepc); -- when no date, terminate with 0 or 1 sepc and a space if is_set(Editors) then local in_text = " "; local post_text = ""; if is_set(Chapter) and 0 == #c then in_text = in_text .. " " .. cfg.messages['in'] if (sepc ~= '.') then in_text = in_text:lower() end -- lowercase for cs2 else if EditorCount <= 1 then post_text = ", " .. cfg.messages['editor']; else post_text = ", " .. cfg.messages['editors']; end end Editors = terminate_name_list (Editors .. in_text .. post_text, sepc); -- terminate with 0 or 1 sepc and a space end if is_set (Contributors) then -- book cite and we're citing the intro, preface, etc local by_text = sepc .. ' ' .. cfg.messages['by'] .. ' '; if (sepc ~= '.') then by_text = by_text:lower() end -- lowercase for cs2 Authors = by_text .. Authors; -- author follows title so tweak it here if is_set (Editors) then -- when Editors make sure that Authors gets terminated Authors = terminate_name_list (Authors, sepc); -- terminate with 0 or 1 sepc and a space end Contributors = terminate_name_list (Contributors, sepc); -- terminate with 0 or 1 sepc and a space text = safe_join( {Contributors, Chapter, tcommon, Authors, Place, Editors, tcommon2, pgtext, idcommon }, sepc ); else text = safe_join( {Authors, Chapter, Place, Editors, tcommon, pgtext, idcommon }, sepc ); end elseif is_set(Editors) then if EditorCount <= 1 then Editors = Editors .. " (" .. cfg.messages['editor'] .. ")" .. sepc .. " " else Editors = Editors .. " (" .. cfg.messages['editors'] .. ")" .. sepc .. " " end text = safe_join( {Editors, Chapter, Place, tcommon, pgtext, idcommon}, sepc ); else if config.CitationClass=="journal" and is_set(Periodical) then text = safe_join( {Chapter, Place, tcommon, pgtext, idcommon}, sepc ); else text = safe_join( {Chapter, Place, tcommon, pgtext, idcommon}, sepc ); end end if is_set(PostScript) and PostScript ~= sepc then text = safe_join( {text, sepc}, sepc ); --Deals with italics, spaces, etc. text = text:sub(1,-sepc:len()-1); end text = safe_join( {text, PostScript}, sepc ); -- Now enclose the whole thing in a <cite/> element local options = {}; if is_set(config.CitationClass) and config.CitationClass ~= "citation" then options.class = config.CitationClass; options.class = "citation " .. config.CitationClass; -- class=citation required for blue highlight when used with |ref= else options.class = "citation"; end if is_set(Ref) and Ref:lower() ~= "none" then -- set reference anchor if appropriate local id = Ref if ('harv' == Ref ) then local namelist = {}; -- holds selected contributor, author, editor name list -- local year = first_set (Year, anchor_year); -- Year first for legacy citations and for YMD dates that require disambiguation local year = first_set ({Year, anchor_year}, 2); -- Year first for legacy citations and for YMD dates that require disambiguation if #c > 0 then -- if there is a contributor list namelist = c; -- select it elseif #a > 0 then -- or an author list namelist = a; elseif #e > 0 then -- or an editor list namelist = e; end id = anchor_id (namelist, year); -- go make the CITEREF anchor end options.id = id; end if string.len(text:gsub("<span[^>/]*>.-</span>", ""):gsub("%b<>","")) <= 2 then z.error_categories = {}; text = set_error('empty_citation'); z.message_tail = {}; end if is_set(options.id) then text = '<cite id="' .. mw.uri.anchorEncode(options.id) ..'" class="' .. mw.text.nowiki(options.class) .. '">' .. text .. "</cite>"; else text = '<cite class="' .. mw.text.nowiki(options.class) .. '">' .. text .. "</cite>"; end local empty_span = '<span style="display:none;">&nbsp;</span>'; -- Note: Using display: none on the COinS span breaks some clients. local OCinS = '<span title="' .. OCinSoutput .. '" class="Z3988">' .. empty_span .. '</span>'; text = text .. OCinS; if #z.message_tail ~= 0 then text = text .. " "; for i,v in ipairs( z.message_tail ) do if is_set(v[1]) then if i == #z.message_tail then text = text .. error_comment( v[1], v[2] ); else text = text .. error_comment( v[1] .. "; ", v[2] ); end end end end if #z.maintenance_cats ~= 0 then text = text .. '<span class="citation-comment" style="display:none; color:#33aa33">'; for _, v in ipairs( z.maintenance_cats ) do -- append maintenance categories text = text .. ' ' .. v .. ' ([[:Category:' .. v ..'|link]])'; end text = text .. '</span>'; -- maintenance mesages (realy just the names of the categories for now) end no_tracking_cats = no_tracking_cats:lower(); if in_array(no_tracking_cats, {"", "no", "false", "n"}) then for _, v in ipairs( z.error_categories ) do text = text .. '[[Category:' .. v ..']]'; end for _, v in ipairs( z.maintenance_cats ) do -- append maintenance categories text = text .. '[[Category:' .. v ..']]'; end for _, v in ipairs( z.properties_cats ) do -- append maintenance categories text = text .. '[[Category:' .. v ..']]'; end end return text end --[[--------------------------< H A S _ I N V I S I B L E _ C H A R S >---------------------------------------- This function searches a parameter's value for nonprintable or invisible characters. The search stops at the first match. Sometime after this module is done with rendering a citation, some C0 control characters are replaced with the replacement character. That replacement character is not detected by this test though it is visible to readers of the rendered citation. This function will detect the replacement character when it is part of the wikisource. Output of this function is an error message that identifies the character or the Unicode group that the character belongs to along with its position in the parameter value. ]] --[[ local function has_invisible_chars (param, v) local position = ''; local i=1; while cfg.invisible_chars[i] do local char=cfg.invisible_chars[i][1] -- the character or group name local pattern=cfg.invisible_chars[i][2] -- the pattern used to find it v = mw.text.unstripNoWiki( v ); -- remove nowiki stripmarkers position = mw.ustring.find (v, pattern) -- see if the parameter value contains characters that match the pattern if position then table.insert( z.message_tail, { set_error( 'invisible_char', {char, wrap_style ('parameter', param), position}, true ) } ); -- add error message return; -- and done with this parameter end i=i+1; -- bump our index end end ]] --[[--------------------------< Z . C I T A T I O N >---------------------------------------------------------- This is used by templates such as {{cite book}} to create the actual citation text. ]] function z.citation(frame) local pframe = frame:getParent() local validation; if nil ~= string.find (frame:getTitle(), 'sandbox', 1, true) then -- did the {{#invoke:}} use sandbox version? cfg = mw.loadData ('Module:Citation/CS1/Configuration/sandbox'); -- load sandbox versions of Configuration and Whitelist and ... whitelist = mw.loadData ('Module:Citation/CS1/Whitelist/sandbox'); validation = require ('Module:Citation/CS1/Date_validation/sandbox'); -- ... sandbox version of date validation code else -- otherwise cfg = mw.loadData ('Module:Citation/CS1/Configuration'); -- load live versions of Configuration and Whitelist and ... whitelist = mw.loadData ('Module:Citation/CS1/Whitelist'); validation = require ('Module:Citation/CS1/Date_validation'); -- ... live version of date validation code end dates = validation.dates; -- imported functions year_date_check = validation.year_date_check; local args = {}; local suggestions = {}; local error_text, error_state; local config = {}; for k, v in pairs( frame.args ) do config[k] = v; args[k] = v; end local capture; -- the single supported capture when matching unknown parameters using patterns for k, v in pairs( pframe.args ) do if v ~= '' then if not validate( k ) then error_text = ""; if type( k ) ~= 'string' then -- Exclude empty numbered parameters if v:match("%S+") ~= nil then error_text, error_state = set_error( 'text_ignored', {v}, true ); end elseif validate( k:lower() ) then error_text, error_state = set_error( 'parameter_ignored_suggest', {k, k:lower()}, true ); else if nil == suggestions.suggestions then -- if this table is nil then we need to load it if nil ~= string.find (frame:getTitle(), 'sandbox', 1, true) then -- did the {{#invoke:}} use sandbox version? suggestions = mw.loadData( 'Module:Citation/CS1/Suggestions/sandbox' ); -- use the sandbox version else suggestions = mw.loadData( 'Module:Citation/CS1/Suggestions' ); -- use the live version end end for pattern, param in pairs (suggestions.patterns) do -- loop through the patterns to see if we can suggest a proper parameter capture = k:match (pattern); -- the whole match if no caputre in pattern else the capture if a match if capture then -- if the pattern matches param = substitute( param, capture ); -- add the capture to the suggested parameter (typically the enumerator) error_text, error_state = set_error( 'parameter_ignored_suggest', {k, param}, true ); -- set the error message end end if not is_set (error_text) then -- couldn't match with a pattern, is there an expicit suggestion? if suggestions.suggestions[ k:lower() ] ~= nil then error_text, error_state = set_error( 'parameter_ignored_suggest', {k, suggestions.suggestions[ k:lower() ]}, true ); else error_text, error_state = set_error( 'parameter_ignored', {k}, true ); end end end if error_text ~= '' then table.insert( z.message_tail, {error_text, error_state} ); end end args[k] = v; elseif args[k] ~= nil or (k == 'postscript') then args[k] = v; end end for k, v in pairs( args ) do if 'string' == type (k) then -- don't evaluate positional parameters has_invisible_chars (k, v); end end return citation0( config, args) end return z
</text>
<sha1>lax0dw11r7nyz9ruwupgx86157dwzbc</sha1>
</revision>
</page>
<page>
<title>Module:Citation/CS1/Configuration</title>
<ns>828</ns>
<id>4245600</id>
<revision>
<id>59847622</id>
<parentid>54332717</parentid>
<timestamp>2020-05-28T05:56:13Z</timestamp>
<contributor>
<username>Xiplus</username>
<id>899028</id>
</contributor>
<comment>
per [[Special:PermaLink/59485122#編輯請求：「via」的地區詞轉換|EP]]
</comment>
<model>Scribunto</model>
<format>text/plain</format>
<text bytes="37793" xml:space="preserve">
local citation_config = {}; -- override <code>...</code> styling to remove color, border, and padding. <code> css is specified here: -- https://git.wikimedia.org/blob/mediawiki%2Fcore.git/69cd73811f7aadd093050dbf20ed70ef0b42a713/skins%2Fcommon%2FcommonElements.css#L199 local code_style="color:inherit; border:inherit; padding:inherit;"; --[[--------------------------< U N C A T E G O R I Z E D _ N A M E S P A C E S >------------------------------ List of namespaces that should not be included in citation error categories. Same as setting notracking = true by default Note: Namespace names should use underscores instead of spaces. ]] local uncategorized_namespaces = { 'User', 'Talk', 'User_talk', 'Wikipedia_talk', 'File_talk', 'Template_talk', 'Help_talk', 'Category_talk', 'Portal_talk', 'Book_talk', 'Draft', 'Draft_talk', 'Education_Program_talk', 'Module_talk', 'MediaWiki_talk' }; local uncategorized_subpages = {'/[Ss]andbox', '/[Tt]estcases'}; -- list of Lua patterns found in page names of pages we should not categorize --[[--------------------------< M E S S A G E S >-------------------------------------------------------------- Translation table The following contains fixed text that may be output as part of a citation. This is separated from the main body to aid in future translations of this module. ]] local messages = { ['archived-dead'] = '（$1存档于$2）', ['archived-not-dead'] = '（原始内容$1于$2）', ['archived-missing'] = '（原始内容$1存档于$2）', ['archived'] = '存档', ['by'] = 'By', -- contributions to authored works: introduction, foreword, afterword ['cartography'] = 'Cartography by $1', ['editor'] = '编', ['editors'] = '编', ['edition'] = '$1', ['episode'] = '第$1集', ['et al'] = '等', ['in'] = '(编)', -- edited works ['inactive'] = '不活跃', ['inset'] = '$1 inset', ['lay summary'] = 'Lay summary', ['newsgroup'] = '[[Usenet newsgroup|Newsgroup]]:&nbsp;$1', ['original'] = '原始内容', ['published'] = '$1', ['retrieved'] = '&#91;$1&#93;', ['season'] = '第$1季', ['section'] = '§ $1', ['sections'] = '§§ $1', ['series'] = '第$1系列', ['type'] = ' ($1)', -- for titletype ['written'] = '写于$1', ['vol'] = '$1 Vol.&nbsp;$2', -- $1 is sepc; bold journal style volume is in presentation{} ['vol-no'] = '$1 Vol.&nbsp;$2 no.&nbsp;$3', -- sepc, volume, issue ['issue'] = '$1 No.&nbsp;$2', -- $1 is sepc ['j-vol'] = '$1 $2', -- sepc, volume; bold journal volume is in presentation{} ['j-issue'] = ' ($1)', ['nopp'] = '$1 $2'; -- page(s) without prefix; $1 is sepc ['p-prefix'] = ": $2", -- $1 is sepc ['pp-prefix'] = ": $2", -- $1 is sepc ['j-page(s)'] = ': $1', -- same for page and pages ['sheet'] = '$1 Sheet&nbsp;$2', -- $1 is sepc ['sheets'] = '$1 Sheets&nbsp;$2', -- $1 is sepc ['j-sheet'] = ': Sheet&nbsp;$1', ['j-sheets'] = ': Sheets&nbsp;$1', ['subscription'] = '[[File:Lock-red-alt.svg|9px|link=|alt=需要付费订阅|需要付费订阅]]' .. '[[Category:含有連結內容需訂閱查看的頁面]]', ['registration']='[[File:Lock-blue-alt-2.svg|9px|link=|alt=需要免费注册|需要免费注册]]' .. '[[Category:含有內容需登入查看的頁面]]', ['language'] = '<span style="font-family: sans-serif; cursor: default; color:#555; font-size: 0.8em; bottom: 0.1em; font-weight: bold;" title="连接到$1网页">（$1）</span>', ['via'] = " &ndash;-{zh-hans:通过;zh-hant:透過;}-$1", ['event'] = '事件发生在', ['minutes'] = '记录于', ['parameter-separator'] = '、', ['parameter-final-separator'] = '和', ['parameter-pair-separator'] = '和', -- Determines the location of the help page ['help page link'] = 'Help:引文格式1错误', ['help page label'] = '帮助', -- Internal errors (should only occur if configuration is bad) ['undefined_error'] = '调用了一个未定义的错误条件', ['unknown_manual_ID'] = '无法识别的手动ID模式', ['unknown_ID_mode'] = '无法识别的ID模式', ['unknown_argument_map'] = 'Argument map not defined for this variable', ['bare_url_no_origin'] = 'Bare url found but origin indicator is nil or empty', } --[[--------------------------< P R E S E N T A T I O N >------------------------------------------------------ Fixed presentation markup. Originally part of citation_config.messages it has been moved into its own, more semantically correct place. ]] local presentation = { -- Error output -- .error class is specified at https://git.wikimedia.org/blob/mediawiki%2Fcore.git/9553bd02a5595da05c184f7521721fb1b79b3935/skins%2Fcommon%2Fshared.css#L538 -- .citation-comment class is specified at Help:CS1_errors#Controlling_error_message_display ['hidden-error'] = '<span style="display:none;font-size:100%" class="error citation-comment">$1</span>', ['visible-error'] = '<span style="font-size:100%" class="error citation-comment">$1</span>', ['accessdate'] = '<span class="reference-accessdate">$2</span>', -- to allow editors to hide accessdate using personal css ['bdi'] = '<bdi$1>$2</bdi>', -- bidirectional isolation used with |script-title= and the like ['format'] = ' <span style="font-size:85%;">($1)</span>', -- for |format=, |chapter-format=, etc ['access-signal'] = '<span class="plainlinks">$1&#8239;$2</span>', -- external link with appropriate lock icon ['free'] = '[[File:Lock-green.svg|9px|link=|alt=可免费使用|可免费使用]]', ['registration'] = '[[File:Lock-blue-alt-2.svg|9px|link=|alt=需要免费注册|需要免费注册]]', ['limited'] = '[[File:Lock-blue-alt-2.svg|9px|link=|alt=有限的免费使用，通常需要订阅|有限的免费使用，通常需要订阅]]', ['subscription'] = '[[File:Lock-red-alt.svg|9px|link=|alt=需要付费订阅|需要付费订阅]]', ['italic-title'] = "$1", ['kern-left'] = '<span style="padding-left:0.2em;">$1</span>$2', -- spacing to use when title contains leading single or double quote mark ['kern-right'] = '$1<span style="padding-right:0.2em;">$2</span>', -- spacing to use when title contains trailing single or double quote mark ['nowrap1'] = '<span class="nowrap">$1</span>', -- for nowrapping an item: <span ...>yyyy-mm-dd</span> ['nowrap2'] = '<span class="nowrap">$1</span> $2', -- for nowrapping portions of an item: <span ...>dd mmmm</span> yyyy (note white space) ['parameter'] = '<code style="'..code_style..'">&#124;$1=</code>', ['quoted-text'] = '<q>$1</q>', -- for wrapping |quote= content ['quoted-title'] = '$1', ['trans-italic-title'] = "&#91;$1&#93;", ['trans-quoted-title'] = "&#91;$1&#93;", ['vol-bold'] = ' <b>$1</b>', -- for journal cites; for other cites ['vol'] in messages{} } --[[--------------------------< A L I A S E S >---------------------------------------------------------------- Aliases table for commonly passed parameters ]] local aliases = { ['AccessDate'] = {'access-date', 'accessdate'}, ['Agency'] = 'agency', ['AirDate'] = {'air-date', 'airdate'}, ['ArchiveDate'] = {'archive-date', 'archivedate'}, ['ArchiveFormat'] = 'archive-format', ['ArchiveURL'] = {'archive-url', 'archiveurl'}, ['ASINTLD'] = {'ASIN-TLD', 'asin-tld'}, ['At'] = 'at', ['Authors'] = {'authors', 'people', 'host', 'credits'}, ['BookTitle'] = {'book-title', 'booktitle'}, ['Callsign'] = {'call-sign', 'callsign'}, -- cite interview ['Cartography'] = 'cartography', ['Chapter'] = {'chapter', 'contribution', 'entry', 'article', 'section'}, ['ChapterFormat'] = {'chapter-format', 'contribution-format', 'section-format'}; ['ChapterURL'] = {'chapter-url', 'chapterurl', 'contribution-url', 'contributionurl', 'section-url', 'sectionurl'}, ['City'] = 'city', -- cite interview ['Class'] = 'class', -- cite arxiv and arxiv identifiers ['Coauthors'] = {'coauthors', 'coauthor'}, -- coauthor and coauthors are deprecated; remove after 1 January 2015? ['Conference'] = {'conference', 'event'}, ['ConferenceFormat'] = {'conference-format', 'event-format'}, ['ConferenceURL'] = {'conference-url', 'conferenceurl', 'event-url', 'eventurl'}, ['Contribution'] = 'contribution', -- introduction, foreword, afterword, etc; required when |contributor= set ['Date'] = {'date', 'air-date', 'airdate'}, ['DeadURL'] = {'dead-url', 'deadurl'}, ['Degree'] = 'degree', ['DF'] = 'df', ['DisplayAuthors'] = {'display-authors', 'displayauthors'}, ['DisplayEditors'] = {'display-editors', 'displayeditors'}, ['Docket'] = 'docket', ['DoiBroken'] = {'doi-broken', 'doi-broken-date', 'doi-inactive-date', 'doi_brokendate', 'doi_inactivedate'}, ['Edition'] = 'edition', ['Editors'] = 'editors', ['Embargo'] = 'embargo', ['Encyclopedia'] = {'encyclopedia', 'encyclopaedia'}, -- this one only used by citation ['Episode'] = 'episode', -- cite serial only TODO: make available to cite episode? ['Format'] = 'format', ['ID'] = {'id', 'ID'}, ['IgnoreISBN'] = {'ignore-isbn-error', 'ignoreisbnerror'}, ['Inset'] = 'inset', ['Issue'] = {'issue', 'number'}, ['Language'] = {'language', 'in'}, ['LastAuthorAmp'] = {'last-author-amp', 'lastauthoramp'}, ['LayDate'] = {'lay-date', 'laydate'}, ['LayFormat'] = 'lay-format', ['LaySource'] = {'lay-source', 'laysource'}, ['LayURL'] = {'lay-url', 'lay-summary', 'layurl', 'laysummary'}, ['MailingList'] = {'mailinglist', 'mailing-list'}, -- cite mailing list only ['Map'] = 'map', -- cite map only ['MapFormat'] = 'map-format', -- cite map only ['MapURL'] = {'mapurl', 'map-url'}, -- cite map only ['MessageID'] = 'message-id', ['Minutes'] = 'minutes', ['Mode'] = 'mode', ['NameListFormat'] = 'name-list-format', ['Network'] = 'network', ['NoPP'] = {'no-pp', 'nopp'}, ['NoTracking'] = {'template-doc-demo', 'template doc demo', 'no-cat', 'nocat', 'no-tracking', 'notracking'}, ['Number'] = 'number', -- this case only for cite techreport ['OrigYear'] = {'orig-year', 'origyear'}, ['Others'] = {'others', 'interviewer', 'interviewers'}, ['Page'] = {'p', 'page'}, ['Pages'] = {'pp', 'pages'}, ['Periodical'] = {'journal', 'newspaper', 'magazine', 'work', 'website', 'periodical', 'encyclopedia', 'encyclopaedia', 'dictionary', 'mailinglist'}, ['Place'] = {'place', 'location'}, ['Program'] = 'program', -- cite interview ['PostScript'] = 'postscript', ['PublicationDate'] = {'publicationdate', 'publication-date'}, ['PublicationPlace'] = {'publication-place', 'publicationplace'}, ['PublisherName'] = {'publisher', 'distributor', 'institution', 'newsgroup'}, ['Quote'] = {'quote', 'quotation'}, ['Ref'] = 'ref', ['RegistrationRequired'] = 'registration', ['Scale'] = 'scale', ['ScriptChapter'] = 'script-chapter', ['ScriptTitle'] = 'script-title', ['Section'] = 'section', ['Season'] = 'season', ['Sections'] = 'sections', -- cite map only ['Series'] = {'series', 'version'}, ['SeriesSeparator'] = 'series-separator', ['SeriesLink'] = {'series-link', 'serieslink'}, ['SeriesNumber'] = {'series-number', 'series-no', 'seriesnumber', 'seriesno'}, ['Sheet'] = 'sheet', -- cite map only ['Sheets'] = 'sheets', -- cite map only ['Station'] = 'station', ['SubscriptionRequired'] = 'subscription', ['Time'] = 'time', ['TimeCaption'] = {'time-caption', 'timecaption'}, ['Title'] = 'title', ['TitleLink'] = {'title-link', 'episode-link', 'titlelink', 'episodelink'}, ['TitleNote'] = 'department', ['TitleType'] = {'type', 'medium'}, ['TransChapter'] = {'trans-chapter', 'trans_chapter'}, ['TransMap'] = 'trans-map', -- cite map only ['Transcript'] = 'transcript', ['TranscriptFormat'] = 'transcript-format', ['TranscriptURL'] = {'transcript-url', 'transcripturl'}, ['TransTitle'] = {'trans-title', 'trans_title', 'title_zh'}, ['URL'] = {'url', 'URL'}, ['Vauthors'] = 'vauthors', ['Veditors'] = 'veditors', ['Via'] = 'via', ['Volume'] = 'volume', ['Year'] = 'year', ['AuthorList-First'] = {"first#", "given#", "author-first#", "author#-first"}, ['AuthorList-Last'] = {"last#", "author#", "surname#", "author-last#", "author#-last", "subject#"}, ['AuthorList-Link'] = {"authorlink#", "author-link#", "author#-link", "subjectlink#", "author#link", "subject-link#", "subject#-link", "subject#link"}, ['AuthorList-Mask'] = {"author-mask#", "authormask#", "author#mask", "author#-mask"}, ['ContributorList-First'] = {'contributor-first#','contributor#-first'}, ['ContributorList-Last'] = {'contributor#', 'contributor-last#', 'contributor#-last'}, ['ContributorList-Link'] = {'contributor-link#', 'contributor#-link'}, ['ContributorList-Mask'] = {'contributor-mask#', 'contributor#-mask'}, ['EditorList-First'] = {"editor-first#", "editor#-first", "editor-given#", "editor#-given"}, ['EditorList-Last'] = {"editor#", "editor-last#", "editor#-last", "editor-surname#", "editor#-surname"}, ['EditorList-Link'] = {"editor-link#", "editor#-link", "editorlink#", "editor#link"}, ['EditorList-Mask'] = {"editor-mask#", "editor#-mask", "editormask#", "editor#mask"}, ['TranslatorList-First'] = {'translator-first#','translator#-first'}, ['TranslatorList-Last'] = {'translator#', 'translator-last#', 'translator#-last'}, ['TranslatorList-Link'] = {'translator-link#', 'translator#-link'}, ['TranslatorList-Mask'] = {'translator-mask#', 'translator#-mask'}, } --[[--------------------------< D E F A U L T S >-------------------------------------------------------------- Default parameter values TODO: keep this? Only one default? ]] local defaults = { ['DeadURL'] = 'yes', } --[[--------------------------< V O L U M E , I S S U E , P A G E S >---------------------------------------- These tables hold cite class values (from the template invocation) and identify those templates that support |volume=, |issue=, and |page(s)= parameters. Cite conference and cite map require further qualification which is handled in the main module. ]] local templates_using_volume = {'citation', 'audio-visual', 'book', 'conference', 'encyclopaedia', 'interview', 'journal', 'magazine', 'map', 'news', 'report', 'techreport'} local templates_using_issue = {'citation', 'conference', 'episode', 'interview', 'journal', 'magazine', 'map', 'news'} local templates_not_using_page = {'audio-visual', 'episode', 'mailinglist', 'newsgroup', 'podcast', 'serial', 'sign', 'speech'} --[[--------------------------< K E Y W O R D S >-------------------------------------------------------------- This table holds keywords for those parameters that have defined sets of acceptible keywords. ]] local keywords = { ['yes_true_y'] = {'yes', 'true', 'y'}, -- ignore-isbn-error, last-author-amp, no-tracking, nopp, registration, subscription ['deadurl'] = {'yes', 'true', 'y', 'no', 'unfit', 'usurped'}, ['mode'] = {'cs1', 'cs2'}, ['name-list-format'] = {'vanc'}, ['contribution'] = {'afterword', 'foreword', 'introduction', 'preface'}, -- generic contribution titles that are rendered unquoted in the 'chapter' position ['date-format'] = {'dmy', 'dmy-all', 'mdy', 'mdy-all', 'ymd', 'ymd-all'}, } --[[--------------------------< I N V I S I B L E _ C H A R A C T E R S >-------------------------------------- This table holds non-printing or invisible characters indexed either by name or by Unicode group. Values are decimal representations of UTF-8 codes. The table is organized as a table of tables because the lua pairs keyword returns table data in an arbitrary order. Here, we want to process the table from top to bottom because the entries at the top of the table are also found in the ranges specified by the entries at the bottom of the table. This list contains patterns for templates like {{'}} which isn't an error but transcludes characters that are invisible. These kinds of patterns must be recognized by the functions that use this list. Also here is a pattern that recognizes stripmarkers that begin and end with the delete characters. The nowiki stripmarker is not an error but some others are because the parameter values that include them become part of the template's metadata before stripmarker replacement. ]] local invisible_chars = { {'replacement', '\239\191\189', '替换字符'}, -- U+FFFD, EF BF BD {'apostrophe', '&zwj;\226\128\138\039\226\128\139'}, -- apostrophe template: &zwj; hair space ' zero-width space; not an error {'apostrophe', '\226\128\138\039\226\128\139'}, -- apostrophe template: hair space ' zero-width space; (as of 2015-12-11) not an error {'zero width joiner', '\226\128\141', '零宽连字'}, -- U+200D, E2 80 8D {'zero width space', '\226\128\139', '零宽空格'}, -- U+200B, E2 80 8B {'hair space', '\226\128\138', '字间最小间隔'}, -- U+200A, E2 80 8A {'soft hyphen', '\194\173', '软连字符'}, -- U+00AD, C2 AD {'horizontal tab', '\009', '水平制表'}, -- U+0009 (HT), 09 {'line feed', '\010', '換行符'}, -- U+0010 (LF), 0A {'carriage return', '\013', '回车符'}, -- U+0013 (CR), 0D -- {'nowiki stripmarker', '\127UNIQ%-%-nowiki%-[%a%d]+%-QINU\127'}, -- nowiki stripmarker; not an error {'stripmarker', '\127[^\127]*UNIQ%-%-(%a+)%-[%a%d]+%-QINU[^\127]*\127'}, -- stripmarker; may or may not be an error; capture returns the stripmaker type {'delete', '\127', '删除符'}, -- U+007F (DEL), 7F; must be done after stripmarker test {'C0 control', '[\000-\008\011\012\014-\031]', 'C0控制符'}, -- U+0000–U+001F (NULL–US), 00–1F (except HT, LF, CR (09, 0A, 0D)) {'C1 control', '[\194\128-\194\159]', 'C1控制符'}, -- U+0080–U+009F (XXX–APC), C2 80 – C2 9F {'Specials', '[\239\191\185-\239\191\191]', '特殊字符'}, -- U+FFF9-U+FFFF, EF BF B9 – EF BF BF {'Private use area', '[\238\128\128-\239\163\191]', '私用空间'}, -- U+E000–U+F8FF, EE 80 80 – EF A3 BF {'Supplementary Private Use Area-A', '[\243\176\128\128-\243\191\191\189]', '补充私用空间A'}, -- U+F0000–U+FFFFD, F3 B0 80 80 – F3 BF BF BD {'Supplementary Private Use Area-B', '[\244\128\128\128-\244\143\191\189]', '补充私用空间B'}, -- U+100000–U+10FFFD, F4 80 80 80 – F4 8F BF BD } --[[--------------------------< M A I N T E N A N C E _ C A T E G O R I E S >---------------------------------- Here we name maintenance categories to be used in maintenance messages. ]] local maint_cats = { ['ASIN'] = '引文格式1维护：ASIN使用ISBN', ['date_year'] = '引文格式1维护：日期与年', ['disp_auth_ed'] = '引文格式1维护：显示－作者', -- $1 is authors or editors ['embargo'] = '引文格式1维护：PMC封锁过期', ['english'] = 'CS1 maint: English language specified', ['etal'] = '引文格式1维护：显式使用等标签', ['extra_text'] = '引文格式1维护：冗余文本', ['pmc_format'] = '引文格式1维护：PMC格式', ['unknown_lang'] = '引文格式1维护：未识别语文类型', ['untitled'] = '引文格式1维护：无标题期刊', } --[[--------------------------< P R O P E R T I E S _ C A T E G O R I E S >------------------------------------ Here we name properties categories ]] local prop_cats = { ['foreign_lang_source'] = 'CS1$1来源 ($2)', -- |language= categories; $1 is language name, $2 is ISO639-1 code ['script'] = 'CS1含有外文文本', -- when language specified by |script-title=xx: doesn't have its own category ['script_with_name'] = 'CS1含有$1文本 ($2)', -- |script-title=xx: has matching category; $1 is language name, $2 is ISO639-1 code } --[[--------------------------< T I T L E _ T Y P E S >-------------------------------------------------------- Here we map a template's CitationClass to TitleType (default values for |type= parameter) ]] local title_types = { ['AV-media-notes'] = 'Media notes', ['DVD-notes'] = 'Media notes', ['mailinglist'] = '邮件列表', ['map'] = 'Map', ['podcast'] = 'Podcast', ['pressrelease'] = '新闻稿', ['report'] = 'Report', ['techreport'] = 'Technical report', ['thesis'] = 'Thesis', } --[[--------------------------< E R R O R _ C O N D I T I O N S >---------------------------------------------- Error condition table The following contains a list of IDs for various error conditions defined in the code. For each ID, we specify a text message to display, an error category to include, and whether the error message should be wrapped as a hidden comment. Anchor changes require identical changes to matching anchor in Help:CS1 errors ]] local error_conditions = { accessdate_missing_url = { message = '使用<code style="'..code_style..'">&#124;accessdate=</code>需要含有<code style="'..code_style..'">&#124;url=</code>', anchor = 'accessdate_missing_url', category = '含有访问日期但无网址的引用的页面', hidden = true }, archive_missing_date = { message = '使用<code style="'..code_style..'">&#124;archiveurl=</code>需要含有<code style="'..code_style..'">&#124;archivedate=</code>', anchor = 'archive_missing_date', category = '含有存档网址错误的引用的页面‎', hidden = false }, archive_missing_url = { message = '使用<code style="'..code_style..'">&#124;archiveurl=</code>需要含有<code style="'..code_style..'">&#124;url=</code>', anchor = 'archive_missing_url', category = '含有存档网址错误的引用的页面‎', hidden = false }, arxiv_missing = { message = '需要使用<code style="'..code_style..'">&#124;arxiv=</code>', anchor = 'arxiv_missing', category = '引文格式1错误：arXiv', -- same as bad arxiv hidden = false }, arxiv_params_not_supported = { message = '不支持的参数使用了arXiv', anchor = 'arxiv_params_not_supported', category = '引文格式1错误：arXiv', -- same as bad arxiv hidden = false }, bad_arxiv = { message = '请检查<code style="'..code_style..'">&#124;arxiv=</code>值', anchor = 'bad_arxiv', category = '引文格式1错误：arXiv', hidden = false }, bad_asin = { message = '请检查<code style="'..code_style..'">&#124;asin=</code>值', anchor = 'bad_asin', category ='引文格式1错误：ASIN', hidden = false }, bad_date = { message = '请检查<code style="'..code_style..'">$1</code>中的日期值', anchor = 'bad_date', category = '引文格式1错误：日期', hidden = true }, bad_doi = { message = '请检查<code style="'..code_style..'">&#124;doi=</code>值', anchor = 'bad_doi', category = '引文格式1错误：DOI', hidden = false }, bad_hdl = { message = '请检查<code style="'..code_style..'">&#124;hdl=</code>值', anchor = 'bad_hdl', category = '引文格式1错误：HDL', hidden = false }, bad_isbn = { message = '请检查<code style="'..code_style..'">&#124;isbn=</code>值', anchor = 'bad_isbn', category = '含有ISBN错误的引用的页面', hidden = false }, bad_ismn = { message = '请检查<code style="'..code_style..'">&#124;ismn=</code>值', anchor = 'bad_ismn', category = '引文格式1错误：ISMN', hidden = false }, bad_issn = { message = '请检查<code style="'..code_style..'">&#124;issn=</code>值', anchor = 'bad_issn', category = '引文格式1错误：ISSN', hidden = false }, bad_lccn = { message = '请检查<code style="'..code_style..'">&#124;lccn=</code>值', anchor = 'bad_lccn', category = '引文格式1错误：LCCN', hidden = false }, bad_message_id = { message = '请检查<code style="'..code_style..'">&#124;message-id=</code>值', anchor = 'bad_message_id', category = '引文格式1错误：message-id', hidden = false }, bad_ol = { message = '请检查<code style="'..code_style..'">&#124;ol=</code>值', anchor = 'bad_ol', category = '引文格式1错误：OL', hidden = false }, bad_paramlink = { -- for |title-link=, |author/editor/translator-link=, |series-link=, |episode-link= message = '请检查<code style="'..code_style..'">&#124;$1=</code>值', anchor = 'bad_paramlink', category = '引文格式1错误：参数链接', hidden = false }, bad_pmc = { message = '请检查<code style="'..code_style..'">&#124;pmc=</code>值', anchor = 'bad_pmc', category = '引文格式1错误：PMC', hidden = false }, bad_pmid = { message = '请检查<code style="'..code_style..'">&#124;pmid=</code>值', anchor = 'bad_pmid', category = '引文格式1错误：PMID', hidden = false }, bad_url = { message = '请检查<code style="'..code_style..'">&#124;url=</code>值', anchor = 'bad_url', category = '含有网址格式错误的引用的页面', hidden = false }, bare_url_missing_title = { message = '$1缺少标题', anchor = 'bare_url_missing_title', category = '含有裸露网址的引用的页面‎', hidden = false }, chapter_ignored = { message = '<code style="'..code_style..'">&#124;$1=</code>被忽略', anchor = 'chapter_ignored', category = '引文格式1错误：章节参数被忽略', hidden = false }, citation_missing_title = { message = '缺少或<code style="'..code_style..'">&#124;title=</code>为空', anchor = 'citation_missing_title', category = '含有缺少标题的引用的页面‎', hidden = false }, cite_web_url = { -- this error applies to cite web and to cite podcast message = '缺少或<code style="'..code_style..'">&#124;url=</code>为空', anchor = 'cite_web_url', category = '含有缺少网址的网站引用的页面‎', hidden = true }, coauthors_missing_author = { message = '使用<code style="'..code_style..'">&#124;coauthors=</code>需要含有<code style="'..code_style..'">&#124;author=</code>', anchor = 'coauthors_missing_author', category = '引文格式1错误：无主作者的合作者', hidden = false }, contributor_ignored = { message = '<code style="'..code_style..'">&#124;contributor=</code>被忽略</code>', anchor = 'contributor_ignored', category = '引文格式1错误：合作者', hidden = false }, contributor_missing_required_param = { message = '使用<code style="'..code_style..'">&#124;contributor=</code>需要含有<code style="'..code_style..'">&#124;$1=</code>', anchor = 'contributor_missing_required_param', category = '引文格式1错误：合作者', hidden = false }, deprecated_params = { message = '引文使用过时参数$1', anchor = 'deprecated_params', category = '含有过时参数的引用的页面', hidden = true }, empty_citation = { message = '空引用', anchor = 'empty_citation', category = '含有空引用的页面', hidden = false }, first_missing_last = { message = '$1列表中的<code style="'..code_style..'">&#124;first$2=</code>缺少<code style="'..code_style..'">&#124;last$2=</code>', anchor = 'first_missing_last', category = '引文格式1错误：缺少作者或编者', hidden = false }, format_missing_url = { message = '使用<code style="'..code_style..'">&#124;format=</code>需要含有<code style="'..code_style..'">&#124;url=</code>', anchor = 'format_missing_url', category = '含有格式却不含网址的引用的页面‎', hidden = true }, implict_etal_editor = { message = '建议使用<code style="'..code_style..'">&#124;displayeditors=</code>', anchor = 'displayeditors', category = '含有旧式缩略标签的引用的页面 in editors‎', hidden = true }, invalid_param_val = { message = '无效<code style="'..code_style..'">&#124;$1=$2</code>', anchor = 'invalid_param_val', category = '引文格式1错误：无效参数值', hidden = false }, invisible_char = { message = '参数$2值左起第$3位存在$1', anchor = 'invisible_char', category = '引文格式1错误：不可见字符', hidden = false }, missing_name = { message = '$1列表缺少<code style="'..code_style..'">&#124;last$2=</code>', anchor = 'missing_name', category = '引文格式1错误：缺少作者或编者', hidden = false }, param_has_ext_link = { message = '外部链接存在于<code style="'..code_style..'">$1</code>', anchor = 'param_has_ext_link', category = '引文格式1错误：外部链接', hidden = false }, parameter_ignored = { message = '已忽略未知参数<code style="'..code_style..'">&#124;$1=</code>', anchor = 'parameter_ignored', category = '含有未知参数的引用的页面', hidden = false }, parameter_ignored_suggest = { message = '已忽略未知参数<code style="'..code_style..'">&#124;$1=</code>（建议使用<code style="'..code_style..'">&#124;$2=</code>）', anchor = 'parameter_ignored_suggest', category = '含有未知参数的引用的页面', hidden = false }, redundant_parameters = { message = '$1只需其一', anchor = 'redundant_parameters', category = '含有冗余参数的引用的页面', hidden = false }, text_ignored = { message = '已忽略文本“$1”', anchor = 'text_ignored', category = '含有未命名参数的引用的页面', hidden = false }, trans_missing_title = { message = '使用<code style="'..code_style..'">&#124;trans-title=</code>需要含有<code style="'..code_style..'">&#124;title=</code>', anchor = 'trans_missing_title', category = '引文格式1错误：翻译标题', hidden = false }, vancouver = { message = '温哥华格式错误', anchor = 'vancouver', category = '引文格式1错误：温哥华格式', hidden = false }, wikilink_in_url = { message = '网址－维基内链冲突', anchor = 'wikilink_in_url', category = '引文格式1错误：网址－维基内链冲突', hidden = false }, } --[[--------------------------< I D _ H A N D L E R S >-------------------------------------------------------- The following contains a list of values for various defined identifiers. For each identifier we specify a variety of information necessary to properly render the identifier in the citation. parameters: a list of parameter aliases for this identifier link: Wikipedia article name label: the alternate name to apply to link mode: 'manual' when there is a specific function in the code to handle the identifier; 'external' for identifiers that link outside of Wikipedia; prefix: the first part of a url that will be concatenated with a second part which usually contains the identifier encode: true if uri should be percent encoded; otherwise false COinS: identifier link or keyword for use in COinS: for identifiers registered at info-uri.info use: info:.... for identifiers that have COinS keywords, use the keyword: rft.isbn, rft.issn, rft.eissn for others make a url using the value in prefix, use the keyword: pre (not checked; any text other than 'info' or 'rft' works here) set to nil to leave the identifier out of the COinS separator: character or text between label and the identifier in the rendered citation ]] local id_handlers = { ['ARXIV'] = { parameters = {'arxiv', 'ARXIV', 'eprint'}, link = 'arXiv', label = 'arXiv', mode = 'manual', prefix = '//arxiv.org/abs/', -- protocol relative tested 2013-09-04 encode = false, COinS = 'info:arxiv', separator = ':', }, ['ASIN'] = { parameters = { 'asin', 'ASIN' }, link = '亚马逊标准识别码', label = 'ASIN', mode = 'manual', prefix = '//www.amazon.', COinS = nil, -- no COinS for this id (needs thinking on implementation because |asin-tld=) separator = '&nbsp;', encode = false; }, ['BIBCODE'] = { parameters = {'bibcode', 'BIBCODE'}, link = 'Bibcode', label = 'Bibcode', mode = 'external', prefix = 'https://ui.adsabs.harvard.edu/abs/', encode = false, COinS = 'info:bibcode', separator = ':', }, ['DOI'] = { parameters = { 'doi', 'DOI' }, link = '數位物件識別號', q = 'Q25670', label = 'doi', mode = 'manual', prefix = '//dx.doi.org/', COinS = 'info:doi', separator = ':', encode = true, }, ['EISSN'] = { parameters = {'eissn', 'EISSN'}, link = 'International_Standard_Serial_Number#Electronic_ISSN', label = 'eISSN', mode = 'manual', prefix = '//www.worldcat.org/issn/', COinS = 'rft.eissn', encode = false, separator = '&nbsp;', }, ['HDL'] = { parameters = { 'hdl', 'HDL' }, link = 'Handle System', q = 'Q3126718', label = 'hdl', mode = 'manual', prefix = '//hdl.handle.net/', COinS = 'info:hdl', separator = ':', encode = true, }, ['ISBN'] = { parameters = {'isbn', 'ISBN', 'isbn13', 'ISBN13'}, link = '国际标准书号', label = 'ISBN', mode = 'manual', prefix = 'Special:BookSources/', COinS = 'rft.isbn', separator = '&nbsp;', }, ['ISMN'] = { parameters = {'ismn', 'ISMN'}, link = 'International Standard Music Number', label = 'ISMN', mode = 'manual', prefix = '', -- not currently used; COinS = 'nil', -- nil because we can't use pre or rft or info: separator = '&nbsp;', }, ['ISSN'] = { parameters = {'issn', 'ISSN'}, link = '国际标准连续出版物号', label = 'ISSN', mode = 'manual', prefix = '//www.worldcat.org/issn/', COinS = 'rft.issn', encode = false, separator = '&nbsp;', }, ['JFM'] = { parameters = {'jfm', 'JFM'}, link = 'Jahrbuch über die Fortschritte der Mathematik', label = 'JFM', mode = 'external', prefix = '//zbmath.org/?format=complete&q=an:', COinS = 'pre', -- use prefix value encode = true, separator = '&nbsp;', }, ['JSTOR'] = { parameters = {'jstor', 'JSTOR'}, link = 'JSTOR', label = 'JSTOR', mode = 'external', prefix = '//www.jstor.org/stable/', -- protocol relative tested 2013-09-04 COinS = 'pre', -- use prefix value encode = false, separator = '&nbsp;', }, ['LCCN'] = { parameters = {'LCCN', 'lccn'}, link = '美国国会图书馆控制码', label = 'LCCN', mode = 'manual', prefix = 'http://lccn.loc.gov/', COinS = 'info:lccn', -- use prefix value encode = false, separator = '&nbsp;', }, ['MR'] = { parameters = {'MR', 'mr'}, link = '數學評論', label = 'MR', mode = 'external', prefix = '//www.ams.org/mathscinet-getitem?mr=', -- protocol relative tested 2013-09-04 COinS = 'pre', -- use prefix value encode = true, separator = '&nbsp;', }, ['OCLC'] = { parameters = {'OCLC', 'oclc'}, link = 'OCLC', label = 'OCLC', mode = 'external', prefix = '//www.worldcat.org/oclc/', COinS = 'info:oclcnum', encode = true, separator = '&nbsp;', }, ['OL'] = { parameters = { 'ol', 'OL' }, link = '开放图书馆', label = 'OL', mode = 'manual', prefix = '//openlibrary.org/', COinS = nil, -- no COinS for this id (needs thinking on implementation because /authors/books/works/OL) separator = '&nbsp;', endode = true, }, ['OSTI'] = { parameters = {'OSTI', 'osti'}, link = '科学和技术信息办公室', label = 'OSTI', mode = 'external', prefix = '//www.osti.gov/energycitations/product.biblio.jsp?osti_id=', -- protocol relative tested 2013-09-04 COinS = 'pre', -- use prefix value encode = true, separator = '&nbsp;', }, ['PMC'] = { parameters = {'PMC', 'pmc'}, link = '公共医学中心', label = 'PMC', mode = 'manual', prefix = '//www.ncbi.nlm.nih.gov/pmc/articles/PMC', suffix = " ", COinS = 'pre', -- use prefix value encode = true, separator = '&nbsp;', }, ['PMID'] = { parameters = {'PMID', 'pmid'}, link = '公共医学识别码', label = 'PMID', mode = 'manual', prefix = '//www.ncbi.nlm.nih.gov/pubmed/', COinS = 'info:pmid', encode = false, separator = '&nbsp;', }, ['RFC'] = { parameters = {'RFC', 'rfc'}, link = '徵求修正意見書', label = 'RFC', mode = 'external', prefix = '//tools.ietf.org/html/rfc', COinS = 'pre', -- use prefix value encode = false, separator = '&nbsp;', }, ['SSRN'] = { parameters = {'SSRN', 'ssrn'}, link = '社会科学研究网络', label = 'SSRN', mode = 'external', prefix = '//ssrn.com/abstract=', -- protocol relative tested 2013-09-04 COinS = 'pre', -- use prefix value encode = true, separator = '&nbsp;', }, ['USENETID'] = { parameters = {'message-id'}, link = 'Usenet', label = 'Usenet:', mode = 'manual', prefix = 'news:', encode = false, COinS = 'pre', -- use prefix value separator = '&nbsp;', }, ['ZBL'] = { parameters = {'ZBL', 'zbl'}, link = 'Zentralblatt MATH', label = 'Zbl', mode = 'external', prefix = '//zbmath.org/?format=complete&q=an:', COinS = 'pre', -- use prefix value encode = true, separator = '&nbsp;', }, -- LOCAL ['CSBN'] = { parameters = {'unified', 'csbn', 'CSBN'}, link = '统一书号', label = 'CSBN', mode = 'external', prefix = 'http://book.douban.com/subject_search?search_text=SH', COinS = 'rft.csbn', encode = true, separator = '&nbsp;', }, -- END LOCAL } return { aliases = aliases, defaults = defaults, error_conditions = error_conditions, id_handlers = id_handlers, keywords = keywords, invisible_chars = invisible_chars, maint_cats = maint_cats, messages = messages, presentation = presentation, prop_cats = prop_cats, title_types = title_types, uncategorized_namespaces = uncategorized_namespaces, uncategorized_subpages = uncategorized_subpages, templates_using_volume = templates_using_volume, templates_using_issue = templates_using_issue, templates_not_using_page = templates_not_using_page, }
</text>
<sha1>jk50kadu6nd6mx90a5ybvs5bivb2eml</sha1>
</revision>
</page>
<page>
<title>Module:Citation/CS1/Date validation</title>
<ns>828</ns>
<id>4113266</id>
<revision>
<id>45024580</id>
<parentid>45024552</parentid>
<timestamp>2017-07-02T09:55:45Z</timestamp>
<contributor>
<username>WhitePhosphorus</username>
<id>1638927</id>
</contributor>
<minor/>
<comment>
取消[[Special:Contributions/WhitePhosphorus|WhitePhosphorus]]（[[User talk:WhitePhosphorus|对话]]）的编辑；更改回[[Special:Contributions/Liangent|Liangent]]的最后一个版本
</comment>
<model>Scribunto</model>
<format>text/plain</format>
<text bytes="33510" xml:space="preserve">
local p = {} --[[--------------------------< I S _ V A L I D _ A C C E S S D A T E >---------------------------------------- returns true if: Wikipedia start date <= accessdate < today + 2 days Wikipedia start date is 2001-01-15T00:00:00 UTC which is 979516800 seconds after 1970-01-01T00:00:00 UTC (the start of Unix time) accessdate is the date provided in |accessdate= at time 00:00:00 UTC today is the current date at time 00:00:00 UTC plus 48 hours if today is 2015-01-01T00:00:00 then adding 24 hours gives 2015-01-02T00:00:00 – one second more than today adding 24 hours gives 2015-01-03T00:00:00 – one second more than tomorrow ]] local function is_valid_accessdate (accessdate) local lang = mw.getContentLanguage(); local good1, good2; local access_ts, tomorrow_ts; -- to hold unix time stamps representing the dates accessdate = accessdate:gsub("年", "-"); accessdate = accessdate:gsub("月", "-"); accessdate = accessdate:gsub("日", "-"); accessdate = accessdate:gsub("-$", ""); good1, access_ts = pcall( lang.formatDate, lang, 'U', accessdate ); -- convert accessdate value to unix timesatmp good2, tomorrow_ts = pcall( lang.formatDate, lang, 'U', 'today + 2 days' ); -- today midnight + 2 days is one second more than all day tomorrow if good1 and good2 then access_ts = tonumber (access_ts); -- convert to numbers for the comparison tomorrow_ts = tonumber (tomorrow_ts); else return false; -- one or both failed to convert to unix time stamp end if 979516800 <= access_ts and access_ts < tomorrow_ts then -- Wikipedia start date <= accessdate < tomorrow's date return true; else return false; -- accessdate out of range end end --[[--------------------------< G E T _ M O N T H _ N U M B E R >---------------------------------------------- returns a number according to the month in a date: 1 for January, etc. Capitalization and spelling must be correct. If not a valid month, returns 0 ]] local function get_month_number (month) local long_months = {['January']=1, ['February']=2, ['March']=3, ['April']=4, ['May']=5, ['June']=6, ['July']=7, ['August']=8, ['September']=9, ['October']=10, ['November']=11, ['December']=12}; local short_months = {['Jan']=1, ['Feb']=2, ['Mar']=3, ['Apr']=4, ['May']=5, ['Jun']=6, ['Jul']=7, ['Aug']=8, ['Sep']=9, ['Oct']=10, ['Nov']=11, ['Dec']=12}; local zh_months = {['1月']=1, ['2月']=2, ['3月']=3, ['4月']=4, ['5月']=5, ['6月']=6, ['7月']=7, ['8月']=8, ['9月']=9, ['10月']=10, ['11月']=11, ['12月']=12}; -- LOCAL local temp; temp=long_months[month]; if temp then return temp; end -- if month is the long-form name temp=short_months[month]; if temp then return temp; end -- if month is the short-form name temp=zh_months[month]; -- LOCAL if temp then return temp; end -- if month is in Chinese -- LOCAL return 0; -- misspelled, improper case, or not a month name end --[[--------------------------< G E T _ S E A S O N _ N U M B E R >-------------------------------------------- returns a number according to the sequence of seasons in a year: 1 for Winter, etc. Capitalization and spelling must be correct. If not a valid season, returns 0 ]] local function get_season_number (season) local season_list = {['Winter']=21, ['Spring']=22, ['Summer']=23, ['Fall']=24, ['Autumn']=24}; -- make sure these numbers do not overlap month numbers local temp; temp=season_list[season]; if temp then return temp; end -- if season is a valid name return its number return 0; -- misspelled, improper case, or not a season name end --[[--------------------------< I S _ P R O P E R _ N A M E >-------------------------------------------------- returns a non-zero number if date contains a recognized proper name. Capitalization and spelling must be correct. ]] local function is_proper_name (name) local name_list = {['Christmas']=31} local temp; temp=name_list[name]; if temp then return temp; end -- if name is a valid name return its number return 0; -- misspelled, improper case, or not a proper name end --[[--------------------------< I S _ V A L I D _ M O N T H _ O R _ S E A S O N >------------------------------ --returns true if month or season is valid (properly spelled, capitalized, abbreviated) ]] local function is_valid_month_or_season (month_season) if 0 == get_month_number (month_season) then -- if month text isn't one of the twelve months, might be a season if 0 == get_season_number (month_season) then -- not a month, is it a season? return false; -- return false not a month or one of the five seasons end end return true; end --[[--------------------------< I S _ V A L I D _ Y E A R >---------------------------------------------------- Function gets current year from the server and compares it to year from a citation parameter. Years more than one year in the future are not acceptable. ]] local function is_valid_year(year) if not is_set(year_limit) then year_limit = tonumber(os.date("%Y"))+1; -- global variable so we only have to fetch it once end return tonumber(year) <= year_limit; -- false if year is in the future more than one year end --[[--------------------------< I S _ V A L I D _ D A T E >---------------------------------------------------- Returns true if day is less than or equal to the number of days in month and year is no farther into the future than next year; else returns false. Assumes Julian calendar prior to year 1582 and Gregorian calendar thereafter. Accounts for Julian calendar leap years before 1582 and Gregorian leap years after 1582. Where the two calendars overlap (1582 to approximately 1923) dates are assumed to be Gregorian. ]] local function is_valid_date (year, month, day) local days_in_month = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31}; local month_length; if not is_valid_year(year) then -- no farther into the future than next year return false; end month = tonumber(month); -- required for YYYY-MM-DD dates if (2==month) then -- if February month_length = 28; -- then 28 days unless if 1582 > tonumber(year) then -- Julian calendar if 0==(year%4) then month_length = 29; end else -- Gregorian calendar if (0==(year%4) and (0~=(year%100) or 0==(year%400))) then -- is a leap year? month_length = 29; -- if leap year then 29 days in February end end else month_length=days_in_month[month]; end if tonumber (day) > month_length then return false; end return true; end --[[--------------------------< I S _ V A L I D _ M O N T H _ R A N G E _ S T Y L E >-------------------------- Months in a range are expected to have the same style: Jan–Mar or October–December but not February–Mar or Jul–August. There is a special test for May because it can be either short or long form. Returns true when style for both months is the same ]] local function is_valid_month_range_style (month1, month2) local len1 = month1:len(); local len2 = month2:len(); if len1 == len2 then return true; -- both months are short form so return true elseif 'May' == month1 or 'May'== month2 then return true; -- both months are long form so return true elseif 3 == len1 or 3 == len2 then return false; -- months are mixed form so return false else return true; -- both months are long form so return true end end --[[--------------------------< I S _ V A L I D _ M O N T H _ S E A S O N _ R A N G E >------------------------ Check a pair of months or seasons to see if both are valid members of a month or season pair. Month pairs are expected to be left to right, earliest to latest in time. Similarly, seasons are also left to right, earliest to latest in time. There is an oddity with seasons: winter is assigned a value of 1, spring 2, ..., fall and autumn 4. Because winter can follow fall/autumn at the end of a calender year, a special test is made to see if |date=Fall-Winter yyyy (4-1) is the date. ]] local function is_valid_month_season_range(range_start, range_end) local range_start_number = get_month_number (range_start); if 0 == range_start_number then -- is this a month range? local range_start_number = get_season_number (range_start); -- not a month; is it a season? get start season number local range_end_number = get_season_number (range_end); -- get end season number if 0 ~= range_start_number then -- is start of range a season? if range_start_number < range_end_number then -- range_start is a season return true; -- return true when range_end is also a season and follows start season; else false end if 24 == range_start_number and 21 == range_end_number then -- special case when season range is Fall-Winter or Autumn-Winter return true; end end return false; -- range_start is not a month or a season; or range_start is a season and range_end is not; or improper season sequence end local range_end_number = get_month_number (range_end); -- get end month number if range_start_number < range_end_number then -- range_start is a month; does range_start precede range_end? if is_valid_month_range_style (range_start, range_end) then -- do months have the same style? return true; -- proper order and same style end end return false; -- range_start month number is greater than or equal to range end number; or range end isn't a month end --[[--------------------------< M A K E _ C O I N S _ D A T E >------------------------------------------------ This function receives a table of date parts for one or two dates and an empty table reference declared in Module:Citation/CS1. The function is called only for |date= parameters and only if the |date=<value> is determined to be a valid date format. The question of what to do with invalid date formats is not answered here. The date parts in the input table are converted to an ISO 8601 conforming date string: single whole dates: yyyy-mm-dd month and year dates: yyyy-mm year dates: yyyy ranges: yyyy-mm-dd/yyyy-mm-dd yyyy-mm/yyyy-mm yyyy/yyyy Dates in the Julian calendar are reduced to year or year/year so that we don't have to do calendar conversion from Julian to Proleptic Gregorian. The input table has: year, year2 – always present; if before 1582, ignore months and days if present month, month2 – 0 if not provided, 1-12 for months, 21-24 for seasons; 31– proper name dates day, day2 – 0 if not provided, 1-31 for days the output table receives: rftdate: an IS8601 formatted date rftchron: a free-form version of the date, usually without year which is in rftdate (season ranges and propername dates) rftssn: one of four season keywords: winter, spring, summer, fall (lowercase) ]] local function make_COinS_date (input, tCOinS_date) local date; -- one date or first date in a range local date2 = ''; -- end of range date if 1582 > tonumber(input.year) or 20 < tonumber(input.month) then -- Julian calendar or season so &rft.date gets year only date = input.year; if 0 ~= input.year2 and input.year ~= input.year2 then -- if a range, only the second year portion when not the same as range start year date = string.format ('%.4d/%.4d', tonumber(input.year), tonumber(input.year2)) -- assemble the date range end if 20 < tonumber(input.month) then -- if season or propername date local season = {[21]='winter', [22]='spring', [23]='summer', [24]='fall', [31]='Christmas'}; -- seasons lowercase, no autumn; proper names use title case if 0 == input.month2 then -- single season date if 30 <tonumber(input.month) then tCOinS_date.rftchron = season[input.month]; -- proper name dates else tCOinS_date.rftssn = season[input.month]; -- seasons end else -- season range with a second season specified if input.year ~= input.year2 then -- season year – season year range or season year–year tCOinS_date.rftssn = season[input.month]; -- start of range season; keep this? if 0~= month2 then tCOinS_date.rftchron = string.format ('%s %s – %s %s', season[input.month], input.year, season[input.month2], input.year2); end else -- season–season year range tCOinS_date.rftssn = season[input.month]; -- start of range season; keep this? tCOinS_date.rftchron = season[input.month] .. '–' .. season[input.month2]; -- season–season year range end end end tCOinS_date.rftdate = date; return; -- done end if 0 ~= input.day then date = string.format ('%s-%.2d-%.2d', input.year, tonumber(input.month), tonumber(input.day)); -- whole date elseif 0 ~= input.month then date = string.format ('%s-%.2d', input.year, tonumber(input.month)); -- year and month else date = string.format ('%s', input.year); -- just year end if 0 ~= input.year2 then if 0 ~= input.day2 then date2 = string.format ('/%s-%.2d-%.2d', input.year2, tonumber(input.month2), tonumber(input.day2)); -- whole date elseif 0 ~= input.month2 then date2 = string.format ('/%s-%.2d', input.year2, tonumber(input.month2)); -- year and month else date2 = string.format ('/%s', input.year2); -- just year end end tCOinS_date.rftdate = date .. date2; -- date2 has the '/' separator return; end --[[--------------------------< C H E C K _ D A T E >---------------------------------------------------------- Check date format to see that it is one of the formats approved by WP:DATESNO or WP:DATERANGE. Exception: only allowed range separator is endash. Additionally, check the date to see that it is a real date: no 31 in 30-day months; no 29 February when not a leap year. Months, both long-form and three character abbreviations, and seasons must be spelled correctly. Future years beyond next year are not allowed. If the date fails the format tests, this function returns false and does not return values for anchor_year and COinS_date. When this happens, the date parameter is used in the COinS metadata and the CITEREF identifier gets its year from the year parameter if present otherwise CITEREF does not get a date value. Inputs: date_string - date string from date-holding parameters (date, year, accessdate, embargo, archivedate, etc.) Returns: false if date string is not a real date; else true, anchor_year, COinS_date anchor_year can be used in CITEREF anchors COinS_date is ISO 8601 format date; see make_COInS_date() ]] local function check_date (date_string, tCOinS_date) local year; -- assume that year2, months, and days are not used; local year2=0; -- second year in a year range local month=0; local month2=0; -- second month in a month range local day=0; local day2=0; -- second day in a day range local anchor_year; local coins_date; if date_string:match("^%d%d%d%d%-%d%d%-%d%d$") then -- year-initial numerical year month day format year, month, day=string.match(date_string, "(%d%d%d%d)%-(%d%d)%-(%d%d)"); if 12 < tonumber(month) or 1 > tonumber(month) or 1583 > tonumber(year) then return false; end -- month number not valid or not Gregorian calendar anchor_year = year; elseif date_string:match("^%a+ +[1-9]%d?, +[1-9]%d%d%d%a?$") then -- month-initial: month day, year month, day, anchor_year, year=string.match(date_string, "(%a+)%s*(%d%d?),%s*((%d%d%d%d)%a?)"); month = get_month_number (month); if 0 == month then return false; end -- return false if month text isn't one of the twelve months elseif date_string:match("^%a+ +[1-9]%d?–[1-9]%d?, +[1-9]%d%d%d%a?$") then -- month-initial day range: month day–day, year; days are separated by endash month, day, day2, anchor_year, year=string.match(date_string, "(%a+) +(%d%d?)–(%d%d?), +((%d%d%d%d)%a?)"); if tonumber(day) >= tonumber(day2) then return false; end -- date range order is left to right: earlier to later; dates may not be the same; month = get_month_number (month); if 0 == month then return false; end -- return false if month text isn't one of the twelve months month2=month; -- for metadata year2=year; elseif date_string:match("^[1-9]%d? +%a+ +[1-9]%d%d%d%a?$") then -- day-initial: day month year day, month, anchor_year, year=string.match(date_string, "(%d%d*)%s*(%a+)%s*((%d%d%d%d)%a?)"); month = get_month_number (month); if 0 == month then return false; end -- return false if month text isn't one of the twelve months elseif date_string:match("^[1-9]%d?–[1-9]%d? +%a+ +[1-9]%d%d%d%a?$") then -- day-range-initial: day–day month year; days are separated by endash day, day2, month, anchor_year, year=string.match(date_string, "(%d%d?)–(%d%d?) +(%a+) +((%d%d%d%d)%a?)"); if tonumber(day) >= tonumber(day2) then return false; end -- date range order is left to right: earlier to later; dates may not be the same; month = get_month_number (month); if 0 == month then return false; end -- return false if month text isn't one of the twelve months month2=month; -- for metadata year2=year; elseif date_string:match("^[1-9]%d? +%a+ – [1-9]%d? +%a+ +[1-9]%d%d%d%a?$") then -- day initial month-day-range: day month - day month year; uses spaced endash day, month, day2, month2, anchor_year, year=date_string:match("(%d%d?) +(%a+) – (%d%d?) +(%a+) +((%d%d%d%d)%a?)"); if (not is_valid_month_season_range(month, month2)) or not is_valid_year(year) then return false; end -- date range order is left to right: earlier to later; month = get_month_number (month); -- for metadata month2 = get_month_number (month2); year2=year; elseif date_string:match("^%a+ +[1-9]%d? – %a+ +[1-9]%d?, +[1-9]%d%d%d?%a?$") then -- month initial month-day-range: month day – month day, year; uses spaced endash month, day, month2, day2, anchor_year, year=date_string:match("(%a+) +(%d%d?) – (%a+) +(%d%d?), +((%d%d%d%d)%a?)"); if (not is_valid_month_season_range(month, month2)) or not is_valid_year(year) then return false; end month = get_month_number (month); -- for metadata month2 = get_month_number (month2); year2=year; elseif date_string:match("^[1-9]%d? +%a+ +[1-9]%d%d%d – [1-9]%d? +%a+ +[1-9]%d%d%d%a?$") then -- day initial month-day-year-range: day month year - day month year; uses spaced endash day, month, year, day2, month2, anchor_year, year2=date_string:match("(%d%d?) +(%a+) +(%d%d%d%d?) – (%d%d?) +(%a+) +((%d%d%d%d?)%a?)"); if tonumber(year2) <= tonumber(year) then return false; end -- must be sequential years, left to right, earlier to later if not is_valid_year(year2) or not is_valid_month_range_style(month, month2) then return false; end -- year2 no more than one year in the future; months same style month = get_month_number (month); -- for metadata month2 = get_month_number (month2); elseif date_string:match("^%a+ +[1-9]%d?, +[1-9]%d%d%d – %a+ +[1-9]%d?, +[1-9]%d%d%d%a?$") then -- month initial month-day-year-range: month day, year – month day, year; uses spaced endash month, day, year, month2, day2, anchor_year, year2=date_string:match("(%a+) +(%d%d?), +(%d%d%d%d) – (%a+) +(%d%d?), +((%d%d%d%d)%a?)"); if tonumber(year2) <= tonumber(year) then return false; end -- must be sequential years, left to right, earlier to later if not is_valid_year(year2) or not is_valid_month_range_style(month, month2) then return false; end -- year2 no more than one year in the future; months same style month = get_month_number (month); -- for metadata month2 = get_month_number (month2); elseif date_string:match("^%a+ +[1-9]%d%d%d–%d%d%a?$") then -- special case Winter/Summer year-year (YYYY-YY); year separated with unspaced endash local century; month, year, century, anchor_year, year2=date_string:match("(%a+) +((%d%d)%d%d)–((%d%d)%a?)"); if 'Winter' ~= month and 'Summer' ~= month then return false end; -- 'month' can only be Winter or Summer anchor_year=year..'–'..anchor_year; -- assemble anchor_year from both years year2 = century..year2; -- add the century to year2 for comparisons if 1 ~= tonumber(year2) - tonumber(year) then return false; end -- must be sequential years, left to right, earlier to later if not is_valid_year(year2) then return false; end -- no year farther in the future than next year month = get_season_number (month); elseif date_string:match("^%a+ +[1-9]%d%d%d–[1-9]%d%d%d%a?$") then -- special case Winter/Summer year-year; year separated with unspaced endash month, year, anchor_year, year2=date_string:match("(%a+) +(%d%d%d%d)–((%d%d%d%d)%a?)"); if 'Winter' ~= month and 'Summer' ~= month then return false end; -- 'month' can only be Winter or Summer anchor_year=year..'–'..anchor_year; -- assemble anchor_year from both years if 1 ~= tonumber(year2) - tonumber(year) then return false; end -- must be sequential years, left to right, earlier to later if not is_valid_year(year2) then return false; end -- no year farther in the future than next year month = get_season_number (month); -- for metadata elseif date_string:match("^%a+ +[1-9]%d%d%d% – %a+ +[1-9]%d%d%d%a?$") then -- month/season year - month/season year; separated by spaced endash month, year, month2, anchor_year, year2=date_string:match("(%a+) +(%d%d%d%d) – (%a+) +((%d%d%d%d)%a?)"); anchor_year=year..'–'..anchor_year; -- assemble anchor_year from both years if tonumber(year) >= tonumber(year2) then return false; end -- left to right, earlier to later, not the same if not is_valid_year(year2) then return false; end -- no year farther in the future than next year if 0 ~= get_month_number(month) and 0 ~= get_month_number(month2) and is_valid_month_range_style(month, month2) then -- both must be month year, same month style month = get_month_number(month); month2 = get_month_number(month2); elseif 0 ~= get_season_number(month) and 0 ~= get_season_number(month2) then -- both must be or season year, not mixed month = get_season_number(month); month2 = get_season_number(month2); else return false; end elseif date_string:match ("^%a+–%a+ +[1-9]%d%d%d%a?$") then -- month/season range year; months separated by endash month, month2, anchor_year, year=date_string:match ("(%a+)–(%a+)%s*((%d%d%d%d)%a?)"); if (not is_valid_month_season_range(month, month2)) or (not is_valid_year(year)) then return false; end if 0 ~= get_month_number(month) then -- determined to be a valid range so just check this one to know if month or season month = get_month_number(month); month2 = get_month_number(month2); else month = get_season_number(month); month2 = get_season_number(month2); end year2=year; elseif date_string:match("^%a+ +%d%d%d%d%a?$") then -- month/season year or proper-name year month, anchor_year, year=date_string:match("(%a+)%s*((%d%d%d%d)%a?)"); if not is_valid_year(year) then return false; end if not is_valid_month_or_season (month) and 0 == is_proper_name (month) then return false; end if 0 ~= get_month_number(month) then -- determined to be a valid range so just check this one to know if month or season month = get_month_number(month); elseif 0 ~= get_season_number(month) then month = get_season_number(month); else month = is_proper_name (month); -- must be proper name; not supported in COinS end elseif date_string:match("^[1-9]%d%d%d?–[1-9]%d%d%d?%a?$") then -- Year range: YYY-YYY or YYY-YYYY or YYYY–YYYY; separated by unspaced endash; 100-9999 year, anchor_year, year2=date_string:match("(%d%d%d%d?)–((%d%d%d%d?)%a?)"); anchor_year=year..'–'..anchor_year; -- assemble anchor year from both years if tonumber(year) >= tonumber(year2) then return false; end -- left to right, earlier to later, not the same if not is_valid_year(year2) then return false; end -- no year farther in the future than next year elseif date_string:match("^[1-9]%d%d%d–%d%d%a?$") then -- Year range: YYYY–YY; separated by unspaced endash local century; year, century, anchor_year, year2=date_string:match("((%d%d)%d%d)–((%d%d)%a?)"); anchor_year=year..'–'..anchor_year; -- assemble anchor year from both years if 13 > tonumber(year2) then return false; end -- don't allow 2003-05 which might be May 2003 year2 = century..year2; -- add the century to year2 for comparisons if tonumber(year) >= tonumber(year2) then return false; end -- left to right, earlier to later, not the same if not is_valid_year(year2) then return false; end -- no year farther in the future than next year elseif date_string:match("^[1-9]%d%d%d?%a?$") then -- year; here accept either YYY or YYYY anchor_year, year=date_string:match("((%d%d%d%d?)%a?)"); if false == is_valid_year(year) then return false; end -- LOCAL: do not use mw.ustring: it allows full-width characters for %d. elseif date_string:match("^[1-9]%d%d%d年[1-9]%d?月[1-9]%d?日$") then -- zh: year month day year, month, day=date_string:match("(%d%d%d%d)年(%d%d*月)(%d%d*)日"); month = get_month_number (month); if 0 == month then return false; end anchor_year = year; elseif date_string:match("^[1-9]%d%d%d年[1-9]%d?月$") then -- zh: year month year, month=date_string:match("(%d%d%d%d)年(%d%d*月)"); month = get_month_number (month); if 0 == month then return false; end anchor_year = year; elseif date_string:match("^[1-9]%d%d%d?年$") then -- zh: year; here accept either YYY or YYYY year=date_string:match("(%d%d%d%d?)年"); if false == is_valid_year(year) then return false; end anchor_year = year; elseif date_string:match("^%d%d%d%d%-%d%d$") then -- numerical year month format year, month=date_string:match("(%d%d%d%d)%-(%d%d)"); month=tonumber(month); if 12 < month or 1 > month or 1583 > tonumber(year) then return false; end -- month number not valid or not Gregorian calendar anchor_year = year; -- END LOCAL else return false; -- date format not one of the MOS:DATE approved formats end local result=true; -- check whole dates for validity; assume true because not all dates will go through this test if 0 ~= year and 0 ~= month and 0 ~= day and 0 == year2 and 0 == month2 and 0 == day2 then -- YMD (simple whole date) result=is_valid_date(year,month,day); elseif 0 ~= year and 0 ~= month and 0 ~= day and 0 == year2 and 0 == month2 and 0 ~= day2 then -- YMD-d (day range) result=is_valid_date(year,month,day); result=result and is_valid_date(year,month,day2); elseif 0 ~= year and 0 ~= month and 0 ~= day and 0 == year2 and 0 ~= month2 and 0 ~= day2 then -- YMD-md (day month range) result=is_valid_date(year,month,day); result=result and is_valid_date(year,month2,day2); elseif 0 ~= year and 0 ~= month and 0 ~= day and 0 ~= year2 and 0 ~= month2 and 0 ~= day2 then -- YMD-ymd (day month year range) result=is_valid_date(year,month,day); result=result and is_valid_date(year2,month2,day2); end if false == result then return false; end if nil ~= tCOinS_date then -- this table only passed into this function when testing |date= parameter values make_COinS_date ({year=year, month=month, day=day, year2=year2, month2=month2, day2=day2}, tCOinS_date); -- make an ISO 8601 date string for COinS end return true, anchor_year; -- format is good and date string represents a real date end --[[--------------------------< D A T E S >-------------------------------------------------------------------- Cycle the date-holding parameters in passed table date_parameters_list through check_date() to check compliance with MOS:DATE. For all valid dates, check_date() returns true. The |date= parameter test is unique, it is the only date holding parameter from which values for anchor_year (used in CITEREF identifiers) and COinS_date (used in the COinS metadata) are derived. The |date= parameter is the only date-holding parameter that is allowed to contain the no-date keywords "n.d." or "nd" (without quotes). Unlike most error messages created in this module, only one error message is created by this function. Because all of the date holding parameters are processed serially, a single error message is created as the dates are tested. ]] local function dates(date_parameters_list, tCOinS_date) local anchor_year; -- will return as nil if the date being tested is not |date= local COinS_date; -- will return as nil if the date being tested is not |date= local error_message = ""; local good_date = false; for k, v in pairs(date_parameters_list) do -- for each date-holding parameter in the list if is_set(v) then -- if the parameter has a value if v:match("^c%. [1-9]%d%d%d?%a?$") then -- special case for c. year or with or without CITEREF disambiguator - only |date= and |year= local year = v:match("c%. ([1-9]%d%d%d?)%a?"); -- get the year portion so it can be tested if 'date'==k then anchor_year, COinS_date = v:match("((c%. [1-9]%d%d%d?)%a?)"); -- anchor year and COinS_date only from |date= parameter good_date = is_valid_year(year); elseif 'year'==k then good_date = is_valid_year(year); end elseif 'date'==k then -- if the parameter is |date= if v:match("^n%.d%.%a?") then -- if |date=n.d. with or without a CITEREF disambiguator good_date, anchor_year, COinS_date = true, v:match("((n%.d%.)%a?)"); --"n.d."; no error when date parameter is set to no date elseif v:match("^nd%a?$") then -- if |date=nd with or without a CITEREF disambiguator good_date, anchor_year, COinS_date = true, v:match("((nd)%a?)"); --"nd"; no error when date parameter is set to no date else good_date, anchor_year, COinS_date = check_date (v, tCOinS_date); -- go test the date end elseif 'access-date'==k then -- if the parameter is |date= good_date = check_date (v); -- go test the date if true == good_date then -- if the date is a valid date good_date = is_valid_accessdate (v); -- is Wikipedia start date < accessdate < tomorrow's date? end else -- any other date-holding parameter good_date = check_date (v); -- go test the date end if false==good_date then -- assemble one error message so we don't add the tracking category multiple times if is_set(error_message) then -- once we've added the first portion of the error message ... error_message=error_message .. ", "; -- ... add a comma space separator end error_message=error_message .. "&#124;" .. k .. "="; -- add the failed parameter end end end return anchor_year, error_message; -- and done end --[[--------------------------< Y E A R _ D A T E _ C H E C K >------------------------------------------------ Compare the value provided in |year= with the year value(s) provided in |date=. This function returns a numeric value: 0 - year value does not match the year value in date 1 - (default) year value matches the year value in date or one of the year values when date contains two years 2 - year value matches the year value in date when date is in the form YYYY-MM-DD and year is disambiguated (|year=YYYYx) ]] local function year_date_check (year_string, date_string) local year; local date1; local date2; local result = 1; -- result of the test; assume that the test passes year = year_string:match ('(%d%d%d%d?)'); if date_string:match ('%d%d%d%d%-%d%d%-%d%d') and year_string:match ('%d%d%d%d%a') then --special case where date and year required YYYY-MM-DD and YYYYx date1 = date_string:match ('(%d%d%d%d)'); year = year_string:match ('(%d%d%d%d)'); if year ~= date1 then result = 0; -- years don't match else result = 2; -- years match; but because disambiguated, don't add to maint cat end elseif date_string:match ("%d%d%d%d?.-%d%d%d%d?") then -- any of the standard formats of date with two three- or four-digit years date1, date2 = date_string:match ("(%d%d%d%d?).-(%d%d%d%d?)"); if year ~= date1 and year ~= date2 then result = 0; end elseif date_string:match ("%d%d%d%d[%s%-–]+%d%d") then -- YYYY-YY date ranges local century; date1, century, date2 = date_string:match ("((%d%d)%d%d)[%s%-–]+(%d%d)"); date2 = century..date2; -- convert YY to YYYY if year ~= date1 and year ~= date2 then result = 0; end elseif date_string:match ("%d%d%d%d?") then -- any of the standard formats of date with one year date1 = date_string:match ("(%d%d%d%d?)"); if year ~= date1 then result = 0; end end return result; end return {dates = dates, year_date_check = year_date_check} -- return exported functions
</text>
<sha1>th2cba01qmqp2y6122eq08yrhtsa3hi</sha1>
</revision>
</page>
<page>
<title>Module:Citation/CS1/Whitelist</title>
<ns>828</ns>
<id>3435842</id>
<revision>
<id>52607619</id>
<parentid>46069623</parentid>
<timestamp>2019-01-01T10:22:21Z</timestamp>
<contributor>
<username>Jimmy Xu</username>
<id>476067</id>
</contributor>
<minor/>
<comment>add hdl=</comment>
<model>Scribunto</model>
<format>text/plain</format>
<text bytes="12437" xml:space="preserve">
--[[--------------------------< P A R A M E T E R S N O T S U P P O R T E D >------------------------------ This is a list of parameters that once were but now are no longer supported: ['albumlink'] = nil, -- unique alias of titlelink used by old cite AV media notes ['albumtype'] = nil, -- controled inappropriate functionality in the old cite AV media notes ['artist'] = nil, -- unique alias of others used by old cite AV media notes ['Author'] = nil, -- non-standard capitalization ['authorformat'] = nil, -- primarily used to support Vancouver format which functionality now part of name-list-format ['author-format'] = nil, -- primarily used to support Vancouver format which functionality now part of name-list-format ['author-name-separator'] = nil,-- primarily used to support Vancouver format which functionality now part of name-list-format ['author-separator'] = nil, -- primarily used to support Vancouver format which functionality now part of name-list-format ['began'] = nil, -- module handles date ranges; cite episode and cite series ['chapterlink'] = nil, -- if ever necessary to link to a chapter article, |chapter= can be wikilinked ['chapter-link'] = nil, -- ['cointerviewers'] = nil, -- unique alias of others used by old cite interview ['day'] = nil, -- deprecated in {{citation/core}} and somehow undeprecated in Module:Citation/CS1 and now finally removed ['director'] = nil, -- unique alias of author used by old cite DVD-notes ['DoiBroken'] = nil, -- not used, non-standard captialization ['Editor'] = nil, -- non-standard capitalization ['editorformat'] = nil, -- primarily used to support Vancouver format which functionality now part of name-list-format ['EditorSurname'] = nil, -- non-standard capitalization ['editor-format'] = nil, -- primarily used to support Vancouver format which functionality now part of name-list-format ['EditorGiven'] = nil, -- non-standard capitalization ['editor-name-separator'] = nil,-- primarily used to support Vancouver format which functionality now part of name-list-format ['editor-separator'] = nil, -- primarily used to support Vancouver format which functionality now part of name-list-format ['Embargo'] = nil, -- not used, non-standard capitalization ['ended'] = nil, -- module handles date ranges; cite episode and cite series ['month'] = nil, -- functionality supported by |date= ['name-separator'] = nil, -- primarily used to support Vancouver format which functionality now part of name-list-format ['notestitle'] = nil, -- unique alias of chapter used by old cite AV media notes ['PPrefix'] = nil, -- non-standard capitalization ['PPPrefix'] = nil, -- not used, non-standard capitalization ['pp-prefix'] = nil, -- not used, not documented ['p-prefix'] = nil, -- not used, not documented ['publisherid'] = nil, -- unique alias of id used by old cite AV media notes and old cite DVD-notes ['Ref'] = nil, -- non-statndard capitalization ['separator'] = nil, -- this functionality now provided by |mode= ['titleyear'] = nil, -- unique alias of origyear used by old cite DVD-notes ['Author#'] = nil, -- non-standard capitalization ['authors#'] = nil, -- no need for multiple lists of author names ['Editor#'] = nil, -- non-standard capitalization ['editors#'] = nil, -- no need for multiple lists of editor names ['EditorGiven#'] = nil, -- non-standard capitalization ['EditorSurname#'] = nil, -- non-standard capitalization ]] --[[--------------------------< S U P P O R T E D P A R A M E T E R S >-------------------------------------- Because a steady-state signal conveys no useful information, whitelist.basic_arguments[] list items can have three values: true - these parameters are valid and supported parameters false - these parameters are deprecated but still supported nil - these parameters are no longer supported (when setting a parameter to nil, leave a comment stating the reasons for invalidating the parameter) ]] local whitelist = {} local basic_arguments = { ['accessdate'] = true, ['access-date'] = true, ['agency'] = true, ['airdate'] = true, ['air-date'] = true, ['archivedate'] = true, ['archive-date'] = true, ['archive-format'] = true, ['archiveurl'] = true, ['archive-url'] = true, ['article'] = true, ['arxiv'] = true, ['ARXIV'] = true, ['asin'] = true, ['ASIN'] = true, ['asin-tld'] = true, ['ASIN-TLD'] = true, ['at'] = true, ['author'] = true, ['author-first'] = true, ['author-last'] = true, ['authorlink'] = true, ['author-link'] = true, ['authormask'] = true, ['author-mask'] = true, ['authors'] = true, ['bibcode'] = true, ['BIBCODE'] = true, ['booktitle'] = true, ['book-title'] = true, ['callsign'] = true, -- cite interview ['call-sign'] = true, -- cite interview ['cartography'] = true, ['chapter'] = true, ['chapter-format'] = true, ['chapterurl'] = true, ['chapter-url'] = true, ['city'] = true, -- cite interview, cite episode, cite serial ['class'] = true, -- cite arxiv and arxiv identifiers ['coauthor'] = false, -- deprecated ['coauthors'] = false, -- deprecated ['conference'] = true, ['conference-format'] = true, ['conferenceurl'] = true, ['conference-url'] = true, ['contribution'] = true, ['contribution-format'] = true, ['contributionurl'] = true, ['contribution-url'] = true, ['contributor'] = true, ['contributor-first'] = true, ['contributor-last'] = true, ['contributor-link'] = true, ['contributor-mask'] = true, ['credits'] = true, -- cite episode, cite serial ['date'] = true, ['deadurl'] = true, ['dead-url'] = true, ['degree'] = true, ['department'] = true, ['dictionary'] = true, ['displayauthors'] = true, ['display-authors'] = true, ['displayeditors'] = true, ['display-editors'] = true, ['docket'] = true, ['doi'] = true, ['DOI'] = true, ['doi-broken'] = true, ['doi_brokendate'] = true, ['doi-broken-date'] = true, ['doi_inactivedate'] = true, ['doi-inactive-date'] = true, ['edition'] = true, ['editor'] = true, ['editor-first'] = true, ['editor-given'] = true, ['editor-last'] = true, ['editorlink'] = true, ['editor-link'] = true, ['editormask'] = true, ['editor-mask'] = true, ['editors'] = true, ['editor-surname'] = true, ['eissn'] = true, ['EISSN'] = true, ['embargo'] = true, ['encyclopaedia'] = true, ['encyclopedia'] = true, ['entry'] = true, ['episode'] = true, -- cite serial only TODO: make available to cite episode? ['episodelink'] = true, -- cite episode and cite serial ['episode-link'] = true, -- cite episode and cite serial ['eprint'] = true, -- cite arxiv and arxiv identifiers ['event'] = true, ['event-format'] = true, ['eventurl'] = true, ['event-url'] = true, ['first'] = true, ['format'] = true, ['given'] = true, ['hdl'] = true, ['HDL'] = true, ['host'] = true, ['id'] = true, ['ID'] = true, ['ignoreisbnerror'] = true, ['ignore-isbn-error'] = true, ['in'] = true, ['inset'] = true, ['institution'] = true, ['interviewer'] = true, --cite interview ['interviewers'] = true, --cite interview ['isbn'] = true, ['ISBN'] = true, ['isbn13'] = true, ['ISBN13'] = true, ['ismn'] = true, ['ISMN'] = true, ['issn'] = true, ['ISSN'] = true, ['issue'] = true, ['jfm'] = true, ['JFM'] = true, ['journal'] = true, ['jstor'] = true, ['JSTOR'] = true, ['language'] = true, ['last'] = true, ['lastauthoramp'] = true, ['last-author-amp'] = true, ['laydate'] = true, ['lay-date'] = true, ['laysource'] = true, ['lay-source'] = true, ['laysummary'] = true, ['lay-summary'] = true, ['lay-format'] = true, ['layurl'] = true, ['lay-url'] = true, ['lccn'] = true, ['LCCN'] = true, ['location'] = true, ['magazine'] = true, ['mailinglist'] = true, -- cite mailing list only ['mailing-list'] = true, -- cite mailing list only ['map'] = true, -- cite map only ['map-format'] = true, -- cite map only ['mapurl'] = true, -- cite map only ['map-url'] = true, -- cite map only ['medium'] = true, ['message-id'] = true, -- cite newsgroup ['minutes'] = true, ['mode'] = true, ['mr'] = true, ['MR'] = true, ['name-list-format'] = true, ['network'] = true, ['newsgroup'] = true, ['newspaper'] = true, ['nocat'] = true, ['no-cat'] = true, ['nopp'] = true, ['no-pp'] = true, ['notracking'] = true, ['no-tracking'] = true, ['number'] = true, ['oclc'] = true, ['OCLC'] = true, ['ol'] = true, ['OL'] = true, ['origyear'] = true, ['orig-year'] = true, ['osti'] = true, ['OSTI'] = true, ['others'] = true, ['p'] = true, ['page'] = true, ['pages'] = true, ['people'] = true, ['periodical'] = true, ['place'] = true, ['pmc'] = true, ['PMC'] = true, ['pmid'] = true, ['PMID'] = true, ['postscript'] = true, ['pp'] = true, ['program'] = true, -- cite interview ['publicationdate'] = true, ['publication-date'] = true, ['publicationplace'] = true, ['publication-place'] = true, ['publisher'] = true, ['quotation'] = true, ['quote'] = true, ['ref'] = true, ['registration'] = true, ['rfc'] = true, ['RFC'] = true, ['scale'] = true, ['script-chapter'] = true, ['script-title'] = true, ['season'] = true, ['section'] = true, ['section-format'] = true, ['sections'] = true, -- cite map only ['sectionurl'] = true, ['section-url'] = true, ['series'] = true, ['serieslink'] = true, ['series-link'] = true, ['seriesno'] = true, ['series-no'] = true, ['seriesnumber'] = true, ['series-number'] = true, ['series-separator'] = true, ['sheet'] = true, -- cite map only ['sheets'] = true, -- cite map only ['ssrn'] = true, ['SSRN'] = true, ['station'] = true, ['subject'] = true, ['subjectlink'] = true, ['subject-link'] = true, ['subscription'] = true, ['surname'] = true, ['template doc demo'] = true, ['template-doc-demo'] = true, ['time'] = true, ['timecaption'] = true, ['time-caption'] = true, ['title'] = true, ['titlelink'] = true, ['title-link'] = true, ['title_zh'] = true, ['trans_chapter'] = true, ['trans-chapter'] = true, ['trans-map'] = true, ['transcript'] = true, ['transcript-format'] = true, ['transcripturl'] = true, ['transcript-url'] = true, ['trans_title'] = true, ['trans-title'] = true, ['translator'] = true, ['translator-first'] = true, ['translator-last'] = true, ['translator-link'] = true, ['translator-mask'] = true, ['type'] = true, ['url'] = true, ['URL'] = true, ['vauthors'] = true, ['veditors'] = true, ['version'] = true, ['via'] = true, ['volume'] = true, ['website'] = true, ['work'] = true, ['year'] = true, ['zbl'] = true, ['ZBL'] = true, ['unified'] = true, ['csbn'] = true, ['CSBN'] = true, } local numbered_arguments = { ['author#'] = true, ['author-first#'] = true, ['author#-first'] = true, ['author-last#'] = true, ['author#-last'] = true, ['author-link#'] = true, ['author#link'] = true, ['author#-link'] = true, ['authorlink#'] = true, ['author-mask#'] = true, ['author#mask'] = true, ['author#-mask'] = true, ['authormask#'] = true, ['contributor#'] = true, ['contributor-first#'] = true, ['contributor#-first'] = true, ['contributor-last#'] = true, ['contributor#-last'] = true, ['contributor-link#'] = true, ['contributor#-link'] = true, ['contributor-mask#'] = true, ['contributor#-mask'] = true, ['editor#'] = true, ['editor-first#'] = true, ['editor#-first'] = true, ['editor#-given'] = true, ['editor-given#'] = true, ['editor-last#'] = true, ['editor#-last'] = true, ['editor-link#'] = true, ['editor#link'] = true, ['editor#-link'] = true, ['editorlink#'] = true, ['editor-mask#'] = true, ['editor#mask'] = true, ['editor#-mask'] = true, ['editormask#'] = true, ['editor#-surname'] = true, ['editor-surname#'] = true, ['first#'] = true, ['given#'] = true, ['last#'] = true, ['subject#'] = true, ['subject-link#'] = true, ['subject#link'] = true, ['subject#-link'] = true, ['subjectlink#'] = true, ['surname#'] = true, ['translator#'] = true, ['translator-first#'] = true, ['translator#-first'] = true, ['translator-last#'] = true, ['translator#-last'] = true, ['translator-link#'] = true, ['translator#-link'] = true, ['translator-mask#'] = true, ['translator#-mask'] = true, } return {basic_arguments = basic_arguments, numbered_arguments = numbered_arguments};
</text>
<sha1>a89dw84jbusxll3qyrdidep7e4z43fb</sha1>
</revision>
</page>
<page>
<title>Module:Crc32lua</title>
<ns>828</ns>
<id>4380282</id>
<revision>
<id>53358919</id>
<parentid>33419107</parentid>
<timestamp>2019-02-26T15:10:54Z</timestamp>
<contributor>
<username>Xiplus</username>
<id>899028</id>
</contributor>
<minor/>
<comment>
已保护“[[模块:Crc32lua]]”：高风险模板（[编辑=仅管理员]（无限期）[移动=仅管理员]（无限期））
</comment>
<model>Scribunto</model>
<format>text/plain</format>
<text bytes="6117" xml:space="preserve">
--[[ LUA MODULE digest.crc32 - CRC-32 checksum implemented entirely in Lua. SYNOPSIS local CRC = require 'digest.crc32lua' print(CRC.crc32 'test') --> 0xD87F7E0C or -662733300 assert(CRC.crc32('st', CRC.crc32('te')) == CRC.crc32 'test') DESCRIPTION This can be used to compute CRC-32 checksums on strings. This is similar to [1-2]. API Note: in the functions below, checksums are 32-bit integers stored in numbers. The number format currently depends on the bit implementation--see DESIGN NOTES below. CRC.crc32_byte(byte [, crc]) --> rcrc Returns CRC-32 checksum `rcrc` of byte `byte` (number 0..255) appended to a string with CRC-32 checksum `crc`. `crc` defaults to 0 (empty string) if omitted. CRC.crc32_string(s, crc) --> bcrc Returns CRC-32 checksum `rcrc` of string `s` appended to a string with CRC-32 checksum `crc`. `crc` defaults to 0 (empty string) if omitted. CRC.crc32(o, crc) --> bcrc This invokes `crc32_byte` if `o` is a byte or `crc32_string` if `o` is a string. CRC.bit This contains the underlying bit library used by the module. It should be considered a read-only copy. DESIGN NOTES Currently, this module exposes the underlying bit array implementation in CRC checksums returned. In BitOp, bit arrays are 32-bit signed integer numbers (may be negative). In Lua 5.2 'bit32' and 'bit.numberlua', bit arrays are 32-bit unsigned integer numbers (non-negative). This is subject to change in the future but is currently done due to (unconfirmed) performance implications. On platforms with 64-bit numbers, one way to normalize CRC checksums to be unsigned is to do `crcvalue % 2^32`, The name of this module is inspired by Perl `Digest::CRC*`. DEPENDENCIES Requires one of the following bit libraries: BitOp "bit" -- bitop.luajit.org -- This is included in LuaJIT and also available for Lua 5.1/5.2. This provides the fastest performance in LuaJIT. Lua 5.2 "bit32" -- www.lua.org/manual/5.2 -- This is provided in Lua 5.2 and is preferred in 5.2 (unless "bit" also happens to be installed). "bit.numberlua" (>=000.003) -- https://github.com/davidm/lua-bit-numberlua This is slowest and used as a last resort. It is only a few times slower than "bit32" though. DOWNLOAD/INSTALLATION If using LuaRocks: luarocks install lua-digest-crc32lua Otherwise, download <https://github.com/davidm/lua-digest-crc32lua/zipball/master>. Alternately, if using git: git clone git://github.com/davidm/lua-digest-crc32lua.git cd lua-digest-crc32lua Optionally unpack: ./util.mk or unpack and install in LuaRocks: ./util.mk install REFERENCES [1] http://www.axlradius.com/freestuff/CRC32.java [2] http://www.gamedev.net/reference/articles/article1941.asp [3] http://java.sun.com/j2se/1.5.0/docs/api/java/util/zip/CRC32.html [4] http://www.dsource.org/projects/tango/docs/current/tango.io.digest.Crc32.html [5] http://pydoc.org/1.5.2/zlib.html#-crc32 [6] http://www.python.org/doc/2.5.2/lib/module-binascii.html LICENSE (c) 2008-2011 David Manura. Licensed under the same terms as Lua (MIT). Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. (end license) --]] local M = {_TYPE='module', _NAME='digest.crc32', _VERSION='0.3.20111128'} local type = type local require = require local setmetatable = setmetatable --[[ Requires the first module listed that exists, else raises like `require`. If a non-string is encountered, it is returned. Second return value is module name loaded (or ''). --]] local function requireany(...) local errs = {} for _,name in ipairs{...} do if type(name) ~= 'string' then return name, '' end local ok, mod = pcall(require, name) if ok then return mod, name end errs[#errs+1] = mod end error(table.concat(errs, '\n'), 2) end local bit, name_ = requireany('bit32', 'bit', 'bit.numberlua') local bxor = bit.bxor local bnot = bit.bnot local band = bit.band local rshift = bit.rshift -- CRC-32-IEEE 802.3 (V.42) local POLY = 0xEDB88320 -- Memoize function pattern (like http://lua-users.org/wiki/FuncTables ). local function memoize(f) local mt = {} local t = setmetatable({}, mt) function mt:__index(k) local v = f(k); t[k] = v return v end return t end -- CRC table. local crc_table = memoize(function(i) local crc = i for _=1,8 do local b = band(crc, 1) crc = rshift(crc, 1) if b == 1 then crc = bxor(crc, POLY) end end return crc end) function M.crc32_byte(byte, crc) crc = bnot(crc or 0) local v1 = rshift(crc, 8) local v2 = crc_table[bxor(crc % 256, byte)] return bnot(bxor(v1, v2)) end local M_crc32_byte = M.crc32_byte function M.crc32_string(s, crc) crc = crc or 0 for i=1,#s do crc = M_crc32_byte(s:byte(i), crc) end return crc end local M_crc32_string = M.crc32_string function M.crc32(s, crc) if type(s) == 'string' then return M_crc32_string(s, crc) else return M_crc32_byte(s, crc) end end M.bit = bit -- bit library used return M
</text>
<sha1>9ie2d9bl0tc1ihbn1ut5tpymz4ext3p</sha1>
</revision>
</page>
<page>
<title>Module:IPAc-en</title>
<ns>828</ns>
<id>5611736</id>
<revision>
<id>60236836</id>
<parentid>43567268</parentid>
<timestamp>2020-06-23T00:22:12Z</timestamp>
<contributor>
<username>Xiplus-abot</username>
<id>2737953</id>
</contributor>
<minor/>
<comment>
已保护“[[Module:IPAc-en]]”：高風險模板：1955引用<!-- [[User:Xiplus-abot/task/3|機器人3]] -->（[编辑=仅允许自动确认用户]（无限期）[移动=仅允许自动确认用户]（无限期））
</comment>
<model>Scribunto</model>
<format>text/plain</format>
<text bytes="4524" xml:space="preserve">
-- This module implements [[Template:IPAc-en]]. local data = mw.loadData('模块:IPAc-en/data') local p = {} -- Global container for tracking categories local categories = {} -- Trims whitespace from a string local function trim(s) return s:match('^%s*(.-)%s*$') end -- This implements [[Template:Nowrap]]. local function makeNowrapSpan(s) local span = mw.html.create('span') :addClass('nowrap') :wikitext(s) return tostring(span) end local function makePronunciationText(id) id = id and string.lower(trim(id)) if id and id ~= '' and data.pronunciation[id] then return data.pronunciation[id].text end end local function getFilepath(file) return mw.getCurrentFrame():callParserFunction('filepath', file) end local function makeAudioLink(file) categories["有音頻讀音的條目"] = true local span = mw.html.create('span') span :addClass('noexcerpt') :wikitext(string.format( '[[File:Speakerlink-new.svg|11px|link=%s|聆聽]]', getFilepath(file) )) :tag('sup') :tag('span') :css('color', '#00e') :css('font', 'bold 80% sans-serif') :css('padding', '0 .1em') :addClass('IPA') :wikitext(string.format('[[:File:%s|i]]', file)) return tostring(span) end -- This adds a tooltip icon to a label. It implements [[Template:H:title]]. local function makeTooltip(label, tooltip) local span = mw.html.create('span') :attr('title', tooltip) :wikitext(label) return tostring(span) end local function formatPhonemeGroup(phonemes) if #phonemes > 0 then local span = mw.html.create('span') :css('border-bottom', '1px dotted') :wikitext(table.concat(phonemes)) return tostring(span) else return '' end end local function renderCategories() local ret = {} for cat in pairs(categories) do table.insert(ret, string.format('[[Category:%s]]', cat)) end table.sort(ret) return table.concat(ret) end function p._main(args) local ret = {} local i = 0 -- Keeps track of numbered args -- Pronunciation do local pron = {} while true do i = i + 1 local pronItem = makePronunciationText(args[i]) if pronItem then pron[#pron + 1] = pronItem pron[#pron + 1] = ' ' else break end end if #pron > 0 then ret[#ret + 1] = string.format( '<small>%s</small>', table.concat(pron) ) end end -- Audio link do local file = args.audio and trim(args.audio) if file and file ~= '' then ret[#ret + 1] = makeAudioLink(file) end end -- Phonemes do -- Loop through the numbered args, separating them into phoneme groups -- and separator strings (both called "words" for convenience). We only -- underline the phoneme groups, not the separators. local words = {} words[#words + 1] = '/' -- Opening slash i = i - 1 -- Set up i again as it was changed in the pronunciation loop local id repeat local phonemes = {} local isWordEnd = false while not isWordEnd do i = i + 1 id = args[i] id = id and trim(id) if not id then isWordEnd = true words[#words + 1] = formatPhonemeGroup(phonemes) elseif id ~= '' then local t = data.phonemes[id] if not t then -- We were passed an invalid id. isWordEnd = true categories["有IPAc-en不支援的輸入的條目"] = true words[#words + 1] = formatPhonemeGroup(phonemes) words[#words + 1] = makeTooltip( "'''[不支援的輸入]'''", '不支援的符號' ) elseif not t.label then -- The data module contains bad data, so throw an error. error(string.format( "找不到id '%s'的標籤", tostring(id) )) elseif t.tooltip then -- We are dealing with a regular phoneme. phonemes[#phonemes + 1] = makeTooltip( t.label, t.tooltip ) else -- We are dealing with a separator. isWordEnd = true words[#words + 1] = formatPhonemeGroup(phonemes) words[#words + 1] = t.label end end end until not id words[#words + 1] = '/' -- Closing slash -- Wrap the words in a link to IPA help. local span = mw.html.create('span') :addClass('IPA nopopups') :wikitext(string.format( '[[Help:英語國際音標|%s]]', table.concat(words) )) ret[#ret + 1] = tostring(span) end -- Nowrap and categories ret = makeNowrapSpan(table.concat(ret)) .. renderCategories() -- Reset the categories table in case we are run again. categories = {} return ret end function p.main(frame) return p._main(frame:getParent().args) end return p
</text>
<sha1>djaafuftkm0nqid6dtp0m3xke3kj13q</sha1>
</revision>
</page>
<page>
<title>Module:IPAc-en/data</title>
<ns>828</ns>
<id>5611739</id>
<revision>
<id>60236840</id>
<parentid>43567331</parentid>
<timestamp>2020-06-23T00:22:22Z</timestamp>
<contributor>
<username>Xiplus-abot</username>
<id>2737953</id>
</contributor>
<minor/>
<comment>
已保护“[[Module:IPAc-en/data]]”：高風險模板：1955引用<!-- [[User:Xiplus-abot/task/3|機器人3]] -->（[编辑=仅允许自动确认用户]（无限期）[移动=仅允许自动确认用户]（无限期））
</comment>
<model>Scribunto</model>
<format>text/plain</format>
<text bytes="1196" xml:space="preserve">
-- This module processes data for [[Module:IPAc-en]]. It is intended to be -- loaded with mw.loadData. local PRONUNCIATION_MODULE = '模块:IPAc-en/pronunciation' local PHONEME_MODULE = '模块:IPAc-en/phonemes' local function makeData(oldData) local newData = {} for i, old in ipairs(oldData) do local new = {} for k, v in pairs(old) do if k ~= 'aliases' and k ~= 'code' then new[k] = v end end newData[old.code] = new if old.aliases then for i, alias in ipairs(old.aliases) do newData[alias] = new end end end return newData end local function main() local pronunciation = makeData(require(PRONUNCIATION_MODULE)) local phonemes = makeData(require(PHONEME_MODULE)) -- Check that no pronunciation keys are also contained in the phonemes -- data. This would cause silent, hard-to-debug errors if it went -- unchecked, so make it cause a big red error message instead. for id in pairs(pronunciation) do if phonemes[id] then error(string.format( "重複的ID '%s' - 在 %s 及 %s", id, PRONUNCIATION_MODULE, PHONEME_MODULE )) end end return { pronunciation = pronunciation, phonemes = phonemes, } end return main()
</text>
<sha1>dfi75cbs43zy25v56kd525wi5akjpvr</sha1>
</revision>
</page>
<page>
<title>Module:IPAc-en/phonemes</title>
<ns>828</ns>
<id>5611765</id>
<revision>
<id>62863540</id>
<parentid>60236842</parentid>
<timestamp>2020-11-20T08:39:35Z</timestamp>
<contributor>
<username>Tjmj</username>
<id>214451</id>
</contributor>
<comment>參照EN維基2020-10-31 00:47版本</comment>
<model>Scribunto</model>
<format>text/plain</format>
<text bytes="11086" xml:space="preserve">
-- This module contains phoneme data for [[Module:IPAc-en]]. return { -- CONSONANTS { code = "b", label = "b", tooltip = "「buy」的「b」音", }, { code = "d", label = "d", tooltip = "「dye」的「d」音", }, { code = "dj", aliases = {"dy", "dʲ"}, label = "dj", tooltip = "/dj/：「dew」的「d」音", }, { code = "dʒ", aliases = {"dZ", "ʤ"}, label = "dʒ", tooltip = "/dʒ/：「jam」的「j」音", }, { code = "ð", aliases = {"D"}, label = "ð", tooltip = "/ð/：「thy」的「th」音", }, { code = "f", label = "f", tooltip = "「find」的「f」音", }, { code = "ɡ", aliases = {"g"}, label = "ɡ", tooltip = "/ɡ/：「guy」的「g」音", }, { code = "h", label = "h", tooltip = "「hi」的「h」音", }, { code = "hw", aliases = {"ʍ"}, label = "hw", tooltip = "/hw/：「why」的「wh」音", }, { code = "j", aliases = {"y"}, label = "j", tooltip = "/j/：「yes」的「y」音", }, { code = "k", label = "k", tooltip = "「kind」的「k」音", }, { code = "l", label = "l", tooltip = "「lie」的「l」音", }, { code = "lj", aliases = {"ly", "lʲ"}, label = "lj", tooltip = "/lj/：「lute」的「l」音", }, { code = "m", label = "m", tooltip = "「my」的「m」音", }, { code = "n", label = "n", tooltip = "「nigh」的「n」音", }, { code = "nj", aliases = {"ny", "nʲ"}, label = "nj", tooltip = "/nj/：「new」的「n」音", }, { code = "ŋ", aliases = {"N", "ng"}, label = "ŋ", tooltip = "/ŋ/：「sing」的「ng」音", }, { code = "p", label = "p", tooltip = "「pie」的「p」音", }, { code = "r", aliases = {"ɹ", "ɻ"}, label = "r", tooltip = "「rye」的「r」音", }, { code = "flipr", label = "ɹ", tooltip = "「rye」的「ɹ」音", }, { code = "s", label = "s", tooltip = "「sigh」的「s」音", }, { code = "sj", aliases = {"sy", "sʲ"}, label = "sj", tooltip = "/sj/：「consume」的「s」音", }, { code = "ʃ", aliases = {"S", "sh"}, label = "ʃ", tooltip = "/ʃ/：「shy」的「sh」音", }, { code = "t", label = "t", tooltip = "「tie」的「t」音", }, { code = "tj", aliases = {"ty", "tʲ"}, label = "tj", tooltip = "/tj/：「tune」的「t」音", }, { code = "tʃ", aliases = {"tS", "ʧ", "ch"}, label = "tʃ", tooltip = "/tʃ/：「China」的「ch」音", }, { code = "θ", aliases = {"T"}, label = "θ", tooltip = "/θ/：「thigh」的「th」音", }, { code = "θj", aliases = {"θy", "θʲ"}, label = "θj", tooltip = "/θj/：「enthuse」的「th」音", }, { code = "v", label = "v", tooltip = "「vie」的「v」音", }, { code = "w", label = "w", tooltip = "「wind」的「w」音", }, { code = "z", label = "z", tooltip = "「zoom」的「z」音", }, { code = "zj", aliases = {"zy", "zʲ"}, label = "zj", tooltip = "/zj/：「Zeus」的「Z」音", }, { code = "ʒ", aliases = {"Z", "zh"}, label = "ʒ", tooltip = "/ʒ/：「pleasure」的「s」音", }, -- VOWELS { code = "ɑː", aliases = {"A:", "ɑ:", "aː", "a:"}, label = "ɑː", tooltip = "/ɑː/：「father」的「a」音", }, { code = "ɑːr", aliases = {"ɑɹ", "aːr", "a:r", "ɑ:r", "ɑr"}, label = "ɑːr", tooltip = "/ɑːr/：「far」的「ar」音", }, { code = "ɒ", aliases = {"Q"}, label = "ɒ", tooltip = "/ɒ/：「body」的「o」音", }, { code = "ɒr", aliases = {"Qr"}, label = "ɒr", tooltip = "/ɒr/：「moral」的「or」音", }, { code = "æ", aliases = {"ae", "{"}, label = "æ", tooltip = "/æ/：「bad」的「a」音", }, { code = "ær", aliases = {"aer", "&r", "æɹ"}, label = "ær", tooltip = "/ær/：「marry」的「arr」音", }, { code = "aɪ", aliases = {"ai", "aI"}, label = "aɪ", tooltip = "/aɪ/：「tide」的「i」音", }, { code = "aɪər", aliases = {"aɪr", "aIr", "aɪə"}, label = "aɪər", tooltip = "/aɪər/：「fire」的「ire」音", }, { code = "aʊ", aliases = {"au", "aU"}, label = "aʊ", tooltip = "/aʊ/：「mouth」的「ou」音", }, { code = "aʊər", aliases = {"aʊr", "aUr", "aʊə", "aur"}, label = "aʊər", tooltip = "/aʊər/：「hour」的「our」音", }, { code = "ɛ", aliases = {"E"}, label = "ɛ", tooltip = "/ɛ/：「dress」的「e」音", }, { code = "ɛr", aliases = {"Er"}, label = "ɛr", tooltip = "/ɛr/：「merry」的「err」音", }, { code = "eɪ", aliases = {"ei", "eI", "eː", "e:"}, label = "eɪ", tooltip = "/eɪ/：「face」的「a」音", }, { code = "ɛər", aliases = {"eir", "eIr", "e@r", "E@r", "ɛɪɹ", "eɪr", "eːr", "e:r", "ɛəɹ", "ɛə", "ɛːr", "ɛ:r", "ɛː", "ɛ:", "E:", "E:r"}, label = "ɛər", tooltip = "/ɛər/：「bare」的「are」音", }, { code = "ɛəˈr", aliases = {"ɛə'r", "eəˈr", "eə'r", "e@'r", "E@'r", "ɛːˈr", "E:'r"}, label = "ɛəˈr", tooltip = "/ɛəˈr/：「thereof」的「ere」音", }, { code = "ɛəˌr", aliases = {"ɛə,r", "eəˌr", "eə,r", "E@,r", "E@%r", "e@,r", "e@%r", "ɛːˌr", "E:,r", "E:%r"}, label = "ɛəˌr", tooltip = "/ɛəˌr/：「thereof」的「ere」音", }, { code = "ɪ", aliases = {"I", "ᵻ"}, label = "ɪ", tooltip = "/ɪ/：「kit」的「i」音", }, { code = "ɪr", label = "ɪr", tooltip = "/ɪr/：「mirror」的「irr」音", }, { code = "iː", aliases = {"i:"}, label = "iː", tooltip = "/iː/：「fleece」的「ee」音", }, { code = "ɪər", aliases = {"i:r", "iːr", "I@r", "i@r", "ɪəɹ", "iːɹ", "ɪə"}, label = "ɪər", tooltip = "/ɪər/：「near」的「ear」音", }, { code = "ɪəˈr", aliases = {"ɪə'r", "I@'r"}, label = "ɪəˈr", tooltip = "/ɪəˈr/：「spheroidal」的「er」音", }, { code = "ɪəˌr", aliases = {"ɪə,r", "I@,r", "I@%r"}, label = "ɪəˌr", tooltip = "/ɪəˌr/：「spheroidal」的「er」音", }, { code = "oʊ", aliases = {"o:", "oː", "ou", "oU", "@u", "@U", "əʊ", "əu", "oʊ-"}, label = "oʊ", tooltip = "/oʊ/：「code」的「o」音", }, { code = "ɔː", aliases = {"O", "O:", "ɔ:", "ɒː", "Q:"}, label = "ɔː", tooltip = "/ɔː/：「fraud」的「au」音", }, { code = "ɔːr", aliases = {"Or", "ɔɹ", "ɔ(r)", "ɔr", "ɔər", "oUr", "ɔəɹ", "ɔʊɹ", "oʊɹ", "oʊr", "oːr", "o:r", "ɔə", "ɔə(r)"}, label = "ɔːr", tooltip = "/ɔːr/：「war」的「ar」音", }, { code = "ɔɪ", aliases = {"oj", "ɔj", "oi", "oɪ", "ɔi", "OI", "oy"}, label = "ɔɪ", tooltip = "/ɔɪ/：「choice」的「oi」音", }, { code = "ɔɪər", aliases = {"ɔɪr", "oyr", "ɔɪə"}, label = "ɔɪər", tooltip = "/ɔɪər/：「loir」的「oir」音", }, { code = "ʊ", aliases = {"U", "ᵿ"}, label = "ʊ", tooltip = "/ʊ/：「push」的「u」音", }, { code = "ʊr", aliases = {"Ur"}, label = "ʊr", tooltip = "/ʊr/：「courier」的「our」音", }, { code = "uː", aliases = {"u:"}, label = "uː", tooltip = "/uː/：「goose」的「oo」音", }, { code = "ʊər", aliases = {"u:r", "uːr", "u@r", "U@r", "ʊəɹ", "ʊə"}, label = "ʊər", tooltip = "/ʊər/：「tour」的「our」音", }, { code = "ʊəˈr", aliases = {"ʊə'r", "U@'r"}, label = "ʊəˈr", tooltip = "/ʊəˈr/：「plurality」的「ur」音", }, { code = "ʊəˌr", aliases = {"ʊə,r", "U@,r", "U@%r"}, label = "ʊəˌr", tooltip = "/ʊəˌr/：「plurality」的「ur」音", }, { code = "ʌ", aliases = {"V"}, label = "ʌ", tooltip = "/ʌ/：「cut」的「u」音", }, { code = "ʌr", aliases = {"Vr", "ʌɹ"}, label = "ʌr", tooltip = "/ʌr/：「hurry」的「urr」音", }, { code = "ɜːr", aliases = {"ɝː", "ɝ", "3r", "3:r", "əːr", "@:r", "ɜɹ", "ɜ(r)", "ɜr"}, label = "ɜːr", tooltip = "/ɜːr/：「fur」的「ur」音", }, { code = "ə", aliases = {"@"}, label = "ə", tooltip = "/ə/：「about」的「a」音", }, -- SYLLABIC CONSONANTS { code = "ər", aliases = {"ɚ", "@r", "əɹ", "ə(r)"}, label = "ər", tooltip = "/ər/：「letter」的「er」音", }, { code = "əl", aliases = {"@l", "ᵊl", "l̩"}, label = "əl", tooltip = "/əl/：「bottle」的「le」音", }, { code = "ən", aliases = {"@n", "ᵊn", "n̩"}, label = "ən", tooltip = "/ən/：「button」的「on」音", }, { code = "əm", aliases = {"@m", "ᵊm", "m̩"}, label = "əm", tooltip = "/əm/：「rhythm」的「m」音", }, -- ARCHIPHONEMES { code = "i", label = "i", tooltip = "/i/：「happy」的「y」音", }, { code = "u", label = "u", tooltip = "/u/：「influence」的「u」音", }, -- MARGINAL SEGMENTS { code = "x", label = "x", aliases = {"kh"}, tooltip = "/x/：「loch」的「ch」音", }, { code = "ʔ", aliases = {"?"}, label = "ʔ", tooltip = "/ʔ/：the catch in 'uh-oh'", }, { code = "ɒ̃", aliases = {"ɑ̃", "ɒ~", "ɑ~", "Q~"}, label = "ɒ̃", tooltip = "/ɒ̃/：「vin blanc」的「an」鼻音", }, { code = "æ̃", aliases = {"ae~", "{~", "ã", "a~"}, label = "æ̃", tooltip = "/æ̃/：「vin blanc」的「in」鼻音", }, { code = "ɜː", aliases = {"3", "3:", "ɜ:", "ɜ", "əː", "@:"}, label = "ɜː", tooltip = "/ɜː/：「nurse」的無r「ur」音", }, -- SUPRASEGMENTALS { code = "ˈ", aliases = {"'", '"'}, label = "ˈ", tooltip = "/ˈ/：後面為主重音", }, { code = "ˌ", aliases = {",", "%"}, label = "ˌ", tooltip = "/ˌ/：後面為次重音", }, { code = ".", aliases = {"·"}, label = ".", tooltip = "/./：音節斷裂", }, { code = "#", label = "#", tooltip = "/#/：morpheme break", }, { code = "!", label = "&#124;", tooltip = "/|/：prosodic break (minor)", }, { code = "!!", aliases = {"‖"}, label = "‖", tooltip = "/‖/：prosodic break (major)", }, -- SEPARATORS -- Tables without tooltip text are used as word separators. In addition to -- not having any tooltip text in the template output, they are not -- underlined. { code = "_", label = "<span class=\"wrap\"> </span>", }, { code = "nbsp", aliases = {"&nbsp;"}, label = " ", }, { code = ",_", label = ",<span class=\"wrap\"> </span>", }, { code = "-", aliases = {"–"}, label = "-", }, { code = "(", label = "(", }, { code = ")", label = ")", }, -- This is useful for highly variable words in place names, which are not -- important to transcribe. { code = "...", label = "&thinsp;...<span class=\"wrap\">&thinsp;</span>", }, -- Obsolete combinations, kept for compatibility { code = "juː", label = "juː", tooltip = "/juː/：「cute」的「u」音", }, { code = "jʊər", label = "jʊər", tooltip = "/jʊər/：「cure」的「ure」音", }, }
</text>
<sha1>hrpw35iv2rssxs7qq3qaiu2glv0doii</sha1>
</revision>
</page>
<page>
<title>Module:IPAc-en/pronunciation</title>
<ns>828</ns>
<id>5611752</id>
<revision>
<id>60236845</id>
<parentid>43568240</parentid>
<timestamp>2020-06-23T00:22:42Z</timestamp>
<contributor>
<username>Xiplus-abot</username>
<id>2737953</id>
</contributor>
<minor/>
<comment>
已保护“[[Module:IPAc-en/pronunciation]]”：高風險模板：1955引用<!-- [[User:Xiplus-abot/task/3|機器人3]] -->（[编辑=仅允许自动确认用户]（无限期）[移动=仅允许自动确认用户]（无限期））
</comment>
<model>Scribunto</model>
<format>text/plain</format>
<text bytes="755" xml:space="preserve">
-- This module contains pronunciation-key data for [[Module:IPAc-en]]. return { { code = 'lang', aliases = {'english'}, text = '英語' }, { code = 'pron', aliases = {'pronunciation', 'icon'}, text = '發音：' }, { code = 'local', text = '當地' }, { code = 'ipa', text = '[[國際音標|IPA]]' }, { code = 'aus', text = '[[澳大利亚英语|澳洲]]' }, { code = 'ca', text = '[[加拿大英语|加拿大]]' }, { code = 'ie', text = '[[爱尔兰英语|愛爾蘭]]' }, { code = 'nz', text = '[[新西兰英语|新西蘭]]' }, { code = 'uk', text = '[[英國英語|英國]]' }, { code = 'us', text = '[[美国英语|美國]]' }, { code = 'za', text = '[[南非英语|南非]]' }, }
</text>
<sha1>bvopcv21rwzbfi1crd38kagw2233hvx</sha1>
</revision>
</page>
<page>
<title>Module:Icon</title>
<ns>828</ns>
<id>5529738</id>
<revision>
<id>61203237</id>
<parentid>46626891</parentid>
<timestamp>2020-08-17T04:08:20Z</timestamp>
<contributor>
<username>Xiplus-abot</username>
<id>2737953</id>
</contributor>
<minor/>
<comment>
已更改“[[Module:Icon]]”的保护等级：高風險模板：29469引用<!-- [[User:Xiplus-abot/task/3|機器人3]] -->（[编辑=仅允许模板编辑员和管理员]（无限期）[移动=仅允许模板编辑员和管理员]（无限期））
</comment>
<model>Scribunto</model>
<format>text/plain</format>
<text bytes="659" xml:space="preserve">
-- This module implements [[Template:Icon]]. local data = mw.loadData('Module:Icon/data') local p = {} function p._main(args) local code = args.class or args[1] local iconData if code then code = code:match('^%s*(.-)%s*$'):lower() -- trim whitespace and put in lower case iconData = data[code] end if not iconData then iconData = data._DEFAULT end return string.format( '[[File:%s%s|%s|link=]]', iconData.image, iconData.tooltip and '|' .. iconData.tooltip or '', args.size or '16x16px' ) end function p.main(frame) local args = {} for k, v in pairs(frame:getParent().args) do args[k] = v end return p._main(args) end return p
</text>
<sha1>4z7aot4f3pniw3w3az56t0kryggws40</sha1>
</revision>
</page>
<page>
<title>Module:Icon/data</title>
<ns>828</ns>
<id>5529737</id>
<revision>
<id>61203238</id>
<parentid>60829986</parentid>
<timestamp>2020-08-17T04:08:30Z</timestamp>
<contributor>
<username>Xiplus-abot</username>
<id>2737953</id>
</contributor>
<minor/>
<comment>
已更改“[[Module:Icon/data]]”的保护等级：高風險模板：29469引用<!-- [[User:Xiplus-abot/task/3|機器人3]] -->（[编辑=仅允许模板编辑员和管理员]（无限期）[移动=仅允许模板编辑员和管理员]（无限期））
</comment>
<model>Scribunto</model>
<format>text/plain</format>
<text bytes="8945" xml:space="preserve">
-- This module stores icon data for [[Module:Icon]]. -------------------------------------------------------------------------------- -- Icon data -------------------------------------------------------------------------------- local data = { fa = { image = "Featured article star.svg", tooltip = "典范条目", }, far = { image = "Cscr-star piece.png", tooltip = "典范条目候选", }, farc = { image = "Cscr-star piece.png", tooltip = "典范条目重审", }, ffa = { aliases = {"dfa"}, image = "Featured article star - cross.svg", tooltip = "已被撤销的典范条目", }, fac = { aliases = {"fan"}, image = "Cscr-candidate.svg", tooltip = "典范条目评选", }, ffac = { aliases = {"nofa"}, image = "Featured article star - cross.svg", tooltip = "落选典范条目", }, fl = { image = "Featured article star.svg", tooltip = "特色列表", }, flrc = { aliases = {"flr"}, image = "Cscr-star piece.png", tooltip = "特色列表重审", }, ffl = { aliases = {"dfl"}, image = "Cscr-featured-strike.svg", tooltip = "已被撤销的特色列表", }, flc = { aliases = {"fln"}, image = "Cscr-candidate.svg", tooltip = "特色列表候选", }, fflc = { aliases = {"nofl"}, image = "Featured article star - cross.svg", tooltip = "落选特色列表", }, a = { image = "Symbol a class.svg", tooltip = "甲级条目", }, dac = { aliases = {"daa"}, image = "Symbol unsupport A vote.svg", tooltip = "已降级甲级条目", }, acc = { aliases = {"acn", "aac"}, image = "A candidate.svg", tooltip = "甲级条目候选", }, noac = { aliases = {"faac"}, image = "Symbol unsupport A vote.svg", tooltip = "落选甲级条目", }, ga = { image = "Symbol support vote.svg", tooltip = "优良条目", }, gar = { image = "GA Candidate Neutral vote(ChaosNil).svg", tooltip = "优良条目重审", }, dga = { image = "Symbol unsupport vote.svg", tooltip = "已被撤销的优良条目", }, gan = { aliases = {"gac"}, image = "GA candidate.svg", tooltip = "优良条目候选", }, ga2 = { image = "Symbol neutral vote.svg", tooltip = "寻求意见的优良条目", }, gah = { image = "Symbol wait.svg", tooltip = "搁置的优良条目", }, fgan = { aliases = {"noga", "gaf", "gf"}, image = "Symbol oppose vote.svg", tooltip = "落选优良条目", }, fp = { image = "Cscr-featured.svg", tooltip = "特色图片", }, fpc = { aliases = {"fpn"}, image = "Cscr-candidate.svg", tooltip = "特色图片候选", }, ffpc = { aliases = {"nofp"}, image = "Featured article star - cross.svg", tooltip = "落选特色图片", }, ffp = { image = "Featured article star - cross.svg", tooltip = "已被撤销的特色图片", }, vp = { image = "ENWP VP Logo.svg", tooltip = "珍贵图片", }, vpc = { image = "Valued pics 1.svg", tooltip = "珍贵图片候选", }, fs = { image = "Cscr-featured.svg", tooltip = "特色声音", }, ffs = { image = "Cscr-former.svg", tooltip = "已被撤销的特色声音", }, fsc = { image = "Cscr-candidate.svg", tooltip = "特色声音候选", }, fpo = { image = "Cscr-featured.svg", tooltip = "特色主题", }, fpor = { image = "Cscr-star piece.png", tooltip = "特色主题评选", }, ffpo = { image = "Featured article star - cross.svg", tooltip = "已被撤销的特色主题", }, fpoc = { image = "Cscr-candidate.svg", tooltip = "特色主题候选", }, ft = { image = "Cscr-featuredtopic.svg", tooltip = "特色话题", }, ftrc = { image = "Cscr-star piece.png", tooltip = "特色话题重审", }, fft = { aliases = {"dft"}, image = "DFT candidate_cluster.svg", tooltip = "已被撤销的特色话题", }, ftc = { aliases = {"ftn"}, image = "FT candidate cluster.svg", tooltip = "特色话题候选", }, gt = { image = "Support cluster.svg", tooltip = "优良话题", }, gtrc = { image = "Symbol unsupport vote.svg", tooltip = "优良话题重审", }, gtc = { aliases = {"gtn"}, image = "GA candidate cluster.svg", tooltip = "优良话题候选", }, bplus = { aliases = {"b+"}, image = "Symbol bplus class.svg", tooltip = "乙+级条目", }, b = { image = "Symbol b class.svg", tooltip = "乙级条目", }, br = { aliases = {"bcr"}, image = "Bclass-checklist.svg", tooltip = "乙级条目评选", }, c = { image = "Symbol c class.svg", tooltip = "丙级条目", }, start = { image = "Symbol start class.svg", tooltip = "初级条目", }, stub = { image = "Symbol stub class.svg", tooltip = "小作品级条目", }, list = { aliases = {"comparison"}, image = "Symbol list class.svg", tooltip = "列表级条目", }, no = { image = "Crystal button cancel.svg", tooltip = "未知分级条目", }, book = { image = "Symbol book class2.svg", tooltip = "维基百科图书", }, category = { aliases = {"cat", "categ"}, image = "Folder Hexagonal Icon.svg", tooltip = "分类", }, disambiguation = { aliases = {"dab", "disamb", "disambig"}, image = "Symbol dab class.svg", tooltip = "消歧义页", }, image = { aliases = {"file"}, image = "Video-x-generic.svg", tooltip = "文件", }, portal = { image = "Portal-puzzle.svg", tooltip = "主题", }, project = { image = "Symbol information vote.svg", tooltip = "项目页面", }, redirect = { aliases = {"red", "redir"}, image = "Symbol redirect vote2.svg", tooltip = "重定向页", }, template = { aliases = {"temp", "templ"}, image = "Symbol template class.svg", tooltip = "模板", }, essay = { image = "Essay.svg", tooltip = "论述", }, na = { image = "Symbol neutral vote.svg", tooltip = "非条目页面", }, aa = { image = "Yes check.svg", tooltip = "限定主题的已审条目", }, da = { image = "Symbol oppose vote.svg", tooltip = "降级条目", }, dyk = { image = "Symbol question.svg", tooltip = "你知道吗？", }, dyk2 = { image = "DYK questionmark icon.svg", tooltip = "你知道吗？", }, pr = { image = "Nuvola apps kedit.png", tooltip = "同行评审", }, ppr = { image = "Nuvola apps kedit.png", tooltip = "主题同行评审", }, q = { aliases = {"question"}, image = "Symbol question.svg", tooltip = "问题", }, qi = { image = "Quality images logo.svg", tooltip = "维基共享资源优质图像", }, vi = { image = "Valued image seal.svg", tooltip = "维基共享资源珍贵图像", }, tfa = { image = "Wikipedia-logo.svg", tooltip = "今日典范条目", }, itn = { image = "Globe current.svg", tooltip = "新闻动态", }, otd = { image = "Nuvola apps date.svg", tooltip = "历史上的今天", }, wikiproject = { image = "People icon.svg", tooltip = "专题", }, wikipedia = { image = "Wikipedia-logo.svg", tooltip = "维基百科页面", }, commons = { image = "Commons-logo.svg", tooltip = "共享资源页面", }, wikiquote = { image = "Wikiquote-logo.svg", tooltip = "维基语录页面", }, wikiversity = { image = "Wikiversity-logo.svg", tooltip = "维基学院页面", }, wikibooks = { image = "Wikibooks-logo.svg", tooltip = "维基教科书页面", }, wikisource = { image = "Wikisource-logo.svg", tooltip = "维基文库页面", }, wiktionary = { image = "Wiktionary-logo.svg", tooltip = "维基词典页面", }, wikinews = { image = "Wikinews-logo.svg", tooltip = "维基新闻页面", }, wikispecies = { image = "Wikispecies-logo.svg", tooltip = "维基物种页面", }, wikidata = { image = "Wikidata-logo.svg", tooltip = "维基数据页面", }, wikivoyage = { image = "Wikivoyage-logo.svg", tooltip = "维基导游页面", }, meta = { image = "Wikimedia Community Logo.svg", tooltip = "元维基页面", }, four = { image = "Four Award.svg", tooltip = "Four Award", }, million = { image = "Million award logo.svg", tooltip = "Million Award", }, dc = { aliases = {"DC"}, image = "Wikipedia_zh_dc_logo.svg", tooltip = "维基百科动员令", }, wam = { aliases = {"WAM"}, image = "WAM_logo_without_text.svg", tooltip = "维基百科亚洲月", }, -- WP:VA usage vaa = { image = "Yes check.svg", tooltip = "> 30 KB", }, vab = { image = "Yes check lines.svg", tooltip = "10 - 30 KB", }, vac = { image = "QSicon in Arbeit.svg", tooltip = "3 - 10 KB", }, _DEFAULT = { image = "Symbol question.svg", } } -------------------------------------------------------------------------------- -- End icon data -------------------------------------------------------------------------------- -- Make aliases work the same as normal keys, and remove the "aliases" subtables. for k, t in pairs(data) do if t.aliases then for i, alias in ipairs(t.aliases) do data[alias] = t end t.aliases = nil end data[k] = t end return data
</text>
<sha1>kvseaypp27tubywjumseegenw0f4ie1</sha1>
</revision>
</page>
<page>
<title>Module:If empty</title>
<ns>828</ns>
<id>5060516</id>
<revision>
<id>50321970</id>
<parentid>37477432</parentid>
<timestamp>2018-07-09T03:09:26Z</timestamp>
<contributor>
<username>Xiplus</username>
<id>899028</id>
</contributor>
<minor/>
<comment>
已保护“[[模块:If empty]]”：高风险模板（[编辑=仅管理员]（无限期）[移动=仅管理员]（无限期））
</comment>
<model>Scribunto</model>
<format>text/plain</format>
<text bytes="1018" xml:space="preserve">
local p = {} function p.main(frame) local args = require('Module:Arguments').getArgs(frame, {wrappers = 'Template:If empty', removeBlanks = false}) -- For backwards compatibility reasons, the first 8 parameters can be unset instead of being blank, -- even though there's really no legitimate use case for this. At some point, this will be removed. local lowestNil = math.huge for i = 8,1,-1 do if args[i] == nil then args[i] = '' lowestNil = i end end for k,v in ipairs(args) do if v ~= '' then if lowestNil < k then -- If any uses of this template depend on the behavior above, add them to a tracking category. -- This is a rather fragile, convoluted, hacky way to do it, but it ensures that this module's output won't be modified -- by it. frame:extensionTag('ref', '[[Category:Instances of Template:If_empty missing arguments]]', {group = 'TrackingCategory'}) frame:extensionTag('references', '', {group = 'TrackingCategory'}) end return v end end end return p
</text>
<sha1>6qq12x2ek97w2n518wugesqunsqh778</sha1>
</revision>
</page>
<page>
<title>Module:Ilh</title>
<ns>828</ns>
<id>5545048</id>
<revision>
<id>46652995</id>
<parentid>45761448</parentid>
<timestamp>2017-10-21T11:11:13Z</timestamp>
<contributor>
<username>Xiplus</username>
<id>899028</id>
</contributor>
<minor/>
<comment>
已保护“[[模块:Ilh]]”：高风险模板（[编辑=仅管理员]（无限期）[移动=仅管理员]（无限期））
</comment>
<model>Scribunto</model>
<format>text/plain</format>
<text bytes="5555" xml:space="preserve">
local ilh = {} local getArgs local yesno = require('Module:Yesno') local args --local frameArgs local COMMON_TAIL='</span>' local MODEL={ frame_head='<span class="ilh-all %s" data-orig-title="%s" data-lang-code="%s" data-lang-name="%s" data-foreign-title="%s">' ,frame_tail=COMMON_TAIL ,page_head='<span class="ilh-page">' ,page_tail=COMMON_TAIL ,comment_head='<span class="noprint ilh-comment">（' ,comment_tail='）'..COMMON_TAIL ,lang_head='<span class="ilh-lang">' ,lang_tail=COMMON_TAIL ,colon='<span class="ilh-colon">：</span>' ,link_head='<span class="ilh-link">' ,link_body='-{[[:%s:%s|<span lang="%s" dir="auto">%s</span>]]}-' ,link_tail=COMMON_TAIL } local clazz_pageExist_framehead='ilh-blue' local TRA_CAT='[[Category:有蓝链却未移除内部链接助手模板的页面]]' function ilh.main(frame) if not getArgs then getArgs = require('Module:Arguments').getArgs end args = getArgs(frame, {parentFirst=true}) return ilh._ilh(arg) end function ilh._ilh(arg) --frameArgs = getArgs(frame, {frameOnly=true}) local context={} context["isMainPage"]=ilh.isMainPage() context["localPage"]=args[1] context["foreignPage"]=args[2] or args[1] --如果{{{2}}}不传入的话 context["displayName"]=ilh.displayName(args) context["langCode"]=args["lang-code"] context["lang"]=args["lang"] context["nocat"]=yesno( args["nocat"] , false ) context["isExist"]= (args["$exist$"] and args["$exist$"]==1) or ilh.isExist(context["localPage"]) local curPage_obj=mw.title.getCurrentTitle() context["isNoCatWithNamespace"]=curPage_obj:inNamespaces(2,828) --User,Module --context["curPageNamespace"]=curPage_obj.namespace return (context["isMainPage"] and ilh.onlyLink(context)) or ilh.functionLink(context) end function ilh.onlyLink(context) return ( context["isExist"] and mw.ustring.format( '[[%s|%s]]', context["localPage"], context["displayName"] ) ) or context["displayName"] end function ilh.functionLink(context) context["_localPage"]=mw.ustring.gsub(context["localPage"],'"','&quot;') context["_foreignPage"]=mw.ustring.gsub(context["foreignPage"],'"','&quot;') local need_cat= (not context["nocat"]) and (not context["isNoCatWithNamespace"]) --[[not ( context["curPageNamespace"]==2 --User or context["curPageNamespace"]==828 --Module )]] --mw.log(context["nocat"]) --mw.log(context["curPageNamespace"]) --mw.log(need_cat) local output_context={} table.insert(output_context, mw.ustring.format(MODEL.frame_head , (context["isExist"] and clazz_pageExist_framehead) or '' ,context["_localPage"] ,context["langCode"] ,context["lang"] ,context["_foreignPage"] ) ) table.insert(output_context,MODEL.page_head) table.insert(output_context, mw.ustring.format('[[:%s|%s]]' , context["localPage"],context["displayName"] ) ) table.insert(output_context,MODEL.page_tail) if context["isExist"] then if need_cat then table.insert(output_context,TRA_CAT) end else table.insert(output_context,MODEL.comment_head) table.insert(output_context,MODEL.lang_head) table.insert(output_context,context["lang"]) table.insert(output_context,MODEL.lang_tail) table.insert(output_context,MODEL.colon) table.insert(output_context,MODEL.link_head) table.insert(output_context, mw.ustring.format(MODEL.link_body, context["langCode"] ,(context["foreignPage"] or context["localPage"]) ,context["langCode"] ,(context["foreignPage"] or context["localPage"]) ) ) table.insert(output_context,MODEL.link_tail) table.insert(output_context,MODEL.comment_tail) end table.insert(output_context,MODEL.frame_tail) return table.concat(output_context,"") end function ilh.displayName(args) local _d=args["d"] local _1=args["1"] local _3=args["3"] local dpN1=_3 or _d return (dpN1 and {dpN1} or {_1})[1] end --以下需要更高效的实现 --确定主页 --使用mw信息获得主页名 --使用language库获得本站默认语言代码（zh）来确定信息的对应语言，获得全主页名 ---因为其他zh分语言只有名，没有命名空间，可以识别出来，但麻烦 --然后判断当前页和主页是否一致 ---计划做重定向判断，但没需要 function ilh.isMainPage() local mainpage_msgobj=mw.message.new('Mainpage') mainpage_msgobj=mainpage_msgobj:inLanguage(mw.getContentLanguage():getCode()) local mainPage_obj=mw.title.makeTitle(0,mainpage_msgobj:plain()) local curpage_obj=mw.title.getCurrentTitle() --local curpage_redirectFrom_obj=curpage_obj.redirectTarget --[[if curpage_redirectFrom_obj ~=false then curpage_obj=curpage_redirectFrom_obj end]] return mw.title.equals(mainPage_obj,curpage_obj) --and curpage_obj.namespace==4 end --确定页面存在 ---exists是高开销方法，需要更高效的实现 --带保护的包装方法 --由于exists和解析器函数ifexist都是高开销方法 --而ifexist达到限制时默认返回结果为false的操作 --而exists会直接抛出错误而中断执行 --所以将相应调用包裹，压制exists的抛错，按照ifexist的理念，返回false --正常情况下则一切正常 function ilh.isExist(pageName) local execStatus,result=pcall(ilh._isExist,pageName) if execStatus then return result else return false end end --真实方法 function ilh._isExist(pageName) local localPage_obj=mw.title.makeTitle(0,pageName) return localPage_obj.exists end --end return ilh
</text>
<sha1>ob0lmw7ljbh2gezlear2jto5q5tlq3f</sha1>
</revision>
</page>
<page>
<title>Module:Lan</title>
<ns>828</ns>
<id>5549090</id>
<revision>
<id>64421189</id>
<parentid>57164834</parentid>
<timestamp>2021-02-21T14:11:23Z</timestamp>
<contributor>
<username>KirkLU</username>
<id>2361719</id>
</contributor>
<comment>per request of [[Module_talk:Lan#編輯請求_2021-02-20]]</comment>
<model>Scribunto</model>
<format>text/plain</format>
<text bytes="1161" xml:space="preserve">
local l={} local getArgs local args l.fallbackList={ ['zh']={'zh','zh-hans','zh-hant','zh-cn','zh-tw','zh-hk','zh-mo','zh-sg','zh-my'} ,['zh-hans']={'zh-hans','zh-cn','zh-sg','zh-my','zh'} ,['zh-hant']={'zh-hant','zh-tw','zh-hk','zh-mo','zh'} ,['zh-cn']={'zh-cn','zh-hans','zh-sg','zh-my','zh'} ,['zh-sg']={'zh-sg','zh-hans','zh-cn','zh-my','zh'} ,['zh-my']={'zh-my','zh-hans','zh-cn','zh-sg','zh'} ,['zh-tw']={'zh-tw','zh-hant','zh-hk','zh-mo','zh'} ,['zh-hk']={'zh-hk','zh-hant','zh-mo','zh-tw','zh'} ,['zh-mo']={'zh-mo','zh-hant','zh-hk','zh-tw','zh'} } function l._main(args, frame) local userlanguage=frame:callParserFunction{ name = 'int', args = {'Conversionname'} } --mw.message.new('Conversionname'):plain() local fallback=l.fallbackList[userlanguage] if fallback == nil then fallback=l.fallbackList['zh'] end for _,langArgName in ipairs(fallback) do if args[langArgName] ~= nil then return args[langArgName] end end return '' end function l.main(frame) if not getArgs then getArgs = require('Module:Arguments').getArgs end args = getArgs(frame, {parentFirst=true}) return l._main(args, frame) end return l
</text>
<sha1>60sugy2o8vfz3gr6eykhvcf0g4turhk</sha1>
</revision>
</page>
<page>
<title>Module:Lang</title>
<ns>828</ns>
<id>6005399</id>
<revision>
<id>64736711</id>
<parentid>64712870</parentid>
<timestamp>2021-03-12T13:08:20Z</timestamp>
<contributor>
<username>Tigerzeng</username>
<id>1586693</id>
</contributor>
<comment>[[Special:Permalink/64656729|编辑请求]]</comment>
<model>Scribunto</model>
<format>text/plain</format>
<text bytes="72422" xml:space="preserve">
--[=[ 基于英文维基2021年2月23日版本 Lua support for the {{lang}}, {{lang-xx}}, and {{transl}} templates and replacement of various supporting templates. ]=] require('Module:No globals'); local getArgs = require ('Module:Arguments').getArgs; local unicode = require ("Module:Unicode data"); -- for is_latin() and is_rtl() local yesno = require ('Module:Yesno'); local lang_data = mw.loadData ('Module:Lang/data'); -- language name override and transliteration tool-tip tables local lang_name_table = lang_data.lang_name_table; -- language codes, names, regions, scripts, suppressed scripts local lang_table = lang_data.lang_name_table.lang; local lang_dep_table = lang_data.lang_name_table.lang_dep; local script_table = lang_data.lang_name_table.script; local region_table = lang_data.lang_name_table.region; local variant_table = lang_data.lang_name_table.variant; local suppressed_table = lang_data.lang_name_table.suppressed; local override_table = lang_data.override; local synonym_table = mw.loadData ('Module:Lang/ISO 639 synonyms'); -- ISO 639-2/639-2T code translation to 639-1 code local namespace = mw.title.getCurrentTitle().namespace; -- used for categorization local this_wiki_lang = mw.language.getContentLanguage().code; -- get this wiki's language local initial_style_state; -- set by lang_xx_normal() and lang_xx_italic() local maint_cats = {}; -- maintenance categories go here local maint_msgs = {}; -- and their messages go here local function page_exists (title) -- This function implements #ifexist local noError, titleObject = pcall (mw.title.new, title) if not noError then return false else if titleObject then return titleObject.exists else return false end end end --[[--------------------------< I S _ S E T >------------------------------------------------------------------ Returns true if argument is set; false otherwise. Argument is 'set' when it exists (not nil) or when it is not an empty string. ]] local function is_set( var ) return not (var == nil or var == ''); end --[[--------------------------< I N V E R T _ I T A L I C S >------------------------------------------------- This function attempts to invert the italic markup a args.text by adding/removing leading/trailing italic markup in args.text. Like |italic=unset, |italic=invert disables automatic italic markup. Individual leading/trailing apostrophes are converted to their html numeric entity equivalent so that the new italic markup doesn't become bold markup inadvertently. Leading and trailing wiki markup is extracted from args.text into separate table elements. Addition, removal, replacement of wiki markup is handled by a string.gsub() replacement table operating only on these separate elements. In the string.gsub() matching pattern, '.*' matches empty string as well as the three expected wiki markup patterns. This function expects that markup in args.text is complete and correct; if it is not, oddness may result. ]] local function invert_italics (source) local invert_pattern_table = { -- leading/trailing markup add/remove/replace patterns [""]="\'\'", -- empty string becomes italic markup ["\'\'"]="", -- italic markup becomes empty string ["\'\'\'"]="\'\'\'\'\'", -- bold becomes bold italic ["\'\'\'\'\'"]="\'\'\'", -- bold italic become bold }; local seg = {}; source = source:gsub ("%f[\']\'%f[^\']", '&#39;'); -- protect single quote marks from being interpreted as bold markup seg[1] = source:match ('^(\'\'+%f[^\']).+') or ''; -- get leading markup, if any; ignore single quote seg[3] = source:match ('.+(%f[\']\'\'+)$') or ''; -- get trailing markup, if any; ignore single quote if '' ~= seg[1] and '' ~= seg[3] then -- extract the 'text' seg[2] = source:match ('^\'\'+%f[^\'](.+)%f[\']\'\'+$') -- from between leading and trailing markup elseif '' ~= seg[1] then seg[2] = source:match ('^\'\'+%f[^\'](.+)') -- following leading markup elseif '' ~= seg[3] then seg[2] = source:match ('(.+)%f[\']\'\'+$') -- preceding trailing markup else seg[2] = source -- when there is no markup end seg[1] = invert_pattern_table[seg[1]] or seg[1]; -- replace leading markup according to pattern table seg[3] = invert_pattern_table[seg[3]] or seg[3]; -- replace leading markup according to pattern table return table.concat (seg); -- put it all back together and done end --[[--------------------------< V A L I D A T E _ I T A L I C >------------------------------------------------ validates |italic= or |italics= assigned values. When |italic= is set and has an acceptible assigned value, return the matching css font-style property value or, for the special case 'default', return nil. When |italic= is not set, or has an unacceptible assigned value, return nil and a nil error message. When both |italic= and |italics= are set, returns nil and a 'conflicting' error message. The return value nil causes the calling lang, lang_xx, or transl function to set args.italic according to the template's defined default ('inherit' for {{lang}}, 'inherit' or 'italic' for {{lang-xx}} depending on the individual template's requirements, 'italic' for {{transl}}) or to the value appropriate to |script=, if set ({{lang}} and {{lang-xx}} only). Accepted values and the values that this function returns are are: nil - when |italic= absent or not set; returns nil default - for completeness, should rarely if ever be used; returns nil yes - force args.text to be rendered in italic font; returns 'italic' no - force args.text to be rendered in normal font; returns 'normal' unset - disables font control so that font-style applied to text is dictated by markup inside or outside the template; returns 'inherit' invert - disables font control so that font-style applied to text is dictated by markup outside or inverted inside the template; returns 'invert' ]] local function validate_italic (args) local properties = {['yes'] = 'italic', ['no'] = 'normal', ['unset'] = 'inherit', ['invert'] = 'invert', ['default'] = nil}; local count = 0 for _, arg in pairs {'italic', 'italics', 'i'} do if args[arg] then count = count + 1 end end if count > 1 then -- return nil and an error message if more than one is set return nil, '只能指定|italic=、|italics=或|i=中的一个'; end return properties[args.italic or args.italics or args.i], nil; -- return an appropriate value and a nil error message end --[=[--------------------------< V A L I D A T E _ C A T _ A R G S >---------------------------------------------------------- Default behavior of the {{lang}} and {{lang-xx}} templates is to add categorization when the templates are used in mainspace. This default functionality may be suppressed by setting |nocat=yes or |cat=no. This function selects one of these two parameters to control categorization. Because having two parameters with 'opposite' names and 'opposite' values is confusing, this function accepts only affirmative values for |nocat= and only negative values for |cat=; in both cases the 'other' sense (and non-sense) is not accepted and the parameter is treated as if it were not set in the template. Sets args.nocat to true if categorization is to be turned off; to nil if the default behavior should apply. Accepted values for |nocat= are the text strings: 'yes', 'y', 'true', 't', on, '1' -- [[Module:Yesno]] returns logical true for all of these; false or nil else for |cat= 'no', 'n', 'false', 'f', 'off', '0' -- [[Module:Yesno]] returns logical false for all of these; true or nil else ]=] local function validate_cat_args (args) if not (args.nocat or args.cat) then -- both are nil, so categorize return; end if false == yesno (args.cat) or true == yesno (args.nocat) then args.nocat = true; -- set to true when args.nocat is affirmative; nil else (as if the parameter were not set in the template) else -- args.nocat is the parameter actually used. args.nocat = nil; end end --[[--------------------------< I N _ A R R A Y >-------------------------------------------------------------- Whether needle is in haystack ]] local function in_array ( needle, haystack ) if needle == nil then return false; end for n,v in ipairs( haystack ) do if v == needle then return n; end end return false; end --[[--------------------------< F O R M A T _ I E T F _ T A G >------------------------------------------------ prettify ietf tags to use recommended subtag formats: code: lower case script: sentence case region: upper case variant: lower case private: lower case prefixed with -x- ]] local function format_ietf_tag (code, script, region, variant, private) local out = {}; if is_set (private) then return table.concat ({code:lower(), 'x', private:lower()}, '-'); -- if private, all other tags ignored end table.insert (out, code:lower()); if is_set (script) then script = script:lower():gsub ('^%a', string.upper); table.insert (out, script); end if is_set (region) then table.insert (out, region:upper()); end if is_set (variant) then table.insert (out, variant:lower()); end return table.concat (out, '-'); end --[[--------------------------< G E T _ I E T F _ P A R T S >-------------------------------------------------- extracts and returns IETF language tag parts: primary language subtag (required) - 2 or 3 character IANA language code script subtag - four character IANA script code region subtag - two-letter or three digit IANA region code variant subtag - four digit or 5-8 alnum variant code; only one variant subtag supported private subtag - x- followed by 1-8 alnum private code; only supported with the primary language tag in any one of these forms lang lang-variant lang-script lang-script-variant lang-region lang-region-variant lang-script-region lang-script-region-variant lang-x-private each of lang, script, region, variant, and private, when used, must be valid Languages with both two- and three-character code synonyms are promoted to the two-character synonym because the IANA registry file omits the synonymous three-character code; we cannot depend on browsers understanding the synonymous three-character codes in the lang= attribute. For {{lang-xx}} templates, the parameters |script=, |region=, and |variant= are supported (not supported in {{lang}} because those parameters are superfluous to the IETF subtags in |code=) returns six values; all lower case. Valid parts are returned as themselves; omitted parts are returned as empty strings, invalid parts are returned as nil; the sixth returned item is an error message (if an error detected) or nil. see http://www.rfc-editor.org/rfc/bcp/bcp47.txt section 2.1 ]] local function get_ietf_parts (source, args_script, args_region, args_variant) local code, script, region, variant, private; -- ietf tag parts if not is_set (source) then return nil, nil, nil, nil, nil, '缺少语言标签'; end local pattern = { -- table of tables holding acceptibe ietf tag patterns and short names of the ietf part captured by the pattern {'^(%a%a%a?)%-(%a%a%a%a)%-(%a%a)%-(%d%d%d%d)$', 's', 'r', 'v'}, -- 1 - ll-Ssss-RR-variant (where variant is 4 digits) {'^(%a%a%a?)%-(%a%a%a%a)%-(%d%d%d)%-(%d%d%d%d)$', 's', 'r', 'v'}, -- 2 - ll-Ssss-DDD-variant (where region is 3 digits; variant is 4 digits) {'^(%a%a%a?)%-(%a%a%a%a)%-(%a%a)%-(%w%w%w%w%w%w?%w?%w?)$', 's', 'r', 'v'}, -- 3 - ll-Ssss-RR-variant (where variant is 5-8 alnum characters) {'^(%a%a%a?)%-(%a%a%a%a)%-(%d%d%d)%-(%w%w%w%w%w%w?%w?%w?)$', 's', 'r', 'v'}, -- 4 - ll-Ssss-DDD-variant (where region is 3 digits; variant is 5-8 alnum characters) {'^(%a%a%a?)%-(%a%a%a%a)%-(%d%d%d%d)$', 's', 'v'}, -- 5 - ll-Ssss-variant (where variant is 4 digits) {'^(%a%a%a?)%-(%a%a%a%a)%-(%w%w%w%w%w%w?%w?%w?)$', 's', 'v'}, -- 6 - ll-Ssss-variant (where variant is 5-8 alnum characters) {'^(%a%a%a?)%-(%a%a)%-(%d%d%d%d)$', 'r', 'v'}, -- 7 - ll-RR-variant (where variant is 4 digits) {'^(%a%a%a?)%-(%d%d%d)%-(%d%d%d%d)$', 'r', 'v'}, -- 8 - ll-DDD-variant (where region is 3 digits; variant is 4 digits) {'^(%a%a%a?)%-(%a%a)%-(%w%w%w%w%w%w?%w?%w?)$', 'r', 'v'}, -- 9 - ll-RR-variant (where variant is 5-8 alnum characters) {'^(%a%a%a?)%-(%d%d%d)%-(%w%w%w%w%w%w?%w?%w?)$', 'r', 'v'}, -- 10 - ll-DDD-variant (where region is 3 digits; variant is 5-8 alnum characters) {'^(%a%a%a?)%-(%d%d%d%d)$', 'v'}, -- 11 - ll-variant (where variant is 4 digits) {'^(%a%a%a?)%-(%w%w%w%w%w%w?%w?%w?)$', 'v'}, -- 12 - ll-variant (where variant is 5-8 alnum characters) {'^(%a%a%a?)%-(%a%a%a%a)%-(%a%a)$', 's', 'r'}, -- 13 - ll-Ssss-RR {'^(%a%a%a?)%-(%a%a%a%a)%-(%d%d%d)$', 's', 'r'}, -- 14 - ll-Ssss-DDD (region is 3 digits) {'^(%a%a%a?)%-(%a%a%a%a)$', 's'}, -- 15 - ll-Ssss {'^(%a%a%a?)%-(%a%a)$', 'r'}, -- 16 - ll-RR {'^(%a%a%a?)%-(%d%d%d)$', 'r'}, -- 17 - ll-DDD (region is 3 digits) {'^(%a%a%a?)$'}, -- 18 - ll {'^(%a%a%a?)%-x%-(%w%w?%w?%w?%w?%w?%w?%w?)$', 'p'}, -- 19 - ll-x-pppppppp (private is 1-8 alnum characters) } local t = {}; -- table of captures; serves as a translator between captured ietf tag parts and named variables for i, v in ipairs (pattern) do -- spin through the pattern table looking for a match local c1, c2, c3, c4; -- captures in the 'pattern' from the pattern table go here c1, c2, c3, c4 = source:match (pattern[i][1]); -- one or more captures set if source matches pattern[i]) if c1 then -- c1 always set on match code = c1; -- first capture is always code t = { [pattern[i][2] or 'x'] = c2, -- fill the table of captures with the rest of the captures [pattern[i][3] or 'x'] = c3, -- take index names from pattern table and assign sequential captures [pattern[i][4] or 'x'] = c4, -- index name may be nil in pattern[i] table so "or 'x'" spoofs a name for this index in this table }; script = t.s or ''; -- translate table contents to named variables; region = t.r or ''; -- absent table entries are nil so set named ietf parts to empty string for concatenation variant= t.v or ''; private = t.p or ''; break; -- and done end end if not code then return nil, nil, nil, nil, nil, table.concat ({'无法识别的语言标签：', source}); -- don't know what we got but it is malformed end code = code:lower(); -- ensure that we use and return lower case version of this if not (override_table[code] or lang_table[code] or synonym_table[code] or lang_dep_table[code]) then return nil, nil, nil, nil, nil, table.concat ({'无法识别的语言代码：', code}); -- invalid language code, don't know about the others (don't care?) end if synonym_table[code] then -- if 639-2/639-2T code has a 639-1 synonym table.insert (maint_cats, table.concat ({'Lang和lang-xx代码升级为ISO 639-1|', code})); table.insert (maint_msgs, table.concat ({'代码：', code, '升级为代码：', synonym_table[code]})); code = synonym_table[code]; -- use the synonym end if is_set (script) then if is_set (args_script) then return code, nil, nil, nil, nil, '冗余文本标签'; -- both code with script and |script= not allowed end else script = args_script or ''; -- use args.script if provided end if is_set (script) then script = script:lower(); -- ensure that we use and return lower case version of this if not script_table[script] then return code, nil, nil, nil, nil, table.concat ({'无法识别的文本：', script, '用于代码：', code}); -- language code ok, invalid script, don't know about the others (don't care?) end end if suppressed_table[script] then -- ensure that code-script does not use a suppressed script if in_array (code, suppressed_table[script]) then return code, nil, nil, nil, nil, table.concat ({'文本：', script, '不支持代码：', code}); -- language code ok, script is suppressed for this code end end if is_set (region) then if is_set (args_region) then return code, nil, nil, nil, nil, '冗余区域标签'; -- both code with region and |region= not allowed end else region = args_region or ''; -- use args.region if provided end if is_set (region) then region = region:lower(); -- ensure that we use and return lower case version of this if not region_table[region] then return code, script, nil, nil, nil, table.concat ({'无法识别的地区：', region, '用于代码：', code}); end end if is_set (variant) then if is_set (args_variant) then return code, nil, nil, nil, nil, '冗余变体标签'; -- both code with variant and |variant= not allowed end else variant = args_variant or ''; -- use args.variant if provided end if is_set (variant) then variant = variant:lower(); -- ensure that we use and return lower case version of this if not variant_table[variant] then -- make sure variant is valid return code, script, region, nil, nil, table.concat ({'无法识别的变体：', variant}); end -- does this duplicate/replace tests in lang() and lang_xx()? if is_set (script) then -- if script set it must be part of the 'prefix' if not in_array (table.concat ({code, '-', script}), variant_table[variant]['prefixes']) then return code, script, region, nil, nil, table.concat ({'无法识别的变体：', variant, '用于代码-文本对：', code, '-', script}); end elseif is_set (region) then -- if region set, there are some prefixes that require lang code and region (en-CA-newfound) if not in_array (code, variant_table[variant]['prefixes']) then -- first see if lang code is all that's required (en-oxendict though en-GB-oxendict is preferred) if not in_array (table.concat ({code, '-', region}), variant_table[variant]['prefixes']) then -- now try for lang code and region (en-CA-newfound) return code, script, region, nil, nil, table.concat ({'无法识别的变体：', variant, '用于代码-文本对：', code, '-', region}); end end else if not in_array (code, variant_table[variant]['prefixes']) then return code, script, region, nil, nil, table.concat ({'无法识别的变体：', variant, '用于代码：', code}); end end end if is_set (private) then private = private:lower(); -- ensure that we use and return lower case version of this if not override_table[table.concat ({code, '-x-', private})] then -- make sure private tag is valid; note that index return code, script, region, nil, nil, table.concat ({'无法识别的私有标签：', private}); end end return code, script, region, variant, private, nil; -- return the good bits; make sure that msg is nil end --[[--------------------------< M A K E _ E R R O R _ M S G >-------------------------------------------------- assembles an error message from template name, message text, help link, and error category. ]] local function make_error_msg (msg, args, template) local out = {}; local category; if 'Transl' == template then category = 'Transl'; else category = 'Lang和lang-xx' end table.insert (out, table.concat ({'[', args.text or '未定义', '] '})); -- for error messages output args.text if available table.insert (out, table.concat ({'<span style=\"font-size: 100%; font-style: normal;\" class=\"error\">错误：{{', template, '}}：'})); table.insert (out, msg); table.insert (out, table.concat ({'（[[:Category:', category, '模板错误|帮助]]）'})); table.insert (out, '</span>'); if (0 == namespace or 10 == namespace) and not args.nocat then -- categorize in article space (and template space to take care of broken usages) table.insert (out, table.concat ({'[[Category:', category, '模板错误]]'})); end return table.concat (out); end --[=[-------------------------< M A K E _ W I K I L I N K >---------------------------------------------------- Makes a wikilink; when both link and display text is provided, returns a wikilink in the form [[L|D]]; if only link is provided, returns a wikilink in the form [[L]]; if neither are provided or link is omitted, returns an empty string. ]=] local function make_wikilink (link, display) if is_set (link) then if is_set (display) then return table.concat ({'[[', link, '|', display, ']]'}); else return table.concat ({'[[', link, ']]'}); end else return ''; end end --[[--------------------------< D I V _ M A R K U P _ A D D >-------------------------------------------------- adds <i> and </i> tags to list-item text or to implied <p>..</p> text. mixed not supported ]] local function div_markup_add (text, style) local implied_p = {}; if text:find ('^\n[%*:;#]') then -- look for list markup; list markup must begin at start of text if 'italic' == style then return mw.ustring.gsub (text, '(\n[%*:;#]+)([^\n]+)', '%1<i>%2</i>'); -- insert italic markup at each list item else return text; end end if text:find ('\n+') then -- look for any number of \n characters in text text = text:gsub ('([^\n])\n([^\n])', '%1 %2'); -- replace single newline characters with a space character which mimics mediawiki if 'italic' == style then text = text:gsub('[^\n]+', '<p><i>%1</i></p>'); -- insert p and italic markup tags at each impled p (two or more consecutive '\n\n' sequences) else text = text:gsub ('[^\n]+', '<p>%1</p>'); -- insert p markup at each impled p text = text:gsub ('\n', ''); -- strip newline characters end end return text; end --[[--------------------------< M A K E _ T E X T _ H T M L >-------------------------------------------------- Add the html markup to text according to the type of content that it is: <span> or <i> tags for inline content or <div> tags for block content ]] local function make_text_html (code, text, tag, rtl, style, size, language) local html = {}; local style_added = ''; if text:match ('^%*') then table.insert (html, '&#42;'); -- move proto language text prefix outside of italic markup if any; use numeric entity because plain splat confuses MediaWiki text = text:gsub ('^%*', ''); -- remove the splat from the text end if 'span' == tag then -- default html tag for inline content if 'italic' == style then -- but if italic tag = 'i'; -- change to <i> tags end else -- must be div so go text = div_markup_add (text, style); -- handle implied <p>, implied <p> with <i>, and list markup (*;:#) with <i> end table.insert (html, table.concat ({'<', tag})); -- open the <i>, <span>, or <div> html tag table.insert (html, table.concat ({' lang="', code, '\"'})); -- add language attribute if rtl or unicode.is_rtl(text) then table.insert (html, ' dir="rtl"'); -- add direction attribute for right to left languages end if 'normal' == style then -- when |italic=no table.insert (html, ' style=\"font-style: normal;'); -- override external markup, if any style_added = '\"'; -- remember that style attribute added and is not yet closed end if is_set (size) then -- when |size=<something> if is_set (style_added) then table.insert (html, table.concat ({' font-size: ', size, ';'})); -- add when style attribute already inserted else table.insert (html, table.concat ({' style=\"font-size: ', size, ';'})); -- create style attribute style_added = '\"'; -- remember that style attribute added and is not yet closed end end if is_set (language) then table.insert (html, table.concat ({style_added, ' title=\"', language})); --start the title text if language:find ('languages') then table.insert (html, '汇集文本'); -- for collective languages else table.insert (html, '文本'); -- for individual languages end table.insert (html, '\">'); -- close the opening html tag else table.insert (html, table.concat ({style_added, '>'})); -- close the style attribute and close opening html tag end table.insert (html, text); -- insert the text table.insert (html, table.concat ({'</', tag, '>'})); -- close the <i>, <span>, or <div> html tag if rtl then -- legacy; shouldn't be necessary because all of the rtl text is wrapped inside an html tag with dir="rtl" attribute table.insert (html, '&lrm;'); -- make sure the browser knows that we're at the end of the rtl end return table.concat (html); -- put it all together and done end --[=[-------------------------< M A K E _ C A T E G O R Y >---------------------------------------------------- 注意：此处有修改 对于中文，则返回以下分类： [[Category:含有明确引用中文的条目]] 对于非中文内容： 如果是常用语言，则直接返回以下分类： [[Category:含有<语言>的条目]]（此处的<语言>为本模块内建） 如果是非常用语言： 如果存在对应语言的分类，则返回以下分类： [[Category:含有<语言>的条目]]（此处的<语言>需读取数据库资料） 反之，则返回以下分类： [[Category:含有非中文内容的条目]] ]=] local function make_category (code, language_name, nocat) local cat = {}; if (0 ~= namespace) or nocat then -- only categorize in article space return ''; -- return empty string for concatenation end table.insert (cat, '[[Category:含有'); if 'zh' == code then table.insert (cat, '明確引用中文'); elseif 'ko' == code then table.insert (cat, '朝鮮語') elseif (page_exists ('Category:含有' .. language_name .. '的條目') ) then table.insert (cat, language_name); else table.insert (cat, '非中文內容'); end table.insert (cat, '的條目]]'); return table.concat (cat); end --[[--------------------------< M A K E _ T R A N S L I T >---------------------------------------------------- return translit <i lang=xx-Latn>...</i> where xx is the language code; else return empty string The value |script= is not used in {{transl}} for this purpose; instead it uses |code. Because language scripts are listed in the {{transl}} switches they are included in the data tables. The script parameter is introduced at {{Language with name and transliteration}}. If |script= is set, this function uses it in preference to code. To avoid confusion, in this module and the templates that use it, the transliteration script parameter is renamed to be |translit-script= (in this function, tscript) This function is used by both lang_xx() and transl() lang_xx() always provides code, language_name, and translit; may provide tscript; never provides style transl() always provides language_name, translit, and one of code or tscript, never both; always provides style For {{transl}}, style only applies when a language code is provided ]] local function make_translit (code, language_name, translit, std, tscript, style) local title; local tout = {}; local title_table = lang_data.translit_title_table; -- table of transliteration standards and the language codes and scripts that apply to those standards if is_set (code) then -- when a language code is provided (always with {{lang-xx}} templates, not always with {{transl}}) if not style then -- nil for the default italic style table.insert (tout, "<i lang=\""); -- so use <i> tag else table.insert (tout, table.concat ({'<span style=\"font-style: ', style, '\" lang=\"'})); -- non-standard style, construct a span tag for it end table.insert (tout, code); table.insert (tout, "-Latn\" title=\""); -- transliterations are always Latin script else table.insert (tout, "<span title=\""); -- when no language code: no lang= attribute, not italic ({{transl}} only) end std = std and std:lower(); -- lower case for table indexing if not is_set (std) and not is_set (tscript) then -- when neither standard nor script specified table.insert (tout, language_name); -- write a generic tool tip -- if not language_name:find ('languages') then -- collective language names (plural 'languages' is part of the name) -- table.insert (tout, '-language') -- skip this text (individual and macro languages only) -- end table.insert (tout, '羅馬化'); -- finish the tool tip; use romanization when neither script nor standard supplied elseif is_set (std) and is_set (tscript) then -- when both are specified if title_table[std] then -- and if standard is legitimate if title_table[std][tscript] then -- and if script for that standard is legitimate table.insert (tout, table.concat ({title_table[std][tscript:lower()], '（', script_table[tscript][1], '）转写'})); -- add the appropriate text to the tool tip else table.insert (tout, title_table[std]['default']); -- use the default if script not in std table; TODO: maint cat? error message because script not found for this standard? end else return ''; -- invalid standard, setup for error message end elseif is_set (std) then -- translit-script not set, use language code if not title_table[std] then return ''; end -- invalid standard, setup for error message if title_table[std][code] then -- if language code is in the table (transl may not provide a language code) -- table.insert (tout, table.concat ({title_table[std][code:lower()], ' (', lang_table[code][1], ' language) transliteration'})); -- add the appropriate text to the tool tip table.insert (tout, table.concat ({title_table[std][code:lower()], '（', language_name, '）转写'})); -- add the appropriate text to the tool tip else -- code doesn't match table.insert (tout, title_table[std]['default']); -- so use the standard's default end else -- here if translit-script set but translit-std not set if title_table['no_std'][tscript] then table.insert (tout, title_table['no_std'][tscript]); -- use translit-script if set elseif title_table['no_std'][code] then table.insert (tout, title_table['no_std'][code]); -- use language code else if is_set (tscript) then table.insert (tout, table.concat ({language_name, '-文字转写'})); -- write a script tool tip elseif is_set (code) then -- if not language_name:find ('languages') then -- collective language names (plural 'languages' is part of the name) -- table.insert (tout, '-language') -- skip this text (individual and macro languages only) -- end table.insert (tout, '转写'); -- finish the tool tip else table.insert (tout, '转写'); -- generic tool tip (can we ever get here?) end end end table.insert (tout, '">'); table.insert (tout, translit); if is_set (code) and not style then -- when a language code is provided (always with {{lang-xx}} templates, not always with {{transl}}) table.insert (tout, "</i>"); -- close the italic tag else table.insert (tout, "</span>"); -- no language code so close the span tag end return table.concat (tout); end --[[--------------------------< V A L I D A T E _ T E X T >---------------------------------------------------- This function checks the content of args.text and returns empty string if nothing is amiss else it returns an error message. The tests are for empty or missing text and for improper or disallowed use of apostrophe markup. Italic rendering is controlled by the |italic= template parameter so italic markup should never appear in args.text either as ''itself'' or as '''''bold italic''''' unless |italic=unset or |italic=invert. ]] local function validate_text (template, args) if not is_set (args.text) then return make_error_msg ('无文本', args, template); end if args.text:find ("%f[\']\'\'\'\'%f[^\']") or args.text:find ("\'\'\'\'\'[\']+") then -- because we're looking, look for 4 appostrophes or 6+ appostrophes return make_error_msg ('文本有格式不正确的标记', args, template); end local style = args.italic; if ('unset' ~= style) and ('invert' ~=style) then if args.text:find ("%f[\']\'\'%f[^\']") or args.text:find ("%f[\']\'\'\'\'\'%f[^\']") then -- italic but not bold, or bold italic return make_error_msg ('文本有斜体标记', args, template); end end end --[[--------------------------< R E N D E R _ M A I N T >------------------------------------------------------ render mainenance messages and categories ]] local function render_maint(nocat) local maint = {}; if 0 < #maint_msgs then -- when there are maintenance messages table.insert (maint, table.concat ({'<span class="lang-comment" style="font-style: normal; display: none; color: #33aa33; margin-left: 0.3em;">'})); -- opening <span> tag for _, msg in ipairs (maint_msgs) do table.insert (maint, table.concat ({msg, ' '})); -- add message strings end table.insert (maint, '</span>'); -- close the span end if (0 < #maint_cats) and (0 == namespace) and not nocat then -- when there are maintenance categories; article namespace only for _, cat in ipairs (maint_cats) do table.insert (maint, table.concat ({'[[Category:', cat, ']]'})); -- format and add the categories end end return table.concat (maint); end --[[--------------------------< P R O T O _ P R E F I X >------------------------------------------------------ for proto languages, text is prefixed with a splat. We do that here as a flag for make_text_html() so that a splat will be rendered outside of italic markup (if used). If the first character in text here is already a splat, we do nothing proto_param is boolean or nil; true adds splat prefix regardless of language name; false removes and / or inhibits regardless of language name; nil does nothing; presumes that the value in text is correct but removes extra splac ]] local function proto_prefix (text, language_name, proto_param) if false == proto_param then -- when forced by |proto=no return text:gsub ('^%**', ''); -- return text without splat prefix regardless of language name or existing splat prefix in text elseif (language_name:find ('^Proto%-') or (true == proto_param)) then -- language is a proto or forced by |proto=yes return text:gsub ('^%**', '*'); -- prefix proto-language text with a splat; also removes duplicate prefixing splats end return text:gsub ('^%*+', '*'); -- return text unmolested except multiple splats reduced to one splat end --[[--------------------------< H A S _ P O E M _ T A G >------------------------------------------------------ looks for a poem strip marker in text; returns true when found; false else auto-italic detection disabled when text has poem stripmarker because it is not possible for this code to know the content that will replace the stripmarker. ]] local function has_poem_tag (text) return text:find ('\127[^\127]*UNIQ%-%-poem%-[%a%d]+%-QINU[^\127]*\127') and true or false; end --[[--------------------------< H T M L _ T A G _ S E L E C T >------------------------------------------------ Inspects content of and selectively trims text. Returns text and the name of an appropriate html tag for text. If text contains: \n\n text has implied <p>..</p> tags - trim leading and trailing whitespace and return If text begins with list markup: \n* unordered \n; definition \n: definition \n# ordered trim all leading whitespace except \n and trim all trailing whitespace If text contains <poem>...</poem> stripmarker, return text unmodified and choose <div>..</div> tags because the stripmarker is replaced with text wrapped in <div>..</div> tags. ]] local function html_tag_select (text) local tag; if has_poem_tag (text) then -- contains poem stripmarker (we can't know the content of that) tag = 'div'; -- poem replacement is in div tags so lang must use div tags elseif mw.text.trim (text):find ('\n\n+') then -- contains implied p tags text = mw.text.trim (text); -- trim leading and trailing whitespace characters tag = 'div'; -- must be div because span may not contain p tags (added later by MediaWiki); poem replacement is in div tags elseif text:find ('\n[%*:;%#]') then -- if text has list markup text = text:gsub ('^[\t\r\f ]*', ''):gsub ('%s*$', ''); -- trim all whitespace except leading newline character '\n' tag = 'div'; -- must be div because span may not contain ul, dd, dl, ol tags (added later by MediaWiki) else text = mw.text.trim (text); -- plain text tag = 'span'; -- so span is fine end return text, tag; end --[[--------------------------< V A L I D A T E _ P R O T O >-------------------------------------------------- validates value assigned to |proto=; permitted values are yes and no; yes returns as true, no returns as false, empty string (or parameter omitted) returns as nil; any other value returns as nil with a second return value of true indicating that some other value has been assigned to |proto= ]] local function validate_proto (proto_param) if 'yes' == proto_param then return true; elseif 'no' == proto_param then return false; elseif is_set (proto_param) then return nil, true; -- |proto= something other than 'yes' or 'no' else return nil; -- missing or empty end end --[[--------------------------< L A N G U A G E _ N A M E _ G E T >-------------------------------------------- common function to return language name from the data set according to IETF tag returns language name if found in data tables; nil else ]] local function language_name_get (ietf, code, cat) ietf = ietf:lower(); -- ietf:lower() because format_ietf_tag() returns mixed case local name; -- remains nil if not found if override_table[ietf] then -- look for whole IETF tag in override table name = override_table[ietf][1]; elseif override_table[code] then -- not there so try basic language code name = override_table[code][1]; elseif lang_table[code] then -- shift to iana code/name table name = lang_table[code][1]; -- table entries sometimes have multiple names, always take the first one elseif lang_dep_table[code] then -- if cat then -- table.insert (maint_cats, table.concat ({'Lang and lang-xx using deprecated ISO 639 codes|', code})); -- table.insert (maint_msgs, table.concat ({'code: ', code, ' is deprecated'})); -- end name = lang_dep_table[code][1]; -- table entries sometimes have multiple names, always take the first one end if lang_dep_table[code] and cat then -- because deprecated code may have been overridden to en.wiki preferred name table.insert (maint_cats, table.concat ({'Lang和lang-xx使用弃用的ISO 639代码|', code})); table.insert (maint_msgs, table.concat ({'代码：', code, '已弃用'})); end return name; -- name from data tables or nil end --[[--------------------------< _ L A N G >-------------------------------------------------------------------- entry point for {{lang}} there should be no reason to set parameters in the {{lang}} {{#invoke:}} <includeonly>{{#invoke:lang|lang}}</includeonly> parameters are received from the template's frame (parent frame) ]] local function _lang (args) local out = {}; local language_name; -- used to make category names local category_name; -- same as language_name except that it retains any parenthetical disambiguators (if any) from the data set local subtags = {}; -- IETF subtags script, region, variant, and private local code; -- the language code local msg; -- for error messages local tag = 'span'; -- initial value for make_text_html() local template = args.template or 'Lang'; validate_cat_args (args); -- determine if categorization should be suppressed if args[1] and args.code then return make_error_msg ('冲突：{{{1}}} 和 |code=', args, template); else args.code = args[1] or args.code; -- prefer args.code end if args[2] and args.text then return make_error_msg ('冲突：{{{2}}} 和 |text=', args, template); else args.text = args[2] or args.text; -- prefer args.text end msg = validate_text (template, args); -- ensure that |text= is set if is_set (msg) then -- msg is an already-formatted error message return msg; end args.text, tag = html_tag_select (args.text); -- inspects text; returns appropriate html tag with text trimmed accordingly args.rtl = args.rtl == 'yes'; -- convert to boolean: 'yes' -> true, other values -> false args.proto, msg = validate_proto (args.proto); -- return boolean, or nil, or nil and error message flag if msg then return make_error_msg (table.concat ({'无效|proto=：', args.proto}), args, template); end code, subtags.script, subtags.region, subtags.variant, subtags.private, msg = get_ietf_parts (args.code); -- |script=, |region=, |variant= not supported because they should be part of args.code ({{{1}}} in {{lang}}) if msg then return make_error_msg ( msg, args, template); end args.italic, msg = validate_italic (args); if msg then return make_error_msg (msg, args, template); end if nil == args.italic then -- nil when |italic= absent or not set or |italic=default; args.italic controls if ('latn' == subtags.script) or -- script is latn (this_wiki_lang ~= code and not is_set (subtags.script) and not has_poem_tag (args.text) and unicode.is_Latin (args.text)) then -- text not this wiki's language, no script specified and not in poem markup but is wholly latn script (auto-italics) args.italic = 'unset'; -- DEFAULT for {{lang}} templates is upright; but if latn script set for font-style:italic else args.italic = 'inherit'; -- italic not set; script not latn; inherit current style end end if is_set (subtags.script) then -- if script set, override rtl setting if in_array (subtags.script, lang_data.rtl_scripts) then args.rtl = true; -- script is an rtl script else args.rtl = false; -- script is not an rtl script end end args.code = format_ietf_tag (code, subtags.script, subtags.region, subtags.variant, subtags.private); -- format to recommended subtag styles language_name = language_name_get (args.code, code, true); -- get language name; try ietf tag first, then code w/o variant then code w/ variant if 'invert' == args.italic and 'span' == tag then -- invert only supported for in-line content args.text = invert_italics (args.text) end -- 中文版特化部分：为非中文文字禁用繁简转换，中文文字和其他以汉字作为书写系统的汉语方言文字启用繁简转换。 if 'zh' == code then args.text = args.text elseif 'gan' == code then args.text = args.text elseif 'wuu' == code then args.text = args.text elseif 'yue' == code then args.text = args.text elseif 'lzh' == code then args.text = args.text elseif 'hsn' == code then args.text = args.text else args.text = '-{' .. args.text .. '}-' end args.text = proto_prefix (args.text, language_name, args.proto); -- prefix proto-language text with a splat table.insert (out, make_text_html (args.code, args.text, tag, args.rtl, args.italic, args.size, language_name)); table.insert (out, make_category (code, language_name, args.nocat)); table.insert (out, render_maint(args.nocat)); -- maintenance messages and categories return table.concat (out); -- put it all together and done end --[[--------------------------< L A N G >---------------------------------------------------------------------- entry point for {{lang}} there should be no reason to set parameters in the {{lang}} {{#invoke:}} <includeonly>{{#invoke:lang|lang}}</includeonly> parameters are received from the template's frame (parent frame) ]] local function lang (frame) local args = getArgs (frame, { -- this code so that we can detect and handle wiki list markup in text valueFunc = function (key, value) if 2 == key or 'text' == key then -- the 'text' parameter; do not trim wite space return value; -- return untrimmed 'text' elseif value then -- all other values: if the value is not nil value = mw.text.trim (value); -- trim whitespace if '' ~= value then -- empty string when value was only whitespace return value; end end return nil; -- value was empty or contained only whitespace end -- end of valueFunc }); return _lang (args); end --[[--------------------------< L A N G _ X X >---------------------------------------------------------------- For the {{lang-xx}} templates, the only parameter required to be set in the template is the language code. All other parameters can, usually should, be written in the template call. For {{lang-xx}} templates for languages that can have multiple writing systems, it may be appropriate to set |script= as well. For each {{lang-xx}} template choose the appropriate entry-point function so that this function knows the default styling that should be applied to text. For normal, upright style: <includeonly>{{#invoke:lang|lang_xx_inherit|code=xx}}</includeonly> For italic style: <includeonly>{{#invoke:lang|lang_xx_italic|code=xx}}</includeonly> All other parameters should be received from the template's frame (parent frame) Supported parameters are: |code = (required) the IANA language code |script = IANA script code; especially for use with languages that use multiple writing systems |region = IANA region code |variant = IANA variant code |text = (required) the displayed text in language specified by code |link = boolean false ('no') does not link code-spcified language name to associated language article |rtl = boolean true ('yes') identifies the language specified by code as a right-to-left language |nocat = boolean true ('yes') inhibits normal categorization; error categories are not affected |cat = boolian false ('no') opposite form of |nocat= |italic = boolean true ('yes') renders displayed text in italic font; boolean false ('no') renders displayed text in normal font; not set renders according to initial_style_state |lit = text that is a literal translation of text |label = 'none' to suppress all labeling (language name, 'translit.', 'lit.') any other text replaces language-name label - automatic wikilinking disabled for those {{lang-xx}} templates that support transliteration (those templates where |text= is not entirely latn script): |translit = text that is a transliteration of text |translit-std = the standard that applies to the transliteration |translit-script = ISO 15924 script name; falls back to code For {{lang-xx}}, the positional parameters are: {{{1}}} text {{{2}}} transliterated text {{{3}}} literal translation text no other positional parameters are allowed ]] local function _lang_xx (args) local out = {}; local language_name; -- used to make display text, article links local category_name; -- same as language_name except that it retains any parenthetical disambiguators (if any) from the data set local subtags = {}; -- IETF subtags script, region, and variant local code; -- the language code local translit_script_name; -- name associated with IANA (ISO 15924) script code local translit; local translit_title; local msg; -- for error messages local tag = 'span'; -- initial value for make_text_html() local template = args.template or 'Lang-xx'; if args[1] and args.text then return make_error_msg ('冲突：{{{1}}} 和 |text=', args, template); else args.text = args[1] or args.text; -- prefer args.text end msg = validate_text (template, args); -- ensure that |text= is set, does not contain italic markup and is protected from improper bolding if is_set (msg) then return msg; end args.text, tag = html_tag_select (args.text); -- inspects text; returns appropriate html tag with text trimmed accordingly if args[2] and args.translit then return make_error_msg ('冲突：{{{2}}} 和 |translit=', args, template); else args.translit = args[2] or args.translit -- prefer args.translit end if args[3] and (args.translation or args.lit) then return make_error_msg ('冲突：{{{3}}} 和 |lit= or |translation=', args, template); elseif args.translation and args.lit then return make_error_msg ('冲突：|lit= 和 |translation=', args, template); else args.translation = args[3] or args.translation or args.lit; -- prefer args.translation end if args.links and args.link then return make_error_msg ('冲突：|links= 和 |link=', args, template); else args.link = args.link or args.links; -- prefer args.link end validate_cat_args (args); -- determine if categorization should be suppressed args.rtl = args.rtl == 'yes'; -- convert to boolean: 'yes' -> true, other values -> false code, subtags.script, subtags.region, subtags.variant, subtags.private, msg = get_ietf_parts (args.code, args.script, args.region, args.variant); -- private omitted because private if msg then -- if an error detected then there is an error message return make_error_msg (msg, args, template); end args.italic, msg = validate_italic (args); if msg then return make_error_msg (msg, args, template); end if nil == args.italic then -- args.italic controls if is_set (subtags.script) then if 'latn' == subtags.script then args.italic = 'italic'; -- |script=Latn; set for font-style:italic else args.italic = initial_style_state; -- italic not set; script is not latn; set for font-style:<initial_style_state> end else args.italic = initial_style_state; -- here when |italic= and |script= not set; set for font-style:<initial_style_state> end end if is_set (subtags.script) then -- if script set override rtl setting if in_array (subtags.script, lang_data.rtl_scripts) then args.rtl = true; -- script is an rtl script else args.rtl = false; -- script is not an rtl script end end args.proto, msg = validate_proto (args.proto); -- return boolean, or nil, or nil and error message flag if msg then return make_error_msg (table.concat ({'无效 |proto=：', args.proto}), args, template); end args.code = format_ietf_tag (code, subtags.script, subtags.region, subtags.variant, subtags.private); -- format to recommended subtag styles language_name = language_name_get (args.code, code, true); -- get language name; try ietf tag first, then code w/o variant then code w/ variant category_name = language_name; -- category names retain IANA parenthetical diambiguators (if any) language_name = language_name:gsub ('%s+%b()', ''); -- remove IANA parenthetical disambiguators or qualifiers from names that have them if args.label then if 'none' ~= args.label then table.insert (out, table.concat ({args.label, '：'})); -- custom label end else if 'no' == args.link then table.insert (out, language_name); -- language name without wikilink else if lang_data.article_name[code] then table.insert (out, make_wikilink (lang_data.article_name[code][1], language_name)); -- language name with wikilink from override data else table.insert (out, make_wikilink (language_name)); -- language name with wikilink end end table.insert (out, '：'); -- separator end if 'invert' == args.italic then args.text = invert_italics (args.text) end -- 中文版特化部分：为非中文文字禁用繁简转换，中文文字和其他以汉字作为书写系统的汉语方言文字启用繁简转换。 if 'zh' == code then args.text = args.text elseif 'gan' == code then args.text = args.text elseif 'wuu' == code then args.text = args.text elseif 'yue' == code then args.text = args.text elseif 'lzh' == code then args.text = args.text elseif 'hsn' == code then args.text = args.text else args.text = '-{' .. args.text .. '}-' end args.text = proto_prefix (args.text, language_name, args.proto); -- prefix proto-language text with a splat table.insert (out, make_text_html (args.code, args.text, tag, args.rtl, args.italic, args.size, ('none' == args.label) and language_name or nil)) if is_set (args.translit) and not unicode.is_Latin (args.text) then -- transliteration (not supported in {{lang}}); not supported when args.text is wholly latn text (this is an imperfect test) table.insert (out, '，'); -- comma to separate text from translit if 'none' ~= args.label then table.insert (out, '<small>'); if script_table[args['translit-script']] then -- when |translit-script= is set, try to use the script's name translit_script_name = script_table[args['translit-script'][1]]; else translit_script_name = language_name; -- fall back on language name end translit_title = mw.title.makeTitle (0, table.concat ({translit_script_name, '羅馬化'})); -- make a title object if translit_title.exists and ('no' ~= args.link) then table.insert (out, make_wikilink ((translit_script_name or language_name) .. '羅馬化', '羅馬化')); -- make a wikilink if there is an article to link to else table.insert (out, '羅馬化'); -- else plain text end table.insert (out, '：</small>'); -- close the small tag end translit = make_translit (args.code, language_name, args.translit, args['translit-std'], args['translit-script']) if is_set (translit) then table.insert (out, translit); else return make_error_msg (table.concat ({'invalid translit-std: \'', args['translit-std'] or '[missing]'}), args, template); end end if is_set (args.translation) then -- translation (not supported in {{lang}}) table.insert (out, '，'); if 'none' ~= args.label then table.insert (out, '<small>'); if 'no' == args.link then table.insert (out, '直译'); else table.insert (out, make_wikilink ('直译')); end table.insert (out, "：</small>"); end table.insert (out, table.concat ({args.translation})); -- use html entities to avoid wiki markup confusion end table.insert (out, make_category (code, category_name, args.nocat)); table.insert (out, render_maint(args.nocat)); -- maintenance messages and categories return table.concat (out); -- put it all together and done end --[[--------------------------< L A N G _ X X _ A R G S _ G E T >---------------------------------------------- common function to get args table from {{lang-??}} templates returns table of args ]] local function lang_xx_args_get (frame) local args = getArgs(frame, { parentFirst= true, -- parameters in the template override parameters set in the {{#invoke:}} valueFunc = function (key, value) if 1 == key then -- the 'text' parameter; do not trim wite space return value; -- return untrimmed 'text' elseif value then -- all other values: if the value is not nil value = mw.text.trim (value); -- trim whitespace if '' ~= value then -- empty string when value was only whitespace return value; end end return nil; -- value was empty or contained only whitespace end -- end of valueFunc }); return args; end --[[--------------------------< L A N G _ X X _ I T A L I C >-------------------------------------------------- Entry point for those {{lang-xx}} templates that call lang_xx_italic(). Sets the initial style state to italic. ]] local function lang_xx_italic (frame) local args = lang_xx_args_get (frame); initial_style_state = 'italic'; return _lang_xx (args); end --[[--------------------------< _ L A N G _ X X _ I T A L I C >------------------------------------------------ Entry point ffrom another module. Sets the initial style state to italic. ]] local function _lang_xx_italic (args) initial_style_state = 'italic'; return _lang_xx (args); end --[[--------------------------< L A N G _ X X _ I N H E R I T >------------------------------------------------ Entry point for those {{lang-xx}} templates that call lang_xx_inherit(). Sets the initial style state to inherit. ]] local function lang_xx_inherit (frame) local args = lang_xx_args_get (frame); initial_style_state = 'inherit'; return _lang_xx (args); end --[[--------------------------< _ L A N G _ X X _ I N H E R I T >---------------------------------------------- Entry point from another module. Sets the initial style state to inherit. ]] local function _lang_xx_inherit (args) initial_style_state = 'inherit'; return _lang_xx (args); end --[[--------------------------< _ I S _ I E T F _ T A G >------------------------------------------------------ Returns true when a language name associated with IETF language tag exists; nil else. IETF language tag must be valid. All code combinations supported by {{lang}} and the {{lang-xx}} templates are supported by this function. Module entry point from another module ]] local function _is_ietf_tag (tag) -- entry point when this module is require()d into another local c, s, r, v, p, err; -- code, script, region, variant, private, error message c, s, r, v, p, err = get_ietf_parts (tag); -- disassemble tag into constituent part and validate return ((c and not err) and true) or nil; -- return true when code portion has a value without error message; nil else end --[[--------------------------< I S _ I E T F _ T A G >-------------------------------------------------------- Module entry point from an {{#invoke:}} ]] local function is_ietf_tag (frame) return _is_ietf_tag (getArgs (frame)[1]); -- args[1] is the ietf language tag to be tested; also get parent frame end --[[--------------------------< I S _ I E T F _ T A G _ F R A M E >-------------------------------------------- Module entry point from an {{#invoke:}}; same as is_ietf_tag() except does not get parameters from the parent (template) frame. This function not useful when called by {{lang|fn=is_ietf_tag_frame|<tag>}} because <tag> is in the parent frame. ]] local function is_ietf_tag_frame (frame) return _is_ietf_tag (getArgs (frame, {frameOnly = true,})[1]); -- args[1] is the ietf language tag to be tested; do not get parent frame end --[[--------------------------< _ N A M E _ F R O M _ T A G >-------------------------------------------------- Returns language name associated with IETF language tag if valid; error message else. All code combinations supported by {{lang}} and the {{lang-xx}} templates are supported by this function. Set invoke's |link= parameter to yes to get wikilinked version of the language name. Module entry point from another module ]] local function _name_from_tag (args) local subtags = {}; -- IETF subtags script, region, variant, and private local raw_code = args[1]; -- save a copy of the input IETF subtag local link = 'yes' == args['link']; -- make a boolean local label = args.label; local code; -- the language code local msg; -- gets an error message if IETF language tag is malformed or invalid local language_name = ''; code, subtags.script, subtags.region, subtags.variant, subtags.private, msg = get_ietf_parts (raw_code); if msg then local template = (args['template'] and table.concat ({'{{', args['template'], '}}: '})) or ''; -- make template name (if provided by the template) return table.concat ({'<span style=\"font-size: 100%; font-style: normal;\" class=\"error\">错误：', template, msg, '</span>'}); end raw_code = format_ietf_tag (code, subtags.script, subtags.region, subtags.variant, subtags.private); -- format to recommended subtag styles; private omitted because private language_name = language_name_get (raw_code, code); -- get language name; try ietf tag first, then code w/o variant then code w/ variant language_name = language_name:gsub ('%s+%b()', ''); -- remove IANA parenthetical disambiguators or qualifiers from names that have them if link then -- when |link=yes, wikilink the language name if lang_data.article_name[code] then language_name = make_wikilink (lang_data.article_name[code][1], label or language_name); -- language name with wikilink from override data else language_name = make_wikilink (language_name, label or language_name); -- language name with wikilink end end return language_name; end --[[--------------------------< N A M E _ F R O M _ T A G >---------------------------------------------------- Module entry point from an {{#invoke:}} ]] local function name_from_tag (frame) -- entry point from an {{#invoke:Lang|name_from_tag|<ietf tag>|link=<yes>|template=<template name>}} return _name_from_tag (getArgs(frame)) -- pass-on the args table, nothing else; getArgs() so we also get parent frame end --[[--------------------------< _ T A G _ F R O M _ N A M E >-------------------------------------------------- Returns the ietf language tag associated with the language name. Spelling of language name must be correct according to the spelling in the source tables. When a standard language name has a parenthetical disambiguator, that disambiguator must be omitted (they are not present in the data name-to-tag tables). Module entry point from another module ]] local function _tag_from_name (args) -- entry point from another module local msg; if args[1] and '' ~= args[1] then local data = mw.loadData ('Module:Lang/tag from name'); -- get the reversed data tables TODO: change when going live local lang = args[1]:lower(); -- allow any-case for the language name (speeling must till be correct) local tag = data.rev_override_table[lang] or data.rev_lang_table[lang] or data.rev_lang_dep_table[lang]; -- get the code; look first in the override then in the standard if tag then return tag, true; -- language name found so return tag and done; second return used by is_lang_name() else msg = '语言：' .. args[1] .. '未找到' -- language name not found, error message end else msg = '缺少语言名称' -- language name not provided, error message end local template = ''; if args.template and '' ~= args.template then template = table.concat ({'{{', args['template'], '}}: '}); -- make template name (if provided by the template) end return table.concat ({'<span style=\"font-size: 100%; font-style: normal;\" class=\"error\">错误：', template, msg, '</span>'}); end --[[--------------------------< T A G _ F R O M _ N A M E >---------------------------------------------------- Module entry point from an {{#invoke:}} ]] local function tag_from_name (frame) -- entry point from an {{#invoke:Lang|tag_from_name|<language name>|link=<yes>|template=<template name>}} local result, _ = _tag_from_name (getArgs(frame)) -- pass-on the args table, nothing else; getArgs() so we also get parent frame; supress second return used by is_lang_name() return result; end --[[--------------------------< I S _ L A N G _ N A M E >------------------------------------------------------ Module entry point from an {{#invoke:}} ]] local function is_lang_name (frame) local _, result = _tag_from_name (getArgs(frame)) -- pass-on the args table, nothing else; getArgs() so we also get parent frame; supress second return used by tag_from_name() return result and true or nil; end --[[--------------------------< _ T R A N S L >---------------------------------------------------------------- Module entry point from another module ]] local function _transl (args) local title_table = lang_data.translit_title_table; -- table of transliteration standards and the language codes and scripts that apply to those standards local language_name; -- language name that matches language code; used for tool tip local translit; -- transliterated text to display local script; -- IANA script local msg; -- for when called functions return an error message if is_set (args[3]) then -- [3] set when {{transl|code|standard|text}} args.text = args[3]; -- get the transliterated text args.translit_std = args[2] and args[2]:lower(); -- get the standard; lower case for table indexing if not title_table[args.translit_std] then return make_error_msg (table.concat ({'无法识别的转译标准：', args.translit_std}), args, 'Transl'); end else if is_set (args[2]) then -- [2] set when {{transl|code|text}} args.text = args[2]; -- get the transliterated text else if args[1] and args[1]:match ('^%a%a%a?%a?$') then -- args[2] missing; is args[1] a code or its it the transliterated text? return make_error_msg ('无文本', args, 'Transl'); -- args[1] is a code so we're missing text else args.text = args[1]; -- args[1] is not a code so we're missing that; assign args.text for error message return make_error_msg ('缺少语言/文字代码', args, 'Transl'); end end end if is_set (args[1]) then -- IANA language code used for html lang= attribute; or ISO 15924 script code if args[1]:match ('^%a%a%a?%a?$') then -- args[1] has correct form? args.code = args[1]:lower(); -- use the language/script code; only (2, 3, or 4 alpha characters); lower case because table indexes are lower case else return make_error_msg (table.concat ({'无法识别的语言/文字代码：', args[1]}), args, 'Transl'); -- invalid language / script code end else return make_error_msg ('缺少语言/文字代码', args, 'Transl'); -- missing language / script code so quit end args.italic, msg = validate_italic (args); if msg then return make_error_msg (msg, args, 'Transl'); end if 'italic' == args.italic then -- 'italic' when |italic=yes; because that is same as absent or not set and |italic=default args.italic = nil; -- set to nil; end if override_table[args.code] then -- is code a language code defined in the override table? language_name = override_table[args.code][1]; elseif lang_table[args.code] then -- is code a language code defined in the standard language code tables? language_name = lang_table[args.code][1]; elseif lang_dep_table[args.code] then -- is code a language code defined in the deprecated language code tables? language_name = lang_dep_table[args.code][1]; elseif script_table[args.code] then -- if here, code is not a language code; is it a script code? language_name = script_table[args.code][1]; script = args.code; -- code was an ISO 15924 script so use that instead args.code = ''; -- unset because not a language code else return make_error_msg (table.concat ({'无法识别的语言/文字代码：', args.code}), args, 'Transl'); -- invalid language / script code end -- here only when all parameters passed to make_translit() are valid return make_translit (args.code, language_name, args.text, args.translit_std, script, args.italic); end --[[--------------------------< T R A N S L >------------------------------------------------------------------ Module entry point from an {{#invoke:}} ]] local function transl (frame) return _transl (getArgs(frame)); end --[[--------------------------< C A T E G O R Y _ F R O M _ T A G >-------------------------------------------- Returns category name associated with IETF language tag if valid; error message else All code combinations supported by {{lang}} and the {{lang-xx}} templates are supported by this function. Module entry point from another module ]] local function _category_from_tag (args) local subtags = {}; -- IETF subtags script, region, variant, and private local raw_code = args[1]; -- save a copy of the input IETF subtag local link = 'yes' == args['link']; -- make a boolean local label = args.label; local code; -- the language code local msg; -- gets an error message if IETF language tag is malformed or invalid local category_name = ''; code, subtags.script, subtags.region, subtags.variant, subtags.private, msg = get_ietf_parts (raw_code); if msg then local template = (args['template'] and table.concat ({'{{', args['template'], '}}: '})) or ''; -- make template name (if provided by the template) return table.concat ({'<span style=\"font-size: 100%; font-style: normal;\" class=\"error\">错误：', template, msg, '</span>'}); end raw_code = format_ietf_tag (code, subtags.script, subtags.region, subtags.variant, subtags.private); -- format to recommended subtag styles; private omitted because private category_name = language_name_get (raw_code, code); -- get language name; try ietf tag first, then code w/o variant then code w/ variant category_name = make_category (code, category_name, nil, true):gsub ('[%[%]]', ''); return category_name; end --[[--------------------------< C A T E G O R Y _ F R O M _ T A G >-------------------------------------------- Module entry point from an {{#invoke:}} ]] local function category_from_tag (frame) -- entry point from an {{#invoke:Lang|category_from_tag|<ietf tag>|template=<template name>}} return _category_from_tag (getArgs (frame)); -- pass-on the args table, nothing else; getArgs() so we also get parent frame end --[[--------------------------< E X P O R T E D F U N C T I O N S >------------------------------------------ ]] return { category_from_tag = category_from_tag, lang = lang, -- entry point for {{lang}} lang_xx_inherit = lang_xx_inherit, -- entry points for {{lang-??}} lang_xx_italic = lang_xx_italic, is_ietf_tag = is_ietf_tag, is_ietf_tag_frame = is_ietf_tag_frame, is_lang_name = is_lang_name, tag_from_name = tag_from_name, -- returns ietf tag associated with language name name_from_tag = name_from_tag, -- used for template documentation; possible use in ISO 639 name from code templates transl = transl, -- entry point for {{transl}} _category_from_tag = _category_from_tag, -- entry points when this module is require()d into other modules _lang = _lang, _lang_xx_inherit = _lang_xx_inherit, _lang_xx_italic = _lang_xx_italic, _is_ietf_tag = _is_ietf_tag, get_ietf_parts = get_ietf_parts, _tag_from_name = _tag_from_name, _name_from_tag = _name_from_tag, _transl = _transl, };
</text>
<sha1>9tgm2yaqvrzblwju8g25wig94qy0ske</sha1>
</revision>
</page>
<page>
<title>Module:Lang/ISO 639 synonyms</title>
<ns>828</ns>
<id>6005585</id>
<revision>
<id>57557737</id>
<parentid>47639866</parentid>
<timestamp>2020-01-04T08:24:18Z</timestamp>
<contributor>
<username>Xiplus</username>
<id>899028</id>
</contributor>
<minor/>
<comment>
已保护“[[模块:Lang/ISO 639 synonyms]]”：高風險模板：246231引用（[编辑=仅管理员]（无限期）[移动=仅管理员]（无限期））
</comment>
<model>Scribunto</model>
<format>text/plain</format>
<text bytes="3163" xml:space="preserve">
-- File-Date: 2013-01-11 return { ["aar"] = "aa", ["abk"] = "ab", ["afr"] = "af", ["aka"] = "ak", ["amh"] = "am", ["ara"] = "ar", ["arg"] = "an", ["asm"] = "as", ["ava"] = "av", ["ave"] = "ae", ["aym"] = "ay", ["aze"] = "az", ["bak"] = "ba", ["bam"] = "bm", ["bel"] = "be", ["ben"] = "bn", ["bih"] = "bh", ["bis"] = "bi", ["bod"] = "bo", ["bos"] = "bs", ["bre"] = "br", ["bul"] = "bg", ["cat"] = "ca", ["ces"] = "cs", ["cha"] = "ch", ["che"] = "ce", ["chu"] = "cu", ["chv"] = "cv", ["cor"] = "kw", ["cos"] = "co", ["cre"] = "cr", ["cym"] = "cy", ["dan"] = "da", ["deu"] = "de", ["div"] = "dv", ["dzo"] = "dz", ["ell"] = "el", ["eng"] = "en", ["epo"] = "eo", ["est"] = "et", ["eus"] = "eu", ["ewe"] = "ee", ["fao"] = "fo", ["fas"] = "fa", ["fij"] = "fj", ["fin"] = "fi", ["fra"] = "fr", ["fry"] = "fy", ["ful"] = "ff", ["gla"] = "gd", ["gle"] = "ga", ["glg"] = "gl", ["glv"] = "gv", ["grn"] = "gn", ["guj"] = "gu", ["hat"] = "ht", ["hau"] = "ha", ["heb"] = "he", ["her"] = "hz", ["hin"] = "hi", ["hmo"] = "ho", ["hrv"] = "hr", ["hun"] = "hu", ["hye"] = "hy", ["ibo"] = "ig", ["ido"] = "io", ["iii"] = "ii", ["iku"] = "iu", ["ile"] = "ie", ["ina"] = "ia", ["ind"] = "id", ["ipk"] = "ik", ["isl"] = "is", ["ita"] = "it", ["jav"] = "jv", ["jpn"] = "ja", ["kal"] = "kl", ["kan"] = "kn", ["kas"] = "ks", ["kat"] = "ka", ["kau"] = "kr", ["kaz"] = "kk", ["khm"] = "km", ["kik"] = "ki", ["kin"] = "rw", ["kir"] = "ky", ["kom"] = "kv", ["kon"] = "kg", ["kor"] = "ko", ["kua"] = "kj", ["kur"] = "ku", ["lao"] = "lo", ["lat"] = "la", ["lav"] = "lv", ["lim"] = "li", ["lin"] = "ln", ["lit"] = "lt", ["ltz"] = "lb", ["lub"] = "lu", ["lug"] = "lg", ["mah"] = "mh", ["mal"] = "ml", ["mar"] = "mr", ["mkd"] = "mk", ["mlg"] = "mg", ["mlt"] = "mt", ["mon"] = "mn", ["mri"] = "mi", ["msa"] = "ms", ["mya"] = "my", ["nau"] = "na", ["nav"] = "nv", ["nbl"] = "nr", ["nde"] = "nd", ["ndo"] = "ng", ["nep"] = "ne", ["nld"] = "nl", ["nno"] = "nn", ["nob"] = "nb", ["nor"] = "no", ["nya"] = "ny", ["oci"] = "oc", ["oji"] = "oj", ["ori"] = "or", ["orm"] = "om", ["oss"] = "os", ["pan"] = "pa", ["pli"] = "pi", ["pol"] = "pl", ["por"] = "pt", ["pus"] = "ps", ["que"] = "qu", ["roh"] = "rm", ["ron"] = "ro", ["run"] = "rn", ["rus"] = "ru", ["sag"] = "sg", ["san"] = "sa", ["sin"] = "si", ["slk"] = "sk", ["slv"] = "sl", ["sme"] = "se", ["smo"] = "sm", ["sna"] = "sn", ["snd"] = "sd", ["som"] = "so", ["sot"] = "st", ["spa"] = "es", ["sqi"] = "sq", ["srd"] = "sc", ["srp"] = "sr", ["ssw"] = "ss", ["sun"] = "su", ["swa"] = "sw", ["swe"] = "sv", ["tah"] = "ty", ["tam"] = "ta", ["tat"] = "tt", ["tel"] = "te", ["tgk"] = "tg", ["tgl"] = "tl", ["tha"] = "th", ["tir"] = "ti", ["ton"] = "to", ["tsn"] = "tn", ["tso"] = "ts", ["tuk"] = "tk", ["tur"] = "tr", ["twi"] = "tw", ["uig"] = "ug", ["ukr"] = "uk", ["urd"] = "ur", ["uzb"] = "uz", ["ven"] = "ve", ["vie"] = "vi", ["vol"] = "vo", ["wln"] = "wa", ["wol"] = "wo", ["xho"] = "xh", ["yid"] = "yi", ["yor"] = "yo", ["zha"] = "za", ["zho"] = "zh", ["zul"] = "zu" }
</text>
<sha1>shzq5qyzo42nqfska6amwdq4g8lois9</sha1>
</revision>
</page>
<page>
<title>Module:Lang/data</title>
<ns>828</ns>
<id>6005465</id>
<revision>
<id>64983855</id>
<parentid>64736707</parentid>
<timestamp>2021-03-30T07:24:27Z</timestamp>
<contributor>
<username>Tigerzeng</username>
<id>1586693</id>
</contributor>
<comment>[[Special:Permalink/64871851|编辑请求]]：帝國亞拉姆語 -> 亞拉姆語</comment>
<model>Scribunto</model>
<format>text/plain</format>
<text bytes="33796" xml:space="preserve">
--[[--------------------------< L A N G _ N A M E _ T A B L E >------------------------------------------------ primary table of tables that decode: lang -> language tags and namesodule:Language/data/iana language script -> ISO 15924 script tags region -> ISO 3166 region tags variant -> iana registered variant tags suppressed -> map of scripts tags and their associated language tags all of these data come from separate modules that are derived from the IANA language-subtag-registry file key_to_lower() avoids the metatable trap and sets all keys in the subtables to lowercase. Many language codes have multiple associated names; Module:lang is only concerned with the first name so key_to_lower() only fetches the first name. TODO: instead of returning: ["key"] = {"name"} where each table has only one name, return ["key"] = "name" requires changes in Module:Lang. ]] local function key_to_lower (module, src_type) local out = {}; local source = (('var_sup' == src_type) and require (module)) or mw.loadData (module); -- fetch data from this module; require() avoids metatable trap for variant data if 'var_sup' == src_type then for k, v in pairs (source) do out[k:lower()] = v; -- for variant, everything is needed end elseif 'lang' == src_type and source.active then -- for ~/iana_languages (active) for k, v in pairs (source.active) do out[k:lower()] = {v[1]}; -- ignore multiple names; take first name only end elseif 'lang_dep' == src_type and source.deprecated then -- for ~/iana_languages (deprecated) for k, v in pairs (source.deprecated) do out[k:lower()] = {v[1]}; -- ignore multiple names; take first name only end else -- here for all other sources for k, v in pairs (source) do out[k:lower()] = {v[1]}; -- ignore multiple names; take first name only end end return out; end local lang_name_table = { lang = key_to_lower ('Module:Language/data/iana languages', 'lang'), lang_dep = key_to_lower ('Module:Language/data/iana languages', 'lang_dep'), script = key_to_lower ('Module:Language/data/iana scripts'), -- script keys are capitalized; set to lower region = key_to_lower ('Module:Language/data/iana regions'), -- region keys are uppercase; set to lower variant = key_to_lower ('Module:Language/data/iana variants', 'var_sup'), suppressed = key_to_lower ('Module:Language/data/iana suppressed scripts', 'var_sup'), -- script keys are capitalized; set to lower } local lang_data = {}; --[[--------------------------< O V E R R I D E >-------------------------------------------------------------- Language codes and names in this table override the BCP47 names in Module:Language/name/data. code indexes in this table shall always be lower case ]] local override = { --显示中文及查找目录所用，必须使用繁体中文 ["aa"] = {"阿法爾語"}, -- Afar ["ab"] = {"阿布哈茲語"}, -- Abkhazian ["ae"] = {"阿維斯陀語"}, -- Avestan ["af"] = {"南非語"}, -- Afrikaans ["ak"] = {"阿坎語"}, -- Akan ["am"] = {"阿姆哈拉語"}, -- Amharic ["an"] = {"亞拉岡語"}, -- Aragonese ["ar"] = {"阿拉伯語"}, ["as"] = {"阿薩姆語"}, ["av"] = {"阿瓦爾語"}, -- Avaric ["ay"] = {"艾馬拉語"}, -- Aymara ["az"] = {"亞塞拜然語"}, -- Azerbaijani ["ba"] = {"巴什基爾語"}, -- Bashkir ["be"] = {"白俄羅斯語"}, -- ["bg"] = {"保加利亞語"}, -- ["bh"] = {"比哈爾語"}, -- Bihari languages; collective ["bi"] = {"比斯拉馬語"}, ["bm"] = {"班巴拉語"}, -- Bambara, Bamanankan ["bn"] = {"孟加拉語"}, ["bo"] = {"標準藏語"}, -- Tibetan ["br"] = {"布列塔尼語"}, -- Brezhoneg ["bs"] = {"波斯尼亞語"}, ["ca"] = {"加泰隆尼亞語"}, ["ce"] = {"車臣語"}, ["ceb"] = {"宿霧語"}, ["ch"] = {"查莫羅語"}, ["co"] = {"科西嘉語"}, ["cr"] = {"克里語"}, ["cs"] = {"捷克語"}, ["cu"] = {"古教會斯拉夫語"}, -- Church Slavic, Church Slavonic, Old Bulgarian, Old Church Slavonic, Old Slavonic' ["cv"] = {"楚瓦什語"}, ["cy"] = {"威爾斯語"}, ["da"] = {"丹麥語"}, ["de"] = {"德語"}, ["de-AT"] = {"奧地利德語"}, ["dv"] = {"迪維希語"}, ["dz"] = {"不丹語"}, ["ee"] = {"埃維語"}, ["el"] = {"希臘語"}, -- Modern Greek (1453-) ["en"] = {"英語"}, ["en-AU"] = {"澳洲英語"}, ["en-CA"] = {"加拿大英語"}, ["en-GB"] = {"英國英語"}, ["en-IE"] = {"愛爾蘭英語"}, ["en-NZ"] = {"紐西蘭英語"}, ["en-SA"] = {"南非英語"}, ["en-US"] = {"美國英語"}, ["eo"] = {"世界語"}, ["es"] = {"西班牙語"}, ["et"] = {"愛沙尼亞語"}, ["eu"] = {"巴斯克語"}, ["fa"] = {"波斯語"}, ["ff"] = {"富拉語"}, -- Fulah ["fi"] = {"芬蘭語"}, ["fj"] = {"斐濟語"}, ["fo"] = {"法羅語"}, ["fr"] = {"法語"}, ["fy"] = {"菲士蘭語"}, -- Western Frisian ["ga"] = {"愛爾蘭語"}, ["gd"] = {"蘇格蘭蓋爾語"}, ["gl"] = {"加利西亞語"}, ["gn"] = {"瓜拉尼語"}, ["gu"] = {"古吉拉特語"}, ["gv"] = {"曼島語"}, ["ha"] = {"豪薩語"}, ["he"] = {"希伯來語"}, ["hi"] = {"印地語"}, ["ho"] = {"希里木托語"}, ["hr"] = {"克羅埃西亞語"}, ["ht"] = {"海地克里奧爾語"}, -- Haitian, Haitian Creole ["hu"] = {"匈牙利語"}, ["hy"] = {"亞美尼亞語"}, ["hz"] = {"赫雷羅語"}, -- Herero ["ia"] = {"因特語"}, -- Interlingua (International Auxiliary Language Association) ["id"] = {"印度尼西亞語"}, ["ie"] = {"西方國際語"}, ["ig"] = {"伊博語"}, -- Igbo ["ii"] = {"彝語北部方言"}, -- Sichuan Yi, Nuosu ["ik"] = {"依努庇亞克語"}, ["io"] = {"伊多語"}, ["is"] = {"冰島語"}, ["it"] = {"義大利語"}, ["iu"] = {"伊努克提圖特語"}, ["ja"] = {"日語"}, ["jv"] = {"爪哇語"}, ["ka"] = {"喬治亞語"}, ["kg"] = {"剛果語"}, ["ki"] = {"基庫尤語"}, -- Kikuyu, Gikuyu ["kj"] = {"寬亞瑪語"}, -- Kwanyama, Oshikwanyama ["kk"] = {"哈薩克語"}, -- Kazakh; same, delete? ["kl"] = {"格陵蘭語"}, -- Kalaallisut, Greenlandic ["km"] = {"高棉語"}, -- Central Khmer ["kn"] = {"卡納達語"}, -- Kannaḍa ["ko"] = {"韓語"}, -- Korean ["ks"] = {"喀什米爾語"}, -- Kashmiri ["ku"] = {"庫德語"}, -- Kurdish ["kv"] = {"科米語"}, -- Komi ["kw"] = {"康瓦爾語"}, -- Cornish, Kernowek ["ky"] = {"吉爾吉斯語"}, -- Kirghiz, Kyrgyz ["la"] = {"拉丁語"}, ["lb"] = {"盧森堡語"}, ["lg"] = {"盧干達語"}, -- Ganda ["li"] = {"林堡語"}, -- Limburgan, Limburger, Limburgish ["ln"] = {"林格拉語"}, ["lo"] = {"寮語"}, ["lt"] = {"立陶宛語"}, ["lu"] = {"盧巴卡丹加語"}, ["lv"] = {"拉脫維亞語"}, ["mg"] = {"馬達加斯加語"}, ["mh"] = {"馬紹爾語"}, ["mi"] = {"毛利語"}, -- Maori ["mk"] = {"馬其頓語"}, ["ml"] = {"馬拉雅拉姆語"}, ["mn"] = {"蒙古語"}, ["mo"] = {"摩爾多瓦語"}, ["mr"] = {"馬拉提語"}, -- Marathi ["ms"] = {"馬來語"}, -- Malay (macrolanguage) ["mt"] = {"馬爾他語"}, ["my"] = {"緬甸語"}, ["na"] = {"諾魯語"}, -- Nauru ["nb"] = {"書面挪威語"}, -- Norwegian Bokmål ["nd"] = {"北恩德貝勒語"}, -- North Ndebele ["ne"] = {"尼泊爾語"}, -- Nepali (macrolanguage) ["ng"] = {"恩敦加語"}, ["nl"] = {"荷蘭語"}, ["nn"] = {"新挪威語"}, -- Norwegian Nynorsk ["no"] = {"挪威語"}, ["nr"] = {"南恩德貝勒語"}, -- South Ndebele <not found in Chinese Wikipedia> ["nv"] = {"納瓦荷語"}, ["ny"] = {"齊切瓦語"}, -- Nyanja, Chewa, Chichewa ["oc"] = {"奧克語"}, -- Occitan (post 1500) ["oj"] = {"歐及布威語"}, -- Ojibwa ["om"] = {"奧羅莫語"}, ["or"] = {"歐利亞語"}, -- Oriya (macrolanguage), Odia (macrolanguage) ["os"] = {"奧塞梯語"}, ["pa"] = {"旁遮普語"}, -- Panjabi, Punjabi ["pi"] = {"巴利語"}, -- Pali; same, delete? ["pl"] = {"波蘭語"}, ["ps"] = {"普什圖語"}, ["pt"] = {"葡萄牙語"}, ["qu"] = {"奇楚瓦語"}, ["rm"] = {"羅曼什語"}, -- Romansh ["rn"] = {"克倫地語"}, -- Rundi ["ro"] = {"羅馬尼亞語"}, -- Romanian, Moldavian, Moldovan; same as first in IANA list, delete? ["ru"] = {"俄語"}, ["rw"] = {"盧安達語"}, -- Kinyarwanda; same, delete? ["sa"] = {"梵語"}, ["sc"] = {"薩丁尼亞語"}, ["sd"] = {"信德語"}, ["se"] = {"北薩米語"}, ["sg"] = {"桑戈語"}, ["sh"] = {"塞爾維亞-克羅埃西亞語"}, ["si"] = {"僧伽羅語"}, -- Sinhala, Sinhalese ["sk"] = {"斯洛伐克語"}, ["sl"] = {"斯洛維尼亞語"}, -- Slovenian ["sm"] = {"薩摩亞語"}, ["sn"] = {"修納語"}, ["so"] = {"索馬利亞語"}, ["sq"] = {"阿爾巴尼亞語"}, ["sr"] = {"塞爾維亞語"}, ["sr-Cyrl"] = {"塞爾維亞語西里爾字母"}, -- sr = Serbian; Cyrillic is the alphabet ["ss"] = {"史瓦濟語"}, -- Swati ["st"] = {"塞索托語"}, -- Southern Sotho ["su"] = {"巽他語"}, ["sv"] = {"瑞典語"}, ["sw"] = {"斯瓦希里語"}, -- Swahili (macrolanguage) ["ta"] = {"坦米爾語"}, ["te"] = {"泰盧固語"}, ["tg"] = {"塔吉克語"}, ["th"] = {"泰語"}, ["ti"] = {"提格利尼亞語"}, ["tk"] = {"土庫曼語"}, ["tl"] = {"他加祿語"}, ["tn"] = {"札那語"}, ["to"] = {"東加語"}, ["tr"] = {"土耳其語"}, ["to"] = {"東加語"}, -- Tonga (Tonga Islands) ["ts"] = {"聰加語"}, -- Tsonga, Xitsonga ["tt"] = {"韃靼語"}, -- Tatar ["tw"] = {"契維語"}, ["ty"] = {"大溪地語"}, ["ug"] = {"維吾爾語"}, ["uk"] = {"烏克蘭語"}, ["ur"] = {"烏爾都語"}, ["uz"] = {"烏茲別克語"}, ["ve"] = {"文達語"}, ["vi"] = {"越南語"}, ["vo"] = {"沃拉普克語"}, ["wa"] = {"瓦隆語"}, ["wo"] = {"沃洛夫語"}, ["xh"] = {"科薩語"}, ["yi"] = {"意第緒語"}, ["yo"] = {"約魯巴語"}, ["za"] = {"壯語"}, -- Zhuang, Chuang; ; same as first in IANA list, delete? ["zh"] = {"中文"}, ["zu"] = {"祖魯語"}, -- ISO 639-2 codes ["ber"] = {"柏柏爾語"}, -- Berber languages ["cel"] = {"原始凱爾特語"}, -- Celtic languages ["cop"] = {"科普特語"}, -- Coptic languages ["gem"] = {"原始日耳曼語"}, -- Germanic languages ["jbo"] = {"邏輯語"}, -- Lojban ["myn"] = {"瑪雅語系"}, -- Mayan languages ["nah"] = {"納瓦特爾語"}, -- Nahuatl languages ["pra"] = {"普拉克里特諸語言"}, -- Prakrit languages -- ["roa"] = {"澤西語"}, -- Romance languages ["sal"] = {"薩利希語系"}, -- Salishan languages ["sla"] = {"斯拉夫語族"}, -- Slavic languages ["son"] = {"桑海語族"}, -- Songhai languages ["sux"] = {"蘇美語"}, ["uk"] = {"烏克蘭語"}, ["wen"] = {"索布語"}, -- Sorbian languages -- ISO 639-3 codes ["abk"] = {"阿布哈茲語"}, -- not in IANA; see code ab ["ace"] = {"亞齊語"}, -- Achinese ["ady"] = {"阿迪格語"}, -- Adyghe language ["aec"] = {"Sa'idi Arabic"}, -- Saidi Arabic ["ain"] = {"阿伊努語"}, -- Ainu (Japan) ["akk"] = {"阿卡德語"}, ["akl"] = {"阿克蘭語"}, -- Aklanon ["alr"] = {"阿留特語"}, ["alt"] = {"阿爾泰語"}, -- Southern Altai ["ami"] = {"阿美語"}, -- Amis, Pangcah ["ams"] = {"南奄美大島語"}, -- ["ang"] = {"古英語"}, -- Old English (ca. 450-1100) ["apm"] = {"Mescalero-Chiricahua"}, -- Mescalero-Chiricahua Apache ["arc"] = {"亞拉姆語"}, ["arq"] = {"阿爾及利亞阿拉伯語"}, ["arz"] = {"埃及阿拉伯語"}, -- Egyptian Arabic ["ast"] = {"阿斯圖里亞斯語"}, -- Asturian ["atb"] = {"載瓦語"}, ["bal"] = {"俾路支語"}, -- Baluchi ["bar"] = {"巴伐利亞語"}, -- Bavarian ["bcl"] = {"中比科爾語"}, -- Central Bikol ["bft"] = {"巴爾蒂語"}, -- Balti ["bho"] = {"博杰普爾語"}, -- Bhojpuri ["bin"] = {"埃多語"}, -- Bini, Edo ["bnn"] = {"布農語"}, -- Bunun ["bpy"] = {"比什奴普萊利亞－曼尼浦爾語"}, -- Bishnupriya, Bishnupriya Manipuri ["brh"] = {"布拉灰語"}, -- ["brx"] = {"博多語"}, -- Bodo (India) ["byq"] = {"巴賽語"}, -- Basay ["chg"] = {"察合台突厥語"}, -- Chagatai ["chm"] = {"Mari"}, -- Mari (Russia) ["ckb"] = {"中庫爾德語"}, -- Sorani Kurdish, Central Kurdish ["ckt"] = {"楚科奇語"}, ["ckv"] = {"噶瑪蘭語"}, -- Kbalan, Kavalan ["cnr"] = {"蒙特內哥羅語"}, -- Montenegrin ["cnu"] = {"Shenwa"}, -- Chenoua ["coc"] = {"Cocopah"}, -- Cocopa ["crh"] = {"克里米亞韃靼語"}, -- Crimean Tatar, Qırımtatar ["csu"] = {"卡舒比語"}, -- ["deu"] = {"早期德語"}, -- not in IANA; see code de ["din"] = {"丁卡語"}, -- ["diq"] = {"扎扎其語"}, -- Dimli (individual language) ["dng"] = {"東干語"}, --Dungan ["dru"] = {"魯凱語"}, -- Drekay, Rukai ["dsb"] = {"下索布語"}, -- Lower Sorbian, dolnoserbšćina ["egy"] = {"埃及語"}, -- Egyptian (Ancient) ["ell"] = {"現代希臘語"}, -- not in IANA; see code el ["enm"] = {"中古英語"}, -- Middle English (1100-1500) ["fit"] = {"梅安語"}, -- Tornedalen Finnish ["fkv"] = {"克文語"}, -- Kven Finnish ["fos"] = {"西拉雅語"}, -- Siraya ["frk"] = {"古法蘭克語"}, -- Frankish ["frm"] = {"中古法語"}, -- Middle French (ca. 1400-1600) ["fro"] = {"古法語"}, -- Old French (842-ca. 1400) ["frr"] = {"北弗里斯蘭語"}, -- North Frisian, Frasch, Fresk, Freesk, Friisk ["fry"] = {"西菲士蘭語"}, -- not in IANA; see code fy ["gez"] = {"吉茲語"}, -- Geez ["gju"] = {"古吉爾語 "}, -- Gujari ["gmh"] = {"中古高地德語"}, -- Middle High German (ca. 1050-1500) ["goh"] = {"古高地德語"}, -- Old High German (ca. 750-1050) ["got"] = {"哥德語"}, -- Gothic, Gutisk ["grc"] = {"古希臘語"}, -- Ancient Greek (to 1453) ["gsw"] = {"阿勒曼尼語"}, -- Swiss German, Alemannic, Alsatian ["gul"] = {"Gullah"}, -- Sea Island Creole English ["hak"] = {"客家語"}, -- Hakka Chinese ["hbo"] = {"聖經希伯來語"}, -- Ancient Hebrew ["hbs"] = {"塞爾維亞-克羅埃西亞語"}, -- Serbo-Croatian ["hnd"] = {"Hindko"}, -- Southern Hindko ["hoc"] = {"霍語"}, -- Ho, Bihar Ho, Lanka Kol ["ikt"] = {"Inuvialuk"}, -- Inuinnaqtun, Western Canadian Inuktitut ["ilo"] = {"伊洛卡諾語"}, -- Iloko ["inh"] = {"印古什語"}, -- Ingush ["kaa"] = {"Karakalpak"}, -- Kara-Kalpak ["kae"] = {"凱達格蘭語"}, -- ["kan"] = {"康納達語"}, -- Kannada ["khb"] = {"傣仂語"}, -- Tai Lue, Tai Lɯ, Tai Lü, Thai Lue, Tai Le ["kmr"] = {"北庫德語"}, -- Northern Kurdish ["knn"] = {"孔卡尼語"}, -- Konkani (individual language) ["kok"] = {"孔卡尼語"}, -- Konkani (macrolanguage) ["kpo"] = {"科普索語"}, -- Kposo, Ikposo ["kpy"] = {"科里亞克語"}, ["krj"] = {"Kinaray-a"}, -- Kinaray-A ["ksh"] = {"利普里安語"}, -- Ripuarian, Kölsch; --ksh is the code of Colognian, but ksh.wiki is the Ripuarian Wikipedia ["ksw"] = {"斯高克倫語"}, -- S'gaw Karen ["ktz"] = {"Juǀ'hoan"}, -- Ju/'hoan, Juǀʼhoan, Juǀʼhoansi ["kzg"] = {"喜界語"}, -- Kikai ["lbj"] = {"拉達克語"}, -- Ladakhi ["lez"] = {"列茲金語"}, -- Lezgian, Lezghian ["lij"] = {"利古里亚語"}, ["liv"] = {"立窩尼亞語"}, -- Livonian, Liv ["lng"] = {"倫巴底語"}, -- Lombardic, Langobardic ["lzz"] = {"拉茲語"}, -- Laz ["maz"] = {"馬索維亞語"}, -- Central Mazahua ["mag"] = {"摩揭陀語"}, -- Magahi ["mdf"] = {"莫克沙語"}, -- Moksha ["mga"] = {"中古愛爾蘭語"}, -- Middle Irish (900-1200) ["mhr"] = {"Mari"}, -- Eastern Mari ["mia"] = {"Miami-Illinois"}, -- Miami ["miq"] = {"Miskito"}, -- Mískito ["mix"] = {"Mixtec"}, -- Mixtepec Mixtec ["mjw"] = {"卡爾比語"}, -- Karbi -- ["mla"] = {"Medieval Latin"}, -- Malo; clearly a misuse of code mla; ["mni"] = {"曼尼普爾語"}, -- Manipuri, Meitei ["mol"] = {"摩爾多瓦語", "摩爾達維亞語"}, -- Moldavian, Moldovan (639-3, both retired) ["mrj"] = {"Hill Mari"}, -- Western Mari ["mww"] = {"白苗話"}, -- Hmong Daw ["mzn"] = {"馬贊德蘭語"}, -- Mazanderani ["nan"] = {"閩南語"}, -- Min Nan Chinese ["naq"] = {"Khoekhoe"}, -- Khoekhoe, Nama (Namibia); same as first in IANA list, delete? -- ["naz"] = {"North Azeri"}, -- Coatepec Nahuatl; clearly a misuse of code naz ["nci"] = {"古典納瓦特爾語"}, -- Classical Nahuatl; same, delete? ["nds"] = {"低地德語"}, -- Low German, Low Saxon, Plattdeutsch, Plattdüütsch ["nds-nl"] = {"低薩克森荷蘭語"}, -- Dutch Low Saxon, Low German, Low Saxon; as spoken in the Netherlands; see code nsd ["new"] = {"尼瓦爾語"}, -- Newari, Nepal Bhasa ["non"] = {"古諾斯語"}, ["nod"] = {"北部泰語"}, -- Northern Thai, Lanna, Kam Mueang ["nrf"] = {"澤西語"}, -- Jèrriais -- ["nrm"] = {"諾曼語"}, -- Narom; clearly a misuse of code nrm -- ["nsd"] = {"低薩克森荷蘭語"}, -- Dutch Low Saxon, Southern Nisu; how can this be right? typo related to code nds-nl? ["nso"] = {"北索托語"}, -- Pedi, Northern Sotho, Sepedi ["nwc"] = {"古典尼瓦爾語"}, -- Classical Newari, Classical Nepal Bhasa, Old Newari ["oci"] = {"普羅旺斯語"}, -- oc ["okn"] = {"沖永良部語"}, -- Okinoerabu dialect cluster, Shimamuni ["oko"] = {"新羅語"}, ["ood"] = {"O'odham"}, -- Tohono O'odham ["ota"] = {"鄂圖曼土耳其語"}, -- Ottoman Turkish (1500-1928) ["otk"] = {"古突厥語"}, -- Old Turkish ["oty"] = {"古泰米爾語"}, ["owl"] = {"古威爾斯語"}, -- Old Welsh ["pal"] = {"中古波斯語"}, -- Pahlavi ["pam"] = {"邦板牙語"}, -- Pampanga, Kapampangan ["pcd"] = {"庇卡底語"}, ["peo"] = {"古波斯語"}, -- Old Persian (ca. 600-400 B.C.) ["phr"] = {"Potwari"}, -- Pahari-Potwari ["phn"] = {"腓尼基語"}, -- Phoenician ["pka"] = {"Jain Prakrit"}, -- Ardhamāgadhī Prākrit ["pms"] = {"皮埃蒙特语"}, ["pnb"] = {"旁遮普語"}, -- Western Panjabi ["prs"] = {"達利語"}, ["psu"] = {"索拉塞那語"}, -- Sauraseni Prākrit ["ppu"] = {"拍瀑拉語", "洪雅語"}, -- Papura, Hoany ["pwn"] = {"排灣語"}, -- Pinayuanan, Paiwan ["pyu"] = {"卑南語"}, -- Pinuyumayan, Puyuma ["rap"] = {"Rapa Nui"}, -- Rapanui ["rar"] = {"庫克群島毛利語"}, -- Rarotongan, Cook Islands Maori ["rmu"] = {"Scandoromani"}, -- Tavringer Romani ["rom"] = {"羅姆語"}, -- Romany ["rup"] = {"阿羅蒙語"}, -- Macedo-Romanian, Aromanian, Arumanian ["rus"] = {"俄語"}, -- not in IANA; see code ru ["rut"] = {"魯圖爾語"}, -- Rutul ["ryn"] = {"北奄美大島語"}, ["rys"] = {"八重山語"}, -- Yaeyama ["ryu"] = {"沖繩語"}, -- Central Okinawan ["sah"] = {"雅庫特語"}, -- Yakut 又譯作薩哈語 ["sco"] = {"低地蘇格蘭語"}, -- Scots, Lowland Scots ["scn"] = {"西西里語"}, ["sdc"] = {"薩沙里語"}, -- Sassarese Sardinian ["sdn"] = {"Gallurese"}, -- Gallurese Sardinian ["sga"] = {"古愛爾蘭語"}, -- Old Irish (to 900) ["sgs"] = {"薩莫吉提亞語"}, -- Samogitian dialect, Žemaitiu ruoda ["shn"] = {"撣語"}, -- Shan ["shp"] = {"Shipibo"}, -- Shipibo-Conibo ["sip"] = {"錫金語"}, -- Sikkimese ["smn"] = {"伊納里薩米語"}, ["sms"] = {"斯科爾特薩米語"}, -- Skolt Sami ["skr"] = {"Saraiki"}, -- Saraiki, Seraiki; same as first in IANA list, delete? ["src"] = {"勞古多羅方言"}, -- Logudorese Sardinian ["sro"] = {"坎皮達諾方言"}, -- Campidanese Sardinian ["sxr"] = {"拉阿魯哇語"}, -- Hla'alua, Saaroa ["szy"] = {"撒奇萊雅語"}, -- Sakizaya ["tab"] = {"塔巴薩蘭語"}, -- Tabasaran ["tao"] = {"達悟語"}, -- Cizicizing No Tao、Ireriak No Tao, Yami ["tay"] = {"泰雅語"}, -- Atayal, Tayal ["tcy"] = {"圖陸語"}, -- Tulu, Tulu bāse ["tkl"] = {"托克勞語"}, -- Tokelau ["tkn"] = {"德之島語"}, -- Tokunoshima ["tmh"] = {"圖阿雷格語"}, -- Tamashek ["tpi"] = {"巴布亞皮欽語"}, -- Tok Pisin ["trv"] = {"德路固語", "太魯閣語"}, -- Truku, Sejiq Truku ["tsu"] = {"鄒語"}, -- Cou, Tsou ["tvl"] = {"吐瓦魯語"}, -- Tuvalu ["tyv"] = {"圖瓦語"}, -- Tuvinian ["uby"] = {"尤比克語"}, -- Ubykh ["uun"] = {"巴宰語"}, -- Pazeh, Kulon (龜崙語) is its dialect ["vls"] = {"西佛萊明語"}, -- Vlaams ["vec"] = {"威尼斯語"}, ["war"] = {"瓦瑞語"}, -- Waray (Philippines) ["wep"] = {"西伐利亞語"}, -- Westphalien ["wo"] = {"沃洛夫語"}, -- Wolof ["xal"] = {"衛拉特語", "瓦剌語"}, -- Kalmyk, Oirat ["xal-RU"] = {"卡爾梅克衛拉特語"}, -- Kalmyk Oirat ["xcl"] = {"古典亞美尼亞語"}, -- Classical Armenian ["xct"] = {"近古藏語"}, -- Classical Tibetan ["xmf"] = {"明格列爾語"}, -- Mingrelian ["xnb"] = {"卡那卡那富語"}, -- Kanakanavu ["xpp"] = {"百濟語"}, -- Baekje ["xpu"] = {"布匿語"}, -- Punic ["xsr"] = {"夏爾巴語"}, -- Sherpa ["xsy"] = {"賽夏語"}, -- Saisiyat ["xug"] = {"國頭語"}, -- Kunigami ["xwo"] = {"書面瓦剌語"}, -- Written Oirat ["yoi"] = {"與那國語"}, -- Yonaguni ["yox"] = {"與論語"}, -- Yoron ["yua"] = {"猶加敦馬雅語"}, -- Yucateco, Yucatec Maya ["yue"] = {"粵語"}, ["zea"] = {"西蘭語"}, -- Zeêuw, Zealandic ["zkg"] = {"高句麗語"}, ["zne"] = {"贊德語"}, -- Zande -- non-standard codes ["bat-smg"] = {"薩莫吉提亞語"}, -- bat = Baltic languages (639-2); dialect of Lithuanian has it's own IANA code sgs; bat-smg ["be-x-old "] = {"白俄羅斯語 (舊正寫法)"}, -- be = Belarusian; x-old = private use tag; be-x-old.wikipedia.org; space char in index may indicate that this code not used ["cbk-zam"] = {"查瓦卡諾語"}, -- cbk = Chavacano; zam = Zamboangueño? zam is not an IANA-registered extlang; cbk-zam.wikipedia.org -- ["cg"] = {"Montenegrin", "sr-ME"}, -- IANA / ISO 639-3 code is cnr ["en-emodeng"] = {"近代英語"}, -- emodeng is not an IANA-registered variant ["fiu-vro"] = {"佛羅語"}, -- fiu = Finno-Ugrian languages (639-2); vro = Võro (639-3); fiu-vro.wikipedia.org ["gkm"] = {"中世紀希臘語", "grc"}, ["grc-gre"] = {"希臘語", "grc"}, -- grc = Ancient Greek (to 1453); gre not an IANA-registered code; used by Template:lang-grc-gre ["hbs-Cyrl"] = {"塞爾維亞-克羅埃西亞語", "hbs"}, ["hbs-Latn"] = {"塞爾維亞-克羅埃西亞語", "hbs"}, ["map-bms"] = {"Banyumasan"}, -- dialect of Javanese; map = Austronesian languages (639-2); bms is an IANA registered code not related to Javanese; map-bms.wikipedia.org ["roa-rup"] = {"阿羅馬尼亞語"}, -- roa = Romance languages (639-2); rup = Macedo-Romanian, Aromanian, Arumanian (639-3); roa-rup.wikipedia.org ["roa-tara"] = {"塔倫蒂諾語"}, -- roa = Romance languages (639-2); tara is not an IANA registered script; roa-tara.wikipedia.org ["simple"] = {"簡單英語"}, -- simple is not an IANA registered variant; simple.wikipedia.org ["zh-classical"] = {"文言文"}, -- zh = Chinese; classical is not an IANA-registered variant; zh-classical.wikipedia.org ["zh-min-nan"] = {"閩南語"}, -- zh-min-nan = Minnan, Hokkien, Amoy, Taiwanese, Southern Min, Southern Fujian, Hoklo, Southern Fukien, Ho-lo; granfathered in IANA, nan preferred; zh-min-nan.wikipedia.org ["zh-yue"] = {"粵語"}, ["grc-x-aeolic"] = {"伊歐里斯希臘語"}, -- these grc-x-... codes are preferred alternates to the non-standard catchall code grc-gre ["grc-x-attic"] = {"阿提卡希臘語"}, ["grc-x-biblical"] = {"聖經希臘語"}, ["grc-x-byzant"] = {"拜占庭希臘語"}, ["grc-x-classic"] = {"古典希臘語"}, ["grc-x-doric"] = {"多利亞希臘語"}, ["grc-x-hellen"] = {"希利尼話"}, ["grc-x-ionic"] = {"愛奧尼亞希臘語"}, ["grc-x-koine"] = {"通用希臘語"}, ["grc-x-medieval"] = {"中古希臘語"}, ["grc-x-patris"] = {"教父希臘語"}, ["grk-x-proto"] = {"原始希臘語"}, -- grk in IANA is Greek languages -- ["iir-x-proto"] = {"Proto-Indo-Iranian"}, -- iir in IANA is Indo-Iranian Languages -- ["ira-x-proto"] = {"Proto-Iranian"}, -- ira in IANA is Iranian languages -- ["itc-x-proto"] = {"Proto-Italic"}, -- itc in IANA is Italic languages -- ["sla-x-proto"] = {"Proto-Slavic"}, -- sla in IANA is Slavic languages -- ["yuf-x-hav"] = {"Havasupai"}, -- IANA name for these three is Havasupai-Walapai-Yavapai -- ["yuf-x-wal"] = {"Walapai"}, -- ["yuf-x-yav"] = {"Yavapai"}, } --[[--------------------------< A R T I C L E _ L I N K >------------------------------------------------------ for those rare occasions when article titles don't fit with the normal '<language name>-language'（"xx语"或"xx語"）, this table maps language code to article title. Use of this table should be avoided and the use of redirects preferred as that is the long-standing method of handling article names that don't fit with the normal pattern ]] local article_name = { } --[=[-------------------------< R T L _ S C R I P T S >-------------------------------------------------------- ISO 15924 scripts that are written right-to-left. Data in this table taken from [[ISO 15924#List of codes]] last update to this list: 2017-12-24 ]=] local rtl_scripts = { 'adlm', 'arab', 'aran', 'armi', 'avst', 'cprt', 'egyd', 'egyh', 'hatr', 'hebr', 'hung', 'inds', 'khar', 'lydi', 'mand', 'mani', 'mend', 'merc', 'mero', 'narb', 'nbat', 'nkoo', 'orkh', 'palm', 'phli', 'phlp', 'phlv', 'phnx', 'prti', 'rohg', 'samr', 'sarb', 'sogd', 'sogo', 'syrc', 'syre', 'syrj', 'syrn', 'thaa', 'wole', }; --[[--------------------------< T R A N S L I T T I T L E S >------------------------------------------------ This is a table of tables of transliteration standards and the language codes or language scripts that apply to those standards. This table is used to create the tool-tip text associated with the transliterated text displayed by some of the {{lang-??}} templates. These tables are more-or-less copied directly from {{transl}}. The standard 'NO_STD' is a construct to allow for the cases when no |std= parameter value is provided. ]] local translit_title_table = { ['ahl'] = { ['default'] = 'Academy of the Hebrew Language transliteration', }, ['ala'] = { ['default'] = 'American Library Association – Library of Congress transliteration', }, ['ala-lc'] = { ['default'] = 'American Library Association – Library of Congress transliteration', }, ['batr'] = { ['default'] = 'Bikdash Arabic Transliteration Rules', }, ['bgn/pcgn'] = { ['default'] = 'Board on Geographic Names / Permanent Committee on Geographical Names transliteration', }, ['din'] = { ['ar'] = 'DIN 31635 Arabic', ['fa'] = 'DIN 31635 Arabic', ['ku'] = 'DIN 31635 Arabic', ['ps'] = 'DIN 31635 Arabic', ['tg'] = 'DIN 31635 Arabic', ['ug'] = 'DIN 31635 Arabic', ['ur'] = 'DIN 31635 Arabic', ['arab'] = 'DIN 31635 Arabic', ['default'] = 'DIN transliteration', }, ['eae'] = { ['default'] = 'Encyclopaedia Aethiopica transliteration', }, ['hepburn'] = { ['default'] = 'Hepburn transliteration', }, ['iast'] = { ['default'] = 'International Alphabet of Sanskrit transliteration', }, ['iso'] = { -- when a transliteration standard is supplied ['ab'] = 'ISO 9 Cyrillic', ['ba'] = 'ISO 9 Cyrillic', ['be'] = 'ISO 9 Cyrillic', ['bg'] = 'ISO 9 Cyrillic', ['kk'] = 'ISO 9 Cyrillic', ['ky'] = 'ISO 9 Cyrillic', ['mn'] = 'ISO 9 Cyrillic', ['ru'] = 'ISO 9 Cyrillic', ['tg'] = 'ISO 9 Cyrillic', ['uk'] = 'ISO 9 Cyrillic', ['bua'] = 'ISO 9 Cyrillic', ['sah'] = 'ISO 9 Cyrillic', ['tut'] = 'ISO 9 Cyrillic', ['xal'] = 'ISO 9 Cyrillic', ['cyrl'] = 'ISO 9 Cyrillic', ['ar'] = 'ISO 233 Arabic', ['ku'] = 'ISO 233 Arabic', ['ps'] = 'ISO 233 Arabic', ['ug'] = 'ISO 233 Arabic', ['ur'] = 'ISO 233 Arabic', ['arab'] = 'ISO 233 Arabic', ['he'] = 'ISO 259 Hebrew', ['yi'] = 'ISO 259 Hebrew', ['hebr'] = 'ISO 259 Hebrew', ['el'] = 'ISO 843 Greek', ['grc'] = 'ISO 843 Greek', ['ja'] = 'ISO 3602 Japanese', ['hira'] = 'ISO 3602 Japanese', ['hrkt'] = 'ISO 3602 Japanese', ['jpan'] = 'ISO 3602 Japanese', ['kana'] = 'ISO 3602 Japanese', ['zh'] = 'ISO 7098 Chinese', ['chi'] = 'ISO 7098 Chinese', ['pny'] = 'ISO 7098 Chinese', ['zho'] = 'ISO 7098 Chinese', -- ['han'] = 'ISO 7098 Chinese', -- unicode alias of Hani? doesn't belong here? should be Hani? ['hans'] = 'ISO 7098 Chinese', ['hant'] = 'ISO 7098 Chinese', ['ka'] = 'ISO 9984 Georgian', ['kat'] = 'ISO 9984 Georgian', ['arm'] = 'ISO 9985 Armenian', ['hy'] = 'ISO 9985 Armenian', ['th'] = 'ISO 11940 Thai', ['tha'] = 'ISO 11940 Thai', ['ko'] = 'ISO 11941 Korean', ['kor'] = 'ISO 11941 Korean', ['bn'] = 'ISO 15919 Indic', ['dra'] = 'ISO 15919 Indic', ['gu'] = 'ISO 15919 Indic', ['hi'] = 'ISO 15919 Indic', ['inc'] = 'ISO 15919 Indic', ['kn'] = 'ISO 15919 Indic', ['ml'] = 'ISO 15919 Indic', ['mr'] = 'ISO 15919 Indic', ['sa'] = 'ISO 15919 Indic', ['ta'] = 'ISO 15919 Indic', ['te'] = 'ISO 15919 Indic', ['beng'] = 'ISO 15919 Indic', ['brah'] = 'ISO 15919 Indic', ['deva'] = 'ISO 15919 Indic', ['default'] = 'ISO transliteration', }, ['mr'] = { ['default'] = 'McCune–Reischauer transliteration', }, ['nihon-shiki'] = { ['default'] = 'Nihon-shiki transliteration', }, ['no_std'] = { -- when no transliteration standard is supplied ['akk'] = 'Semitic transliteration', ['sem'] = 'Semitic transliteration', ['phnx'] = 'Semitic transliteration', ['xsux'] = 'Cuneiform transliteration', }, ['pinyin'] = { ['default'] = 'Pinyin transliteration', }, ['rr'] = { ['default'] = 'Revised Romanization of Korean transliteration', }, ['satts'] = { ['default'] = 'Standard Arabic Technical Transliteration System transliteration', }, ['ungegn'] = { ['default'] = 'United Nations Group of Experts on Geographical Names transliteration', }, ['wehr'] = { ['default'] = 'Hans Wehr transliteration', }, }; return { article_name = article_name, lang_name_table = lang_name_table, override = override, rtl_scripts = rtl_scripts, is_rtl_script = is_rtl_script, translit_title_table = translit_title_table, };
</text>
<sha1>3cnmyxszadqze2h7btnow6p2lnc4ncb</sha1>
</revision>
</page>
<page>
<title>Module:Language/data/iana languages</title>
<ns>828</ns>
<id>6006428</id>
<revision>
<id>64736709</id>
<parentid>64712873</parentid>
<timestamp>2021-03-12T13:08:16Z</timestamp>
<contributor>
<username>Tigerzeng</username>
<id>1586693</id>
</contributor>
<comment>
回退到由[[Special:Contributions/Tigerzeng|Tigerzeng]]（[[User talk:Tigerzeng|讨论]]）做出的修订版本64712854：[[Special:Permalink/64656729|编辑请求]]
</comment>
<model>Scribunto</model>
<format>text/plain</format>
<text bytes="219605" xml:space="preserve">
-- File-Date: 2021-02-16 local active = { ["aa"] = {"Afar"}, ["ab"] = {"Abkhazian"}, ["ae"] = {"Avestan"}, ["af"] = {"Afrikaans"}, ["ak"] = {"Akan"}, ["am"] = {"Amharic"}, ["an"] = {"Aragonese"}, ["ar"] = {"Arabic"}, ["as"] = {"Assamese"}, ["av"] = {"Avaric"}, ["ay"] = {"Aymara"}, ["az"] = {"Azerbaijani"}, ["ba"] = {"Bashkir"}, ["be"] = {"Belarusian"}, ["bg"] = {"Bulgarian"}, ["bh"] = {"Bihari languages"}, ["bi"] = {"Bislama"}, ["bm"] = {"Bambara"}, ["bn"] = {"Bengali", "Bangla"}, ["bo"] = {"Tibetan"}, ["br"] = {"Breton"}, ["bs"] = {"Bosnian"}, ["ca"] = {"Catalan", "Valencian"}, ["ce"] = {"Chechen"}, ["ch"] = {"Chamorro"}, ["co"] = {"Corsican"}, ["cr"] = {"Cree"}, ["cs"] = {"Czech"}, ["cu"] = {"Church Slavic", "Church Slavonic", "Old Bulgarian", "Old Church Slavonic", "Old Slavonic"}, ["cv"] = {"Chuvash"}, ["cy"] = {"Welsh"}, ["da"] = {"Danish"}, ["de"] = {"German"}, ["dv"] = {"Dhivehi", "Divehi", "Maldivian"}, ["dz"] = {"Dzongkha"}, ["ee"] = {"Ewe"}, ["el"] = {"Modern Greek (1453-)"}, ["en"] = {"English"}, ["eo"] = {"Esperanto"}, ["es"] = {"Spanish", "Castilian"}, ["et"] = {"Estonian"}, ["eu"] = {"Basque"}, ["fa"] = {"Persian"}, ["ff"] = {"Fulah"}, ["fi"] = {"Finnish"}, ["fj"] = {"Fijian"}, ["fo"] = {"Faroese"}, ["fr"] = {"French"}, ["fy"] = {"Western Frisian"}, ["ga"] = {"Irish"}, ["gd"] = {"Scottish Gaelic", "Gaelic"}, ["gl"] = {"Galician"}, ["gn"] = {"Guarani"}, ["gu"] = {"Gujarati"}, ["gv"] = {"Manx"}, ["ha"] = {"Hausa"}, ["he"] = {"Hebrew"}, ["hi"] = {"Hindi"}, ["ho"] = {"Hiri Motu"}, ["hr"] = {"Croatian"}, ["ht"] = {"Haitian", "Haitian Creole"}, ["hu"] = {"Hungarian"}, ["hy"] = {"Armenian"}, ["hz"] = {"Herero"}, ["ia"] = {"Interlingua (International Auxiliary Language Association)"}, ["id"] = {"Indonesian"}, ["ie"] = {"Interlingue", "Occidental"}, ["ig"] = {"Igbo"}, ["ii"] = {"Sichuan Yi", "Nuosu"}, ["ik"] = {"Inupiaq"}, ["io"] = {"Ido"}, ["is"] = {"Icelandic"}, ["it"] = {"Italian"}, ["iu"] = {"Inuktitut"}, ["ja"] = {"Japanese"}, ["jv"] = {"Javanese"}, ["ka"] = {"Georgian"}, ["kg"] = {"Kongo"}, ["ki"] = {"Kikuyu", "Gikuyu"}, ["kj"] = {"Kuanyama", "Kwanyama"}, ["kk"] = {"Kazakh"}, ["kl"] = {"Kalaallisut", "Greenlandic"}, ["km"] = {"Khmer", "Central Khmer"}, ["kn"] = {"Kannada"}, ["ko"] = {"Korean"}, ["kr"] = {"Kanuri"}, ["ks"] = {"Kashmiri"}, ["ku"] = {"Kurdish"}, ["kv"] = {"Komi"}, ["kw"] = {"Cornish"}, ["ky"] = {"Kirghiz", "Kyrgyz"}, ["la"] = {"Latin"}, ["lb"] = {"Luxembourgish", "Letzeburgesch"}, ["lg"] = {"Ganda", "Luganda"}, ["li"] = {"Limburgan", "Limburger", "Limburgish"}, ["ln"] = {"Lingala"}, ["lo"] = {"Lao"}, ["lt"] = {"Lithuanian"}, ["lu"] = {"Luba-Katanga"}, ["lv"] = {"Latvian"}, ["mg"] = {"Malagasy"}, ["mh"] = {"Marshallese"}, ["mi"] = {"Maori"}, ["mk"] = {"Macedonian"}, ["ml"] = {"Malayalam"}, ["mn"] = {"Mongolian"}, ["mr"] = {"Marathi"}, ["ms"] = {"Malay (macrolanguage)"}, ["mt"] = {"Maltese"}, ["my"] = {"Burmese"}, ["na"] = {"Nauru"}, ["nb"] = {"Norwegian Bokmål"}, ["nd"] = {"North Ndebele"}, ["ne"] = {"Nepali (macrolanguage)"}, ["ng"] = {"Ndonga"}, ["nl"] = {"Dutch", "Flemish"}, ["nn"] = {"Norwegian Nynorsk"}, ["no"] = {"Norwegian"}, ["nr"] = {"South Ndebele"}, ["nv"] = {"Navajo", "Navaho"}, ["ny"] = {"Nyanja", "Chewa", "Chichewa"}, ["oc"] = {"Occitan (post 1500)"}, ["oj"] = {"Ojibwa"}, ["om"] = {"Oromo"}, ["or"] = {"Oriya (macrolanguage)", "Odia (macrolanguage)"}, ["os"] = {"Ossetian", "Ossetic"}, ["pa"] = {"Panjabi", "Punjabi"}, ["pi"] = {"Pali"}, ["pl"] = {"Polish"}, ["ps"] = {"Pushto", "Pashto"}, ["pt"] = {"Portuguese"}, ["qu"] = {"Quechua"}, ["rm"] = {"Romansh"}, ["rn"] = {"Rundi"}, ["ro"] = {"Romanian", "Moldavian", "Moldovan"}, ["ru"] = {"Russian"}, ["rw"] = {"Kinyarwanda"}, ["sa"] = {"Sanskrit"}, ["sc"] = {"Sardinian"}, ["sd"] = {"Sindhi"}, ["se"] = {"Northern Sami"}, ["sg"] = {"Sango"}, ["sh"] = {"Serbo-Croatian"}, ["si"] = {"Sinhala", "Sinhalese"}, ["sk"] = {"Slovak"}, ["sl"] = {"Slovenian"}, ["sm"] = {"Samoan"}, ["sn"] = {"Shona"}, ["so"] = {"Somali"}, ["sq"] = {"Albanian"}, ["sr"] = {"Serbian"}, ["ss"] = {"Swati"}, ["st"] = {"Southern Sotho"}, ["su"] = {"Sundanese"}, ["sv"] = {"Swedish"}, ["sw"] = {"Swahili (macrolanguage)"}, ["ta"] = {"Tamil"}, ["te"] = {"Telugu"}, ["tg"] = {"Tajik"}, ["th"] = {"Thai"}, ["ti"] = {"Tigrinya"}, ["tk"] = {"Turkmen"}, ["tl"] = {"Tagalog"}, ["tn"] = {"Tswana"}, ["to"] = {"Tonga (Tonga Islands)"}, ["tr"] = {"Turkish"}, ["ts"] = {"Tsonga"}, ["tt"] = {"Tatar"}, ["tw"] = {"Twi"}, ["ty"] = {"Tahitian"}, ["ug"] = {"Uighur", "Uyghur"}, ["uk"] = {"Ukrainian"}, ["ur"] = {"Urdu"}, ["uz"] = {"Uzbek"}, ["ve"] = {"Venda"}, ["vi"] = {"Vietnamese"}, ["vo"] = {"Volapük"}, ["wa"] = {"Walloon"}, ["wo"] = {"Wolof"}, ["xh"] = {"Xhosa"}, ["yi"] = {"Yiddish"}, ["yo"] = {"Yoruba"}, ["za"] = {"Zhuang", "Chuang"}, ["zh"] = {"Chinese"}, ["zu"] = {"Zulu"}, ["aaa"] = {"Ghotuo"}, ["aab"] = {"Alumu-Tesu"}, ["aac"] = {"Ari"}, ["aad"] = {"Amal"}, ["aae"] = {"Arbëreshë Albanian"}, ["aaf"] = {"Aranadan"}, ["aag"] = {"Ambrak"}, ["aah"] = {"Abu' Arapesh"}, ["aai"] = {"Arifama-Miniafia"}, ["aak"] = {"Ankave"}, ["aal"] = {"Afade"}, ["aan"] = {"Anambé"}, ["aao"] = {"Algerian Saharan Arabic"}, ["aap"] = {"Pará Arára"}, ["aaq"] = {"Eastern Abnaki"}, ["aas"] = {"Aasáx"}, ["aat"] = {"Arvanitika Albanian"}, ["aau"] = {"Abau"}, ["aav"] = {"Austro-Asiatic languages"}, ["aaw"] = {"Solong"}, ["aax"] = {"Mandobo Atas"}, ["aaz"] = {"Amarasi"}, ["aba"] = {"Abé"}, ["abb"] = {"Bankon"}, ["abc"] = {"Ambala Ayta"}, ["abd"] = {"Manide"}, ["abe"] = {"Western Abnaki"}, ["abf"] = {"Abai Sungai"}, ["abg"] = {"Abaga"}, ["abh"] = {"Tajiki Arabic"}, ["abi"] = {"Abidji"}, ["abj"] = {"Aka-Bea"}, ["abl"] = {"Lampung Nyo"}, ["abm"] = {"Abanyom"}, ["abn"] = {"Abua"}, ["abo"] = {"Abon"}, ["abp"] = {"Abellen Ayta"}, ["abq"] = {"Abaza"}, ["abr"] = {"Abron"}, ["abs"] = {"Ambonese Malay"}, ["abt"] = {"Ambulas"}, ["abu"] = {"Abure"}, ["abv"] = {"Baharna Arabic"}, ["abw"] = {"Pal"}, ["abx"] = {"Inabaknon"}, ["aby"] = {"Aneme Wake"}, ["abz"] = {"Abui"}, ["aca"] = {"Achagua"}, ["acb"] = {"Áncá"}, ["acd"] = {"Gikyode"}, ["ace"] = {"Achinese"}, ["acf"] = {"Saint Lucian Creole French"}, ["ach"] = {"Acoli"}, ["aci"] = {"Aka-Cari"}, ["ack"] = {"Aka-Kora"}, ["acl"] = {"Akar-Bale"}, ["acm"] = {"Mesopotamian Arabic"}, ["acn"] = {"Achang"}, ["acp"] = {"Eastern Acipa"}, ["acq"] = {"Ta'izzi-Adeni Arabic"}, ["acr"] = {"Achi"}, ["acs"] = {"Acroá"}, ["act"] = {"Achterhoeks"}, ["acu"] = {"Achuar-Shiwiar"}, ["acv"] = {"Achumawi"}, ["acw"] = {"Hijazi Arabic"}, ["acx"] = {"Omani Arabic"}, ["acy"] = {"Cypriot Arabic"}, ["acz"] = {"Acheron"}, ["ada"] = {"Adangme"}, ["adb"] = {"Atauran"}, ["add"] = {"Lidzonka", "Dzodinka"}, ["ade"] = {"Adele"}, ["adf"] = {"Dhofari Arabic"}, ["adg"] = {"Andegerebinha"}, ["adh"] = {"Adhola"}, ["adi"] = {"Adi"}, ["adj"] = {"Adioukrou"}, ["adl"] = {"Galo"}, ["adn"] = {"Adang"}, ["ado"] = {"Abu"}, ["adq"] = {"Adangbe"}, ["adr"] = {"Adonara"}, ["ads"] = {"Adamorobe Sign Language"}, ["adt"] = {"Adnyamathanha"}, ["adu"] = {"Aduge"}, ["adw"] = {"Amundava"}, ["adx"] = {"Amdo Tibetan"}, ["ady"] = {"Adyghe", "Adygei"}, ["adz"] = {"Adzera"}, ["aea"] = {"Areba"}, ["aeb"] = {"Tunisian Arabic"}, ["aec"] = {"Saidi Arabic"}, ["aed"] = {"Argentine Sign Language"}, ["aee"] = {"Northeast Pashai", "Northeast Pashayi"}, ["aek"] = {"Haeke"}, ["ael"] = {"Ambele"}, ["aem"] = {"Arem"}, ["aen"] = {"Armenian Sign Language"}, ["aeq"] = {"Aer"}, ["aer"] = {"Eastern Arrernte"}, ["aes"] = {"Alsea"}, ["aeu"] = {"Akeu"}, ["aew"] = {"Ambakich"}, ["aey"] = {"Amele"}, ["aez"] = {"Aeka"}, ["afa"] = {"Afro-Asiatic languages"}, ["afb"] = {"Gulf Arabic"}, ["afd"] = {"Andai"}, ["afe"] = {"Putukwam"}, ["afg"] = {"Afghan Sign Language"}, ["afh"] = {"Afrihili"}, ["afi"] = {"Akrukay", "Chini"}, ["afk"] = {"Nanubae"}, ["afn"] = {"Defaka"}, ["afo"] = {"Eloyi"}, ["afp"] = {"Tapei"}, ["afs"] = {"Afro-Seminole Creole"}, ["aft"] = {"Afitti"}, ["afu"] = {"Awutu"}, ["afz"] = {"Obokuitai"}, ["aga"] = {"Aguano"}, ["agb"] = {"Legbo"}, ["agc"] = {"Agatu"}, ["agd"] = {"Agarabi"}, ["age"] = {"Angal"}, ["agf"] = {"Arguni"}, ["agg"] = {"Angor"}, ["agh"] = {"Ngelima"}, ["agi"] = {"Agariya"}, ["agj"] = {"Argobba"}, ["agk"] = {"Isarog Agta"}, ["agl"] = {"Fembe"}, ["agm"] = {"Angaataha"}, ["agn"] = {"Agutaynen"}, ["ago"] = {"Tainae"}, ["agq"] = {"Aghem"}, ["agr"] = {"Aguaruna"}, ["ags"] = {"Esimbi"}, ["agt"] = {"Central Cagayan Agta"}, ["agu"] = {"Aguacateco"}, ["agv"] = {"Remontado Dumagat"}, ["agw"] = {"Kahua"}, ["agx"] = {"Aghul"}, ["agy"] = {"Southern Alta"}, ["agz"] = {"Mt. Iriga Agta"}, ["aha"] = {"Ahanta"}, ["ahb"] = {"Axamb"}, ["ahg"] = {"Qimant"}, ["ahh"] = {"Aghu"}, ["ahi"] = {"Tiagbamrin Aizi"}, ["ahk"] = {"Akha"}, ["ahl"] = {"Igo"}, ["ahm"] = {"Mobumrin Aizi"}, ["ahn"] = {"Àhàn"}, ["aho"] = {"Ahom"}, ["ahp"] = {"Aproumu Aizi"}, ["ahr"] = {"Ahirani"}, ["ahs"] = {"Ashe"}, ["aht"] = {"Ahtena"}, ["aia"] = {"Arosi"}, ["aib"] = {"Ainu (China)"}, ["aic"] = {"Ainbai"}, ["aid"] = {"Alngith"}, ["aie"] = {"Amara"}, ["aif"] = {"Agi"}, ["aig"] = {"Antigua and Barbuda Creole English"}, ["aih"] = {"Ai-Cham"}, ["aii"] = {"Assyrian Neo-Aramaic"}, ["aij"] = {"Lishanid Noshan"}, ["aik"] = {"Ake"}, ["ail"] = {"Aimele"}, ["aim"] = {"Aimol"}, ["ain"] = {"Ainu (Japan)"}, ["aio"] = {"Aiton"}, ["aip"] = {"Burumakok"}, ["aiq"] = {"Aimaq"}, ["air"] = {"Airoran"}, ["ait"] = {"Arikem"}, ["aiw"] = {"Aari"}, ["aix"] = {"Aighon"}, ["aiy"] = {"Ali"}, ["aja"] = {"Aja (South Sudan)"}, ["ajg"] = {"Aja (Benin)"}, ["aji"] = {"Ajië"}, ["ajn"] = {"Andajin"}, ["ajp"] = {"South Levantine Arabic"}, ["ajt"] = {"Judeo-Tunisian Arabic"}, ["aju"] = {"Judeo-Moroccan Arabic"}, ["ajw"] = {"Ajawa"}, ["ajz"] = {"Amri Karbi"}, ["akb"] = {"Batak Angkola"}, ["akc"] = {"Mpur"}, ["akd"] = {"Ukpet-Ehom"}, ["ake"] = {"Akawaio"}, ["akf"] = {"Akpa"}, ["akg"] = {"Anakalangu"}, ["akh"] = {"Angal Heneng"}, ["aki"] = {"Aiome"}, ["akj"] = {"Aka-Jeru"}, ["akk"] = {"Akkadian"}, ["akl"] = {"Aklanon"}, ["akm"] = {"Aka-Bo"}, ["ako"] = {"Akurio"}, ["akp"] = {"Siwu"}, ["akq"] = {"Ak"}, ["akr"] = {"Araki"}, ["aks"] = {"Akaselem"}, ["akt"] = {"Akolet"}, ["aku"] = {"Akum"}, ["akv"] = {"Akhvakh"}, ["akw"] = {"Akwa"}, ["akx"] = {"Aka-Kede"}, ["aky"] = {"Aka-Kol"}, ["akz"] = {"Alabama"}, ["ala"] = {"Alago"}, ["alc"] = {"Qawasqar"}, ["ald"] = {"Alladian"}, ["ale"] = {"Aleut"}, ["alf"] = {"Alege"}, ["alg"] = {"Algonquian languages"}, ["alh"] = {"Alawa"}, ["ali"] = {"Amaimon"}, ["alj"] = {"Alangan"}, ["alk"] = {"Alak"}, ["all"] = {"Allar"}, ["alm"] = {"Amblong"}, ["aln"] = {"Gheg Albanian"}, ["alo"] = {"Larike-Wakasihu"}, ["alp"] = {"Alune"}, ["alq"] = {"Algonquin"}, ["alr"] = {"Alutor"}, ["als"] = {"Tosk Albanian"}, ["alt"] = {"Southern Altai"}, ["alu"] = {"'Are'are"}, ["alv"] = {"Atlantic-Congo languages"}, ["alw"] = {"Alaba-K’abeena", "Wanbasana"}, ["alx"] = {"Amol"}, ["aly"] = {"Alyawarr"}, ["alz"] = {"Alur"}, ["ama"] = {"Amanayé"}, ["amb"] = {"Ambo"}, ["amc"] = {"Amahuaca"}, ["ame"] = {"Yanesha'"}, ["amf"] = {"Hamer-Banna"}, ["amg"] = {"Amurdak"}, ["ami"] = {"Amis"}, ["amj"] = {"Amdang"}, ["amk"] = {"Ambai"}, ["aml"] = {"War-Jaintia"}, ["amm"] = {"Ama (Papua New Guinea)"}, ["amn"] = {"Amanab"}, ["amo"] = {"Amo"}, ["amp"] = {"Alamblak"}, ["amq"] = {"Amahai"}, ["amr"] = {"Amarakaeri"}, ["ams"] = {"Southern Amami-Oshima"}, ["amt"] = {"Amto"}, ["amu"] = {"Guerrero Amuzgo"}, ["amv"] = {"Ambelau"}, ["amw"] = {"Western Neo-Aramaic"}, ["amx"] = {"Anmatyerre"}, ["amy"] = {"Ami"}, ["amz"] = {"Atampaya"}, ["ana"] = {"Andaqui"}, ["anb"] = {"Andoa"}, ["anc"] = {"Ngas"}, ["and"] = {"Ansus"}, ["ane"] = {"Xârâcùù"}, ["anf"] = {"Animere"}, ["ang"] = {"Old English (ca. 450-1100)"}, ["anh"] = {"Nend"}, ["ani"] = {"Andi"}, ["anj"] = {"Anor"}, ["ank"] = {"Goemai"}, ["anl"] = {"Anu-Hkongso Chin"}, ["anm"] = {"Anal"}, ["ann"] = {"Obolo"}, ["ano"] = {"Andoque"}, ["anp"] = {"Angika"}, ["anq"] = {"Jarawa (India)"}, ["anr"] = {"Andh"}, ["ans"] = {"Anserma"}, ["ant"] = {"Antakarinya", "Antikarinya"}, ["anu"] = {"Anuak"}, ["anv"] = {"Denya"}, ["anw"] = {"Anaang"}, ["anx"] = {"Andra-Hus"}, ["any"] = {"Anyin"}, ["anz"] = {"Anem"}, ["aoa"] = {"Angolar"}, ["aob"] = {"Abom"}, ["aoc"] = {"Pemon"}, ["aod"] = {"Andarum"}, ["aoe"] = {"Angal Enen"}, ["aof"] = {"Bragat"}, ["aog"] = {"Angoram"}, ["aoi"] = {"Anindilyakwa"}, ["aoj"] = {"Mufian"}, ["aok"] = {"Arhö"}, ["aol"] = {"Alor"}, ["aom"] = {"Ömie"}, ["aon"] = {"Bumbita Arapesh"}, ["aor"] = {"Aore"}, ["aos"] = {"Taikat"}, ["aot"] = {"Atong (India)", "A'tong"}, ["aou"] = {"A'ou"}, ["aox"] = {"Atorada"}, ["aoz"] = {"Uab Meto"}, ["apa"] = {"Apache languages"}, ["apb"] = {"Sa'a"}, ["apc"] = {"North Levantine Arabic"}, ["apd"] = {"Sudanese Arabic"}, ["ape"] = {"Bukiyip"}, ["apf"] = {"Pahanan Agta"}, ["apg"] = {"Ampanang"}, ["aph"] = {"Athpariya"}, ["api"] = {"Apiaká"}, ["apj"] = {"Jicarilla Apache"}, ["apk"] = {"Kiowa Apache"}, ["apl"] = {"Lipan Apache"}, ["apm"] = {"Mescalero-Chiricahua Apache"}, ["apn"] = {"Apinayé"}, ["apo"] = {"Ambul"}, ["app"] = {"Apma"}, ["apq"] = {"A-Pucikwar"}, ["apr"] = {"Arop-Lokep"}, ["aps"] = {"Arop-Sissano"}, ["apt"] = {"Apatani"}, ["apu"] = {"Apurinã"}, ["apv"] = {"Alapmunte"}, ["apw"] = {"Western Apache"}, ["apx"] = {"Aputai"}, ["apy"] = {"Apalaí"}, ["apz"] = {"Safeyoka"}, ["aqa"] = {"Alacalufan languages"}, ["aqc"] = {"Archi"}, ["aqd"] = {"Ampari Dogon"}, ["aqg"] = {"Arigidi"}, ["aql"] = {"Algic languages"}, ["aqm"] = {"Atohwaim"}, ["aqn"] = {"Northern Alta"}, ["aqp"] = {"Atakapa"}, ["aqr"] = {"Arhâ"}, ["aqt"] = {"Angaité"}, ["aqz"] = {"Akuntsu"}, ["arb"] = {"Standard Arabic"}, ["arc"] = {"Official Aramaic (700-300 BCE)", "Imperial Aramaic (700-300 BCE)"}, ["ard"] = {"Arabana"}, ["are"] = {"Western Arrarnta"}, ["arh"] = {"Arhuaco"}, ["ari"] = {"Arikara"}, ["arj"] = {"Arapaso"}, ["ark"] = {"Arikapú"}, ["arl"] = {"Arabela"}, ["arn"] = {"Mapudungun", "Mapuche"}, ["aro"] = {"Araona"}, ["arp"] = {"Arapaho"}, ["arq"] = {"Algerian Arabic"}, ["arr"] = {"Karo (Brazil)"}, ["ars"] = {"Najdi Arabic"}, ["art"] = {"Artificial languages"}, ["aru"] = {"Aruá (Amazonas State)", "Arawá"}, ["arv"] = {"Arbore"}, ["arw"] = {"Arawak"}, ["arx"] = {"Aruá (Rodonia State)"}, ["ary"] = {"Moroccan Arabic"}, ["arz"] = {"Egyptian Arabic"}, ["asa"] = {"Asu (Tanzania)"}, ["asb"] = {"Assiniboine"}, ["asc"] = {"Casuarina Coast Asmat"}, ["ase"] = {"American Sign Language"}, ["asf"] = {"Auslan", "Australian Sign Language"}, ["asg"] = {"Cishingini"}, ["ash"] = {"Abishira"}, ["asi"] = {"Buruwai"}, ["asj"] = {"Sari"}, ["ask"] = {"Ashkun"}, ["asl"] = {"Asilulu"}, ["asn"] = {"Xingú Asuriní"}, ["aso"] = {"Dano"}, ["asp"] = {"Algerian Sign Language"}, ["asq"] = {"Austrian Sign Language"}, ["asr"] = {"Asuri"}, ["ass"] = {"Ipulo"}, ["ast"] = {"Asturian", "Asturleonese", "Bable", "Leonese"}, ["asu"] = {"Tocantins Asurini"}, ["asv"] = {"Asoa"}, ["asw"] = {"Australian Aborigines Sign Language"}, ["asx"] = {"Muratayak"}, ["asy"] = {"Yaosakor Asmat"}, ["asz"] = {"As"}, ["ata"] = {"Pele-Ata"}, ["atb"] = {"Zaiwa"}, ["atc"] = {"Atsahuaca"}, ["atd"] = {"Ata Manobo"}, ["ate"] = {"Atemble"}, ["atg"] = {"Ivbie North-Okpela-Arhe"}, ["ath"] = {"Athapascan languages"}, ["ati"] = {"Attié"}, ["atj"] = {"Atikamekw"}, ["atk"] = {"Ati"}, ["atl"] = {"Mt. Iraya Agta"}, ["atm"] = {"Ata"}, ["atn"] = {"Ashtiani"}, ["ato"] = {"Atong (Cameroon)"}, ["atp"] = {"Pudtol Atta"}, ["atq"] = {"Aralle-Tabulahan"}, ["atr"] = {"Waimiri-Atroari"}, ["ats"] = {"Gros Ventre"}, ["att"] = {"Pamplona Atta"}, ["atu"] = {"Reel"}, ["atv"] = {"Northern Altai"}, ["atw"] = {"Atsugewi"}, ["atx"] = {"Arutani"}, ["aty"] = {"Aneityum"}, ["atz"] = {"Arta"}, ["aua"] = {"Asumboa"}, ["aub"] = {"Alugu"}, ["auc"] = {"Waorani"}, ["aud"] = {"Anuta"}, ["auf"] = {"Arauan languages"}, ["aug"] = {"Aguna"}, ["auh"] = {"Aushi"}, ["aui"] = {"Anuki"}, ["auj"] = {"Awjilah"}, ["auk"] = {"Heyo"}, ["aul"] = {"Aulua"}, ["aum"] = {"Asu (Nigeria)"}, ["aun"] = {"Molmo One"}, ["auo"] = {"Auyokawa"}, ["aup"] = {"Makayam"}, ["auq"] = {"Anus", "Korur"}, ["aur"] = {"Aruek"}, ["aus"] = {"Australian languages"}, ["aut"] = {"Austral"}, ["auu"] = {"Auye"}, ["auw"] = {"Awyi"}, ["aux"] = {"Aurá"}, ["auy"] = {"Awiyaana"}, ["auz"] = {"Uzbeki Arabic"}, ["avb"] = {"Avau"}, ["avd"] = {"Alviri-Vidari"}, ["avi"] = {"Avikam"}, ["avk"] = {"Kotava"}, ["avl"] = {"Eastern Egyptian Bedawi Arabic"}, ["avm"] = {"Angkamuthi"}, ["avn"] = {"Avatime"}, ["avo"] = {"Agavotaguerra"}, ["avs"] = {"Aushiri"}, ["avt"] = {"Au"}, ["avu"] = {"Avokaya"}, ["avv"] = {"Avá-Canoeiro"}, ["awa"] = {"Awadhi"}, ["awb"] = {"Awa (Papua New Guinea)"}, ["awc"] = {"Cicipu"}, ["awd"] = {"Arawakan languages"}, ["awe"] = {"Awetí"}, ["awg"] = {"Anguthimri"}, ["awh"] = {"Awbono"}, ["awi"] = {"Aekyom"}, ["awk"] = {"Awabakal"}, ["awm"] = {"Arawum"}, ["awn"] = {"Awngi"}, ["awo"] = {"Awak"}, ["awr"] = {"Awera"}, ["aws"] = {"South Awyu"}, ["awt"] = {"Araweté"}, ["awu"] = {"Central Awyu"}, ["awv"] = {"Jair Awyu"}, ["aww"] = {"Awun"}, ["awx"] = {"Awara"}, ["awy"] = {"Edera Awyu"}, ["axb"] = {"Abipon"}, ["axe"] = {"Ayerrerenge"}, ["axg"] = {"Mato Grosso Arára"}, ["axk"] = {"Yaka (Central African Republic)"}, ["axl"] = {"Lower Southern Aranda"}, ["axm"] = {"Middle Armenian"}, ["axx"] = {"Xârâgurè"}, ["aya"] = {"Awar"}, ["ayb"] = {"Ayizo Gbe"}, ["ayc"] = {"Southern Aymara"}, ["ayd"] = {"Ayabadhu"}, ["aye"] = {"Ayere"}, ["ayg"] = {"Ginyanga"}, ["ayh"] = {"Hadrami Arabic"}, ["ayi"] = {"Leyigha"}, ["ayk"] = {"Akuku"}, ["ayl"] = {"Libyan Arabic"}, ["ayn"] = {"Sanaani Arabic"}, ["ayo"] = {"Ayoreo"}, ["ayp"] = {"North Mesopotamian Arabic"}, ["ayq"] = {"Ayi (Papua New Guinea)"}, ["ayr"] = {"Central Aymara"}, ["ays"] = {"Sorsogon Ayta"}, ["ayt"] = {"Magbukun Ayta"}, ["ayu"] = {"Ayu"}, ["ayz"] = {"Mai Brat"}, ["aza"] = {"Azha"}, ["azb"] = {"South Azerbaijani"}, ["azc"] = {"Uto-Aztecan languages"}, ["azd"] = {"Eastern Durango Nahuatl"}, ["azg"] = {"San Pedro Amuzgos Amuzgo"}, ["azj"] = {"North Azerbaijani"}, ["azm"] = {"Ipalapa Amuzgo"}, ["azn"] = {"Western Durango Nahuatl"}, ["azo"] = {"Awing"}, ["azt"] = {"Faire Atta"}, ["azz"] = {"Highland Puebla Nahuatl"}, ["baa"] = {"Babatana"}, ["bab"] = {"Bainouk-Gunyuño"}, ["bac"] = {"Badui"}, ["bad"] = {"Banda languages"}, ["bae"] = {"Baré"}, ["baf"] = {"Nubaca"}, ["bag"] = {"Tuki"}, ["bah"] = {"Bahamas Creole English"}, ["bai"] = {"Bamileke languages"}, ["baj"] = {"Barakai"}, ["bal"] = {"Baluchi"}, ["ban"] = {"Balinese"}, ["bao"] = {"Waimaha"}, ["bap"] = {"Bantawa"}, ["bar"] = {"Bavarian"}, ["bas"] = {"Basa (Cameroon)"}, ["bat"] = {"Baltic languages"}, ["bau"] = {"Bada (Nigeria)"}, ["bav"] = {"Vengo"}, ["baw"] = {"Bambili-Bambui"}, ["bax"] = {"Bamun"}, ["bay"] = {"Batuley"}, ["bba"] = {"Baatonum"}, ["bbb"] = {"Barai"}, ["bbc"] = {"Batak Toba"}, ["bbd"] = {"Bau"}, ["bbe"] = {"Bangba"}, ["bbf"] = {"Baibai"}, ["bbg"] = {"Barama"}, ["bbh"] = {"Bugan"}, ["bbi"] = {"Barombi"}, ["bbj"] = {"Ghomálá'"}, ["bbk"] = {"Babanki"}, ["bbl"] = {"Bats"}, ["bbm"] = {"Babango"}, ["bbn"] = {"Uneapa"}, ["bbo"] = {"Northern Bobo Madaré", "Konabéré"}, ["bbp"] = {"West Central Banda"}, ["bbq"] = {"Bamali"}, ["bbr"] = {"Girawa"}, ["bbs"] = {"Bakpinka"}, ["bbt"] = {"Mburku"}, ["bbu"] = {"Kulung (Nigeria)"}, ["bbv"] = {"Karnai"}, ["bbw"] = {"Baba"}, ["bbx"] = {"Bubia"}, ["bby"] = {"Befang"}, ["bca"] = {"Central Bai"}, ["bcb"] = {"Bainouk-Samik"}, ["bcc"] = {"Southern Balochi"}, ["bcd"] = {"North Babar"}, ["bce"] = {"Bamenyam"}, ["bcf"] = {"Bamu"}, ["bcg"] = {"Baga Pokur"}, ["bch"] = {"Bariai"}, ["bci"] = {"Baoulé"}, ["bcj"] = {"Bardi"}, ["bck"] = {"Bunuba"}, ["bcl"] = {"Central Bikol"}, ["bcm"] = {"Bannoni"}, ["bcn"] = {"Bali (Nigeria)"}, ["bco"] = {"Kaluli"}, ["bcp"] = {"Bali (Democratic Republic of Congo)"}, ["bcq"] = {"Bench"}, ["bcr"] = {"Babine"}, ["bcs"] = {"Kohumono"}, ["bct"] = {"Bendi"}, ["bcu"] = {"Awad Bing"}, ["bcv"] = {"Shoo-Minda-Nye"}, ["bcw"] = {"Bana"}, ["bcy"] = {"Bacama"}, ["bcz"] = {"Bainouk-Gunyaamolo"}, ["bda"] = {"Bayot"}, ["bdb"] = {"Basap"}, ["bdc"] = {"Emberá-Baudó"}, ["bdd"] = {"Bunama"}, ["bde"] = {"Bade"}, ["bdf"] = {"Biage"}, ["bdg"] = {"Bonggi"}, ["bdh"] = {"Baka (South Sudan)"}, ["bdi"] = {"Burun"}, ["bdj"] = {"Bai (South Sudan)", "Bai"}, ["bdk"] = {"Budukh"}, ["bdl"] = {"Indonesian Bajau"}, ["bdm"] = {"Buduma"}, ["bdn"] = {"Baldemu"}, ["bdo"] = {"Morom"}, ["bdp"] = {"Bende"}, ["bdq"] = {"Bahnar"}, ["bdr"] = {"West Coast Bajau"}, ["bds"] = {"Burunge"}, ["bdt"] = {"Bokoto"}, ["bdu"] = {"Oroko"}, ["bdv"] = {"Bodo Parja"}, ["bdw"] = {"Baham"}, ["bdx"] = {"Budong-Budong"}, ["bdy"] = {"Bandjalang"}, ["bdz"] = {"Badeshi"}, ["bea"] = {"Beaver"}, ["beb"] = {"Bebele"}, ["bec"] = {"Iceve-Maci"}, ["bed"] = {"Bedoanas"}, ["bee"] = {"Byangsi"}, ["bef"] = {"Benabena"}, ["beg"] = {"Belait"}, ["beh"] = {"Biali"}, ["bei"] = {"Bekati'"}, ["bej"] = {"Beja", "Bedawiyet"}, ["bek"] = {"Bebeli"}, ["bem"] = {"Bemba (Zambia)"}, ["beo"] = {"Beami"}, ["bep"] = {"Besoa"}, ["beq"] = {"Beembe"}, ["ber"] = {"Berber languages"}, ["bes"] = {"Besme"}, ["bet"] = {"Guiberoua Béte"}, ["beu"] = {"Blagar"}, ["bev"] = {"Daloa Bété"}, ["bew"] = {"Betawi"}, ["bex"] = {"Jur Modo"}, ["bey"] = {"Beli (Papua New Guinea)"}, ["bez"] = {"Bena (Tanzania)"}, ["bfa"] = {"Bari"}, ["bfb"] = {"Pauri Bareli"}, ["bfc"] = {"Panyi Bai", "Northern Bai"}, ["bfd"] = {"Bafut"}, ["bfe"] = {"Betaf", "Tena"}, ["bff"] = {"Bofi"}, ["bfg"] = {"Busang Kayan"}, ["bfh"] = {"Blafe"}, ["bfi"] = {"British Sign Language"}, ["bfj"] = {"Bafanji"}, ["bfk"] = {"Ban Khor Sign Language"}, ["bfl"] = {"Banda-Ndélé"}, ["bfm"] = {"Mmen"}, ["bfn"] = {"Bunak"}, ["bfo"] = {"Malba Birifor"}, ["bfp"] = {"Beba"}, ["bfq"] = {"Badaga"}, ["bfr"] = {"Bazigar"}, ["bfs"] = {"Southern Bai"}, ["bft"] = {"Balti"}, ["bfu"] = {"Gahri"}, ["bfw"] = {"Bondo"}, ["bfx"] = {"Bantayanon"}, ["bfy"] = {"Bagheli"}, ["bfz"] = {"Mahasu Pahari"}, ["bga"] = {"Gwamhi-Wuri"}, ["bgb"] = {"Bobongko"}, ["bgc"] = {"Haryanvi"}, ["bgd"] = {"Rathwi Bareli"}, ["bge"] = {"Bauria"}, ["bgf"] = {"Bangandu"}, ["bgg"] = {"Bugun"}, ["bgi"] = {"Giangan"}, ["bgj"] = {"Bangolan"}, ["bgk"] = {"Bit", "Buxinhua"}, ["bgl"] = {"Bo (Laos)"}, ["bgn"] = {"Western Balochi"}, ["bgo"] = {"Baga Koga"}, ["bgp"] = {"Eastern Balochi"}, ["bgq"] = {"Bagri"}, ["bgr"] = {"Bawm Chin"}, ["bgs"] = {"Tagabawa"}, ["bgt"] = {"Bughotu"}, ["bgu"] = {"Mbongno"}, ["bgv"] = {"Warkay-Bipim"}, ["bgw"] = {"Bhatri"}, ["bgx"] = {"Balkan Gagauz Turkish"}, ["bgy"] = {"Benggoi"}, ["bgz"] = {"Banggai"}, ["bha"] = {"Bharia"}, ["bhb"] = {"Bhili"}, ["bhc"] = {"Biga"}, ["bhd"] = {"Bhadrawahi"}, ["bhe"] = {"Bhaya"}, ["bhf"] = {"Odiai"}, ["bhg"] = {"Binandere"}, ["bhh"] = {"Bukharic"}, ["bhi"] = {"Bhilali"}, ["bhj"] = {"Bahing"}, ["bhl"] = {"Bimin"}, ["bhm"] = {"Bathari"}, ["bhn"] = {"Bohtan Neo-Aramaic"}, ["bho"] = {"Bhojpuri"}, ["bhp"] = {"Bima"}, ["bhq"] = {"Tukang Besi South"}, ["bhr"] = {"Bara Malagasy"}, ["bhs"] = {"Buwal"}, ["bht"] = {"Bhattiyali"}, ["bhu"] = {"Bhunjia"}, ["bhv"] = {"Bahau"}, ["bhw"] = {"Biak"}, ["bhx"] = {"Bhalay"}, ["bhy"] = {"Bhele"}, ["bhz"] = {"Bada (Indonesia)"}, ["bia"] = {"Badimaya"}, ["bib"] = {"Bissa", "Bisa"}, ["bic"] = {"Bikaru"}, ["bid"] = {"Bidiyo"}, ["bie"] = {"Bepour"}, ["bif"] = {"Biafada"}, ["big"] = {"Biangai"}, ["bij"] = {"Vaghat-Ya-Bijim-Legeri"}, ["bik"] = {"Bikol"}, ["bil"] = {"Bile"}, ["bim"] = {"Bimoba"}, ["bin"] = {"Bini", "Edo"}, ["bio"] = {"Nai"}, ["bip"] = {"Bila"}, ["biq"] = {"Bipi"}, ["bir"] = {"Bisorio"}, ["bit"] = {"Berinomo"}, ["biu"] = {"Biete"}, ["biv"] = {"Southern Birifor"}, ["biw"] = {"Kol (Cameroon)"}, ["bix"] = {"Bijori"}, ["biy"] = {"Birhor"}, ["biz"] = {"Baloi"}, ["bja"] = {"Budza"}, ["bjb"] = {"Banggarla"}, ["bjc"] = {"Bariji"}, ["bje"] = {"Biao-Jiao Mien"}, ["bjf"] = {"Barzani Jewish Neo-Aramaic"}, ["bjg"] = {"Bidyogo"}, ["bjh"] = {"Bahinemo"}, ["bji"] = {"Burji"}, ["bjj"] = {"Kanauji"}, ["bjk"] = {"Barok"}, ["bjl"] = {"Bulu (Papua New Guinea)"}, ["bjm"] = {"Bajelani"}, ["bjn"] = {"Banjar"}, ["bjo"] = {"Mid-Southern Banda"}, ["bjp"] = {"Fanamaket"}, ["bjr"] = {"Binumarien"}, ["bjs"] = {"Bajan"}, ["bjt"] = {"Balanta-Ganja"}, ["bju"] = {"Busuu"}, ["bjv"] = {"Bedjond"}, ["bjw"] = {"Bakwé"}, ["bjx"] = {"Banao Itneg"}, ["bjy"] = {"Bayali"}, ["bjz"] = {"Baruga"}, ["bka"] = {"Kyak"}, ["bkc"] = {"Baka (Cameroon)"}, ["bkd"] = {"Binukid", "Talaandig"}, ["bkf"] = {"Beeke"}, ["bkg"] = {"Buraka"}, ["bkh"] = {"Bakoko"}, ["bki"] = {"Baki"}, ["bkj"] = {"Pande"}, ["bkk"] = {"Brokskat"}, ["bkl"] = {"Berik"}, ["bkm"] = {"Kom (Cameroon)"}, ["bkn"] = {"Bukitan"}, ["bko"] = {"Kwa'"}, ["bkp"] = {"Boko (Democratic Republic of Congo)"}, ["bkq"] = {"Bakairí"}, ["bkr"] = {"Bakumpai"}, ["bks"] = {"Northern Sorsoganon"}, ["bkt"] = {"Boloki"}, ["bku"] = {"Buhid"}, ["bkv"] = {"Bekwarra"}, ["bkw"] = {"Bekwel"}, ["bkx"] = {"Baikeno"}, ["bky"] = {"Bokyi"}, ["bkz"] = {"Bungku"}, ["bla"] = {"Siksika"}, ["blb"] = {"Bilua"}, ["blc"] = {"Bella Coola"}, ["bld"] = {"Bolango"}, ["ble"] = {"Balanta-Kentohe"}, ["blf"] = {"Buol"}, ["blg"] = {"Balau"}, ["blh"] = {"Kuwaa"}, ["bli"] = {"Bolia"}, ["blj"] = {"Bolongan"}, ["blk"] = {"Pa'o Karen", "Pa'O"}, ["bll"] = {"Biloxi"}, ["blm"] = {"Beli (South Sudan)"}, ["bln"] = {"Southern Catanduanes Bikol"}, ["blo"] = {"Anii"}, ["blp"] = {"Blablanga"}, ["blq"] = {"Baluan-Pam"}, ["blr"] = {"Blang"}, ["bls"] = {"Balaesang"}, ["blt"] = {"Tai Dam"}, ["blv"] = {"Kibala", "Bolo"}, ["blw"] = {"Balangao"}, ["blx"] = {"Mag-Indi Ayta"}, ["bly"] = {"Notre"}, ["blz"] = {"Balantak"}, ["bma"] = {"Lame"}, ["bmb"] = {"Bembe"}, ["bmc"] = {"Biem"}, ["bmd"] = {"Baga Manduri"}, ["bme"] = {"Limassa"}, ["bmf"] = {"Bom-Kim"}, ["bmg"] = {"Bamwe"}, ["bmh"] = {"Kein"}, ["bmi"] = {"Bagirmi"}, ["bmj"] = {"Bote-Majhi"}, ["bmk"] = {"Ghayavi"}, ["bml"] = {"Bomboli"}, ["bmm"] = {"Northern Betsimisaraka Malagasy"}, ["bmn"] = {"Bina (Papua New Guinea)"}, ["bmo"] = {"Bambalang"}, ["bmp"] = {"Bulgebi"}, ["bmq"] = {"Bomu"}, ["bmr"] = {"Muinane"}, ["bms"] = {"Bilma Kanuri"}, ["bmt"] = {"Biao Mon"}, ["bmu"] = {"Somba-Siawari"}, ["bmv"] = {"Bum"}, ["bmw"] = {"Bomwali"}, ["bmx"] = {"Baimak"}, ["bmz"] = {"Baramu"}, ["bna"] = {"Bonerate"}, ["bnb"] = {"Bookan"}, ["bnc"] = {"Bontok"}, ["bnd"] = {"Banda (Indonesia)"}, ["bne"] = {"Bintauna"}, ["bnf"] = {"Masiwang"}, ["bng"] = {"Benga"}, ["bni"] = {"Bangi"}, ["bnj"] = {"Eastern Tawbuid"}, ["bnk"] = {"Bierebo"}, ["bnl"] = {"Boon"}, ["bnm"] = {"Batanga"}, ["bnn"] = {"Bunun"}, ["bno"] = {"Bantoanon"}, ["bnp"] = {"Bola"}, ["bnq"] = {"Bantik"}, ["bnr"] = {"Butmas-Tur"}, ["bns"] = {"Bundeli"}, ["bnt"] = {"Bantu languages"}, ["bnu"] = {"Bentong"}, ["bnv"] = {"Bonerif", "Beneraf", "Edwas"}, ["bnw"] = {"Bisis"}, ["bnx"] = {"Bangubangu"}, ["bny"] = {"Bintulu"}, ["bnz"] = {"Beezen"}, ["boa"] = {"Bora"}, ["bob"] = {"Aweer"}, ["boe"] = {"Mundabli"}, ["bof"] = {"Bolon"}, ["bog"] = {"Bamako Sign Language"}, ["boh"] = {"Boma"}, ["boi"] = {"Barbareño"}, ["boj"] = {"Anjam"}, ["bok"] = {"Bonjo"}, ["bol"] = {"Bole"}, ["bom"] = {"Berom"}, ["bon"] = {"Bine"}, ["boo"] = {"Tiemacèwè Bozo"}, ["bop"] = {"Bonkiman"}, ["boq"] = {"Bogaya"}, ["bor"] = {"Borôro"}, ["bot"] = {"Bongo"}, ["bou"] = {"Bondei"}, ["bov"] = {"Tuwuli"}, ["bow"] = {"Rema"}, ["box"] = {"Buamu"}, ["boy"] = {"Bodo (Central African Republic)"}, ["boz"] = {"Tiéyaxo Bozo"}, ["bpa"] = {"Daakaka"}, ["bpd"] = {"Banda-Banda"}, ["bpg"] = {"Bonggo"}, ["bph"] = {"Botlikh"}, ["bpi"] = {"Bagupi"}, ["bpj"] = {"Binji"}, ["bpk"] = {"Orowe", "'Ôrôê"}, ["bpl"] = {"Broome Pearling Lugger Pidgin"}, ["bpm"] = {"Biyom"}, ["bpn"] = {"Dzao Min"}, ["bpo"] = {"Anasi"}, ["bpp"] = {"Kaure"}, ["bpq"] = {"Banda Malay"}, ["bpr"] = {"Koronadal Blaan"}, ["bps"] = {"Sarangani Blaan"}, ["bpt"] = {"Barrow Point"}, ["bpu"] = {"Bongu"}, ["bpv"] = {"Bian Marind"}, ["bpw"] = {"Bo (Papua New Guinea)"}, ["bpx"] = {"Palya Bareli"}, ["bpy"] = {"Bishnupriya"}, ["bpz"] = {"Bilba"}, ["bqa"] = {"Tchumbuli"}, ["bqb"] = {"Bagusa"}, ["bqc"] = {"Boko (Benin)", "Boo"}, ["bqd"] = {"Bung"}, ["bqf"] = {"Baga Kaloum"}, ["bqg"] = {"Bago-Kusuntu"}, ["bqh"] = {"Baima"}, ["bqi"] = {"Bakhtiari"}, ["bqj"] = {"Bandial"}, ["bqk"] = {"Banda-Mbrès"}, ["bql"] = {"Bilakura"}, ["bqm"] = {"Wumboko"}, ["bqn"] = {"Bulgarian Sign Language"}, ["bqo"] = {"Balo"}, ["bqp"] = {"Busa"}, ["bqq"] = {"Biritai"}, ["bqr"] = {"Burusu"}, ["bqs"] = {"Bosngun"}, ["bqt"] = {"Bamukumbit"}, ["bqu"] = {"Boguru"}, ["bqv"] = {"Koro Wachi", "Begbere-Ejar"}, ["bqw"] = {"Buru (Nigeria)"}, ["bqx"] = {"Baangi"}, ["bqy"] = {"Bengkala Sign Language"}, ["bqz"] = {"Bakaka"}, ["bra"] = {"Braj"}, ["brb"] = {"Lave"}, ["brc"] = {"Berbice Creole Dutch"}, ["brd"] = {"Baraamu"}, ["brf"] = {"Bira"}, ["brg"] = {"Baure"}, ["brh"] = {"Brahui"}, ["bri"] = {"Mokpwe"}, ["brj"] = {"Bieria"}, ["brk"] = {"Birked"}, ["brl"] = {"Birwa"}, ["brm"] = {"Barambu"}, ["brn"] = {"Boruca"}, ["bro"] = {"Brokkat"}, ["brp"] = {"Barapasi"}, ["brq"] = {"Breri"}, ["brr"] = {"Birao"}, ["brs"] = {"Baras"}, ["brt"] = {"Bitare"}, ["bru"] = {"Eastern Bru"}, ["brv"] = {"Western Bru"}, ["brw"] = {"Bellari"}, ["brx"] = {"Bodo (India)"}, ["bry"] = {"Burui"}, ["brz"] = {"Bilbil"}, ["bsa"] = {"Abinomn"}, ["bsb"] = {"Brunei Bisaya"}, ["bsc"] = {"Bassari", "Oniyan"}, ["bse"] = {"Wushi"}, ["bsf"] = {"Bauchi"}, ["bsg"] = {"Bashkardi"}, ["bsh"] = {"Kati"}, ["bsi"] = {"Bassossi"}, ["bsj"] = {"Bangwinji"}, ["bsk"] = {"Burushaski"}, ["bsl"] = {"Basa-Gumna"}, ["bsm"] = {"Busami"}, ["bsn"] = {"Barasana-Eduria"}, ["bso"] = {"Buso"}, ["bsp"] = {"Baga Sitemu"}, ["bsq"] = {"Bassa"}, ["bsr"] = {"Bassa-Kontagora"}, ["bss"] = {"Akoose"}, ["bst"] = {"Basketo"}, ["bsu"] = {"Bahonsuai"}, ["bsv"] = {"Baga Sobané"}, ["bsw"] = {"Baiso"}, ["bsx"] = {"Yangkam"}, ["bsy"] = {"Sabah Bisaya"}, ["bta"] = {"Bata"}, ["btc"] = {"Bati (Cameroon)"}, ["btd"] = {"Batak Dairi"}, ["bte"] = {"Gamo-Ningi"}, ["btf"] = {"Birgit"}, ["btg"] = {"Gagnoa Bété"}, ["bth"] = {"Biatah Bidayuh"}, ["bti"] = {"Burate"}, ["btj"] = {"Bacanese Malay"}, ["btk"] = {"Batak languages"}, ["btm"] = {"Batak Mandailing"}, ["btn"] = {"Ratagnon"}, ["bto"] = {"Rinconada Bikol"}, ["btp"] = {"Budibud"}, ["btq"] = {"Batek"}, ["btr"] = {"Baetora"}, ["bts"] = {"Batak Simalungun"}, ["btt"] = {"Bete-Bendi"}, ["btu"] = {"Batu"}, ["btv"] = {"Bateri"}, ["btw"] = {"Butuanon"}, ["btx"] = {"Batak Karo"}, ["bty"] = {"Bobot"}, ["btz"] = {"Batak Alas-Kluet"}, ["bua"] = {"Buriat"}, ["bub"] = {"Bua"}, ["buc"] = {"Bushi"}, ["bud"] = {"Ntcham"}, ["bue"] = {"Beothuk"}, ["buf"] = {"Bushoong"}, ["bug"] = {"Buginese"}, ["buh"] = {"Younuo Bunu"}, ["bui"] = {"Bongili"}, ["buj"] = {"Basa-Gurmana"}, ["buk"] = {"Bugawac"}, ["bum"] = {"Bulu (Cameroon)"}, ["bun"] = {"Sherbro"}, ["buo"] = {"Terei"}, ["bup"] = {"Busoa"}, ["buq"] = {"Brem"}, ["bus"] = {"Bokobaru"}, ["but"] = {"Bungain"}, ["buu"] = {"Budu"}, ["buv"] = {"Bun"}, ["buw"] = {"Bubi"}, ["bux"] = {"Boghom"}, ["buy"] = {"Bullom So"}, ["buz"] = {"Bukwen"}, ["bva"] = {"Barein"}, ["bvb"] = {"Bube"}, ["bvc"] = {"Baelelea"}, ["bvd"] = {"Baeggu"}, ["bve"] = {"Berau Malay"}, ["bvf"] = {"Boor"}, ["bvg"] = {"Bonkeng"}, ["bvh"] = {"Bure"}, ["bvi"] = {"Belanda Viri"}, ["bvj"] = {"Baan"}, ["bvk"] = {"Bukat"}, ["bvl"] = {"Bolivian Sign Language"}, ["bvm"] = {"Bamunka"}, ["bvn"] = {"Buna"}, ["bvo"] = {"Bolgo"}, ["bvp"] = {"Bumang"}, ["bvq"] = {"Birri"}, ["bvr"] = {"Burarra"}, ["bvt"] = {"Bati (Indonesia)"}, ["bvu"] = {"Bukit Malay"}, ["bvv"] = {"Baniva"}, ["bvw"] = {"Boga"}, ["bvx"] = {"Dibole"}, ["bvy"] = {"Baybayanon"}, ["bvz"] = {"Bauzi"}, ["bwa"] = {"Bwatoo"}, ["bwb"] = {"Namosi-Naitasiri-Serua"}, ["bwc"] = {"Bwile"}, ["bwd"] = {"Bwaidoka"}, ["bwe"] = {"Bwe Karen"}, ["bwf"] = {"Boselewa"}, ["bwg"] = {"Barwe"}, ["bwh"] = {"Bishuo"}, ["bwi"] = {"Baniwa"}, ["bwj"] = {"Láá Láá Bwamu"}, ["bwk"] = {"Bauwaki"}, ["bwl"] = {"Bwela"}, ["bwm"] = {"Biwat"}, ["bwn"] = {"Wunai Bunu"}, ["bwo"] = {"Boro (Ethiopia)", "Borna (Ethiopia)"}, ["bwp"] = {"Mandobo Bawah"}, ["bwq"] = {"Southern Bobo Madaré"}, ["bwr"] = {"Bura-Pabir"}, ["bws"] = {"Bomboma"}, ["bwt"] = {"Bafaw-Balong"}, ["bwu"] = {"Buli (Ghana)"}, ["bww"] = {"Bwa"}, ["bwx"] = {"Bu-Nao Bunu"}, ["bwy"] = {"Cwi Bwamu"}, ["bwz"] = {"Bwisi"}, ["bxa"] = {"Tairaha"}, ["bxb"] = {"Belanda Bor"}, ["bxc"] = {"Molengue"}, ["bxd"] = {"Pela"}, ["bxe"] = {"Birale"}, ["bxf"] = {"Bilur", "Minigir"}, ["bxg"] = {"Bangala"}, ["bxh"] = {"Buhutu"}, ["bxi"] = {"Pirlatapa"}, ["bxj"] = {"Bayungu"}, ["bxk"] = {"Bukusu", "Lubukusu"}, ["bxl"] = {"Jalkunan"}, ["bxm"] = {"Mongolia Buriat"}, ["bxn"] = {"Burduna"}, ["bxo"] = {"Barikanchi"}, ["bxp"] = {"Bebil"}, ["bxq"] = {"Beele"}, ["bxr"] = {"Russia Buriat"}, ["bxs"] = {"Busam"}, ["bxu"] = {"China Buriat"}, ["bxv"] = {"Berakou"}, ["bxw"] = {"Bankagooma"}, ["bxz"] = {"Binahari"}, ["bya"] = {"Batak"}, ["byb"] = {"Bikya"}, ["byc"] = {"Ubaghara"}, ["byd"] = {"Benyadu'"}, ["bye"] = {"Pouye"}, ["byf"] = {"Bete"}, ["byg"] = {"Baygo"}, ["byh"] = {"Bhujel"}, ["byi"] = {"Buyu"}, ["byj"] = {"Bina (Nigeria)"}, ["byk"] = {"Biao"}, ["byl"] = {"Bayono"}, ["bym"] = {"Bidjara"}, ["byn"] = {"Bilin", "Blin"}, ["byo"] = {"Biyo"}, ["byp"] = {"Bumaji"}, ["byq"] = {"Basay"}, ["byr"] = {"Baruya", "Yipma"}, ["bys"] = {"Burak"}, ["byt"] = {"Berti"}, ["byv"] = {"Medumba"}, ["byw"] = {"Belhariya"}, ["byx"] = {"Qaqet"}, ["byz"] = {"Banaro"}, ["bza"] = {"Bandi"}, ["bzb"] = {"Andio"}, ["bzc"] = {"Southern Betsimisaraka Malagasy"}, ["bzd"] = {"Bribri"}, ["bze"] = {"Jenaama Bozo"}, ["bzf"] = {"Boikin"}, ["bzg"] = {"Babuza"}, ["bzh"] = {"Mapos Buang"}, ["bzi"] = {"Bisu"}, ["bzj"] = {"Belize Kriol English"}, ["bzk"] = {"Nicaragua Creole English"}, ["bzl"] = {"Boano (Sulawesi)"}, ["bzm"] = {"Bolondo"}, ["bzn"] = {"Boano (Maluku)"}, ["bzo"] = {"Bozaba"}, ["bzp"] = {"Kemberano"}, ["bzq"] = {"Buli (Indonesia)"}, ["bzr"] = {"Biri"}, ["bzs"] = {"Brazilian Sign Language"}, ["bzt"] = {"Brithenig"}, ["bzu"] = {"Burmeso"}, ["bzv"] = {"Naami"}, ["bzw"] = {"Basa (Nigeria)"}, ["bzx"] = {"Kɛlɛngaxo Bozo"}, ["bzy"] = {"Obanliku"}, ["bzz"] = {"Evant"}, ["caa"] = {"Chortí"}, ["cab"] = {"Garifuna"}, ["cac"] = {"Chuj"}, ["cad"] = {"Caddo"}, ["cae"] = {"Lehar", "Laalaa"}, ["caf"] = {"Southern Carrier"}, ["cag"] = {"Nivaclé"}, ["cah"] = {"Cahuarano"}, ["cai"] = {"Central American Indian languages"}, ["caj"] = {"Chané"}, ["cak"] = {"Kaqchikel", "Cakchiquel"}, ["cal"] = {"Carolinian"}, ["cam"] = {"Cemuhî"}, ["can"] = {"Chambri"}, ["cao"] = {"Chácobo"}, ["cap"] = {"Chipaya"}, ["caq"] = {"Car Nicobarese"}, ["car"] = {"Galibi Carib"}, ["cas"] = {"Tsimané"}, ["cau"] = {"Caucasian languages"}, ["cav"] = {"Cavineña"}, ["caw"] = {"Callawalla"}, ["cax"] = {"Chiquitano"}, ["cay"] = {"Cayuga"}, ["caz"] = {"Canichana"}, ["cba"] = {"Chibchan languages"}, ["cbb"] = {"Cabiyarí"}, ["cbc"] = {"Carapana"}, ["cbd"] = {"Carijona"}, ["cbg"] = {"Chimila"}, ["cbi"] = {"Chachi"}, ["cbj"] = {"Ede Cabe"}, ["cbk"] = {"Chavacano"}, ["cbl"] = {"Bualkhaw Chin"}, ["cbn"] = {"Nyahkur"}, ["cbo"] = {"Izora"}, ["cbq"] = {"Tsucuba", "Cuba"}, ["cbr"] = {"Cashibo-Cacataibo"}, ["cbs"] = {"Cashinahua"}, ["cbt"] = {"Chayahuita"}, ["cbu"] = {"Candoshi-Shapra"}, ["cbv"] = {"Cacua"}, ["cbw"] = {"Kinabalian"}, ["cby"] = {"Carabayo"}, ["ccc"] = {"Chamicuro"}, ["ccd"] = {"Cafundo Creole"}, ["cce"] = {"Chopi"}, ["ccg"] = {"Samba Daka"}, ["cch"] = {"Atsam"}, ["ccj"] = {"Kasanga"}, ["ccl"] = {"Cutchi-Swahili"}, ["ccm"] = {"Malaccan Creole Malay"}, ["ccn"] = {"North Caucasian languages"}, ["cco"] = {"Comaltepec Chinantec"}, ["ccp"] = {"Chakma"}, ["ccr"] = {"Cacaopera"}, ["ccs"] = {"South Caucasian languages"}, ["cda"] = {"Choni"}, ["cdc"] = {"Chadic languages"}, ["cdd"] = {"Caddoan languages"}, ["cde"] = {"Chenchu"}, ["cdf"] = {"Chiru"}, ["cdh"] = {"Chambeali"}, ["cdi"] = {"Chodri"}, ["cdj"] = {"Churahi"}, ["cdm"] = {"Chepang"}, ["cdn"] = {"Chaudangsi"}, ["cdo"] = {"Min Dong Chinese"}, ["cdr"] = {"Cinda-Regi-Tiyal"}, ["cds"] = {"Chadian Sign Language"}, ["cdy"] = {"Chadong"}, ["cdz"] = {"Koda"}, ["cea"] = {"Lower Chehalis"}, ["ceb"] = {"Cebuano"}, ["ceg"] = {"Chamacoco"}, ["cek"] = {"Eastern Khumi Chin"}, ["cel"] = {"Celtic languages"}, ["cen"] = {"Cen"}, ["cet"] = {"Centúúm"}, ["cey"] = {"Ekai Chin"}, ["cfa"] = {"Dijim-Bwilim"}, ["cfd"] = {"Cara"}, ["cfg"] = {"Como Karim"}, ["cfm"] = {"Falam Chin"}, ["cga"] = {"Changriwa"}, ["cgc"] = {"Kagayanen"}, ["cgg"] = {"Chiga"}, ["cgk"] = {"Chocangacakha"}, ["chb"] = {"Chibcha"}, ["chc"] = {"Catawba"}, ["chd"] = {"Highland Oaxaca Chontal"}, ["chf"] = {"Tabasco Chontal"}, ["chg"] = {"Chagatai"}, ["chh"] = {"Chinook"}, ["chj"] = {"Ojitlán Chinantec"}, ["chk"] = {"Chuukese"}, ["chl"] = {"Cahuilla"}, ["chm"] = {"Mari (Russia)"}, ["chn"] = {"Chinook jargon"}, ["cho"] = {"Choctaw"}, ["chp"] = {"Chipewyan", "Dene Suline"}, ["chq"] = {"Quiotepec Chinantec"}, ["chr"] = {"Cherokee"}, ["cht"] = {"Cholón"}, ["chw"] = {"Chuwabu"}, ["chx"] = {"Chantyal"}, ["chy"] = {"Cheyenne"}, ["chz"] = {"Ozumacín Chinantec"}, ["cia"] = {"Cia-Cia"}, ["cib"] = {"Ci Gbe"}, ["cic"] = {"Chickasaw"}, ["cid"] = {"Chimariko"}, ["cie"] = {"Cineni"}, ["cih"] = {"Chinali"}, ["cik"] = {"Chitkuli Kinnauri"}, ["cim"] = {"Cimbrian"}, ["cin"] = {"Cinta Larga"}, ["cip"] = {"Chiapanec"}, ["cir"] = {"Tiri", "Haméa", "Méa"}, ["ciw"] = {"Chippewa"}, ["ciy"] = {"Chaima"}, ["cja"] = {"Western Cham"}, ["cje"] = {"Chru"}, ["cjh"] = {"Upper Chehalis"}, ["cji"] = {"Chamalal"}, ["cjk"] = {"Chokwe"}, ["cjm"] = {"Eastern Cham"}, ["cjn"] = {"Chenapian"}, ["cjo"] = {"Ashéninka Pajonal"}, ["cjp"] = {"Cabécar"}, ["cjs"] = {"Shor"}, ["cjv"] = {"Chuave"}, ["cjy"] = {"Jinyu Chinese"}, ["ckb"] = {"Central Kurdish"}, ["ckh"] = {"Chak"}, ["ckl"] = {"Cibak"}, ["ckm"] = {"Chakavian"}, ["ckn"] = {"Kaang Chin"}, ["cko"] = {"Anufo"}, ["ckq"] = {"Kajakse"}, ["ckr"] = {"Kairak"}, ["cks"] = {"Tayo"}, ["ckt"] = {"Chukot"}, ["cku"] = {"Koasati"}, ["ckv"] = {"Kavalan"}, ["ckx"] = {"Caka"}, ["cky"] = {"Cakfem-Mushere"}, ["ckz"] = {"Cakchiquel-Quiché Mixed Language"}, ["cla"] = {"Ron"}, ["clc"] = {"Chilcotin"}, ["cld"] = {"Chaldean Neo-Aramaic"}, ["cle"] = {"Lealao Chinantec"}, ["clh"] = {"Chilisso"}, ["cli"] = {"Chakali"}, ["clj"] = {"Laitu Chin"}, ["clk"] = {"Idu-Mishmi"}, ["cll"] = {"Chala"}, ["clm"] = {"Clallam"}, ["clo"] = {"Lowland Oaxaca Chontal"}, ["clt"] = {"Lautu Chin"}, ["clu"] = {"Caluyanun"}, ["clw"] = {"Chulym"}, ["cly"] = {"Eastern Highland Chatino"}, ["cma"] = {"Maa"}, ["cmc"] = {"Chamic languages"}, ["cme"] = {"Cerma"}, ["cmg"] = {"Classical Mongolian"}, ["cmi"] = {"Emberá-Chamí"}, ["cml"] = {"Campalagian"}, ["cmm"] = {"Michigamea"}, ["cmn"] = {"Mandarin Chinese"}, ["cmo"] = {"Central Mnong"}, ["cmr"] = {"Mro-Khimi Chin"}, ["cms"] = {"Messapic"}, ["cmt"] = {"Camtho"}, ["cna"] = {"Changthang"}, ["cnb"] = {"Chinbon Chin"}, ["cnc"] = {"Côông"}, ["cng"] = {"Northern Qiang"}, ["cnh"] = {"Hakha Chin", "Haka Chin"}, ["cni"] = {"Asháninka"}, ["cnk"] = {"Khumi Chin"}, ["cnl"] = {"Lalana Chinantec"}, ["cno"] = {"Con"}, ["cnp"] = {"Northern Ping Chinese", "Northern Pinghua"}, ["cnr"] = {"Montenegrin"}, ["cns"] = {"Central Asmat"}, ["cnt"] = {"Tepetotutla Chinantec"}, ["cnu"] = {"Chenoua"}, ["cnw"] = {"Ngawn Chin"}, ["cnx"] = {"Middle Cornish"}, ["coa"] = {"Cocos Islands Malay"}, ["cob"] = {"Chicomuceltec"}, ["coc"] = {"Cocopa"}, ["cod"] = {"Cocama-Cocamilla"}, ["coe"] = {"Koreguaje"}, ["cof"] = {"Colorado"}, ["cog"] = {"Chong"}, ["coh"] = {"Chonyi-Dzihana-Kauma", "Chichonyi-Chidzihana-Chikauma"}, ["coj"] = {"Cochimi"}, ["cok"] = {"Santa Teresa Cora"}, ["col"] = {"Columbia-Wenatchi"}, ["com"] = {"Comanche"}, ["con"] = {"Cofán"}, ["coo"] = {"Comox"}, ["cop"] = {"Coptic"}, ["coq"] = {"Coquille"}, ["cot"] = {"Caquinte"}, ["cou"] = {"Wamey"}, ["cov"] = {"Cao Miao"}, ["cow"] = {"Cowlitz"}, ["cox"] = {"Nanti"}, ["coz"] = {"Chochotec"}, ["cpa"] = {"Palantla Chinantec"}, ["cpb"] = {"Ucayali-Yurúa Ashéninka"}, ["cpc"] = {"Ajyíninka Apurucayali"}, ["cpe"] = {"English-based creoles and pidgins"}, ["cpf"] = {"French-based creoles and pidgins"}, ["cpg"] = {"Cappadocian Greek"}, ["cpi"] = {"Chinese Pidgin English"}, ["cpn"] = {"Cherepon"}, ["cpo"] = {"Kpeego"}, ["cpp"] = {"Portuguese-based creoles and pidgins"}, ["cps"] = {"Capiznon"}, ["cpu"] = {"Pichis Ashéninka"}, ["cpx"] = {"Pu-Xian Chinese"}, ["cpy"] = {"South Ucayali Ashéninka"}, ["cqd"] = {"Chuanqiandian Cluster Miao"}, ["cra"] = {"Chara"}, ["crb"] = {"Island Carib"}, ["crc"] = {"Lonwolwol"}, ["crd"] = {"Coeur d'Alene"}, ["crf"] = {"Caramanta"}, ["crg"] = {"Michif"}, ["crh"] = {"Crimean Tatar", "Crimean Turkish"}, ["cri"] = {"Sãotomense"}, ["crj"] = {"Southern East Cree"}, ["crk"] = {"Plains Cree"}, ["crl"] = {"Northern East Cree"}, ["crm"] = {"Moose Cree"}, ["crn"] = {"El Nayar Cora"}, ["cro"] = {"Crow"}, ["crp"] = {"Creoles and pidgins"}, ["crq"] = {"Iyo'wujwa Chorote"}, ["crr"] = {"Carolina Algonquian"}, ["crs"] = {"Seselwa Creole French"}, ["crt"] = {"Iyojwa'ja Chorote"}, ["crv"] = {"Chaura"}, ["crw"] = {"Chrau"}, ["crx"] = {"Carrier"}, ["cry"] = {"Cori"}, ["crz"] = {"Cruzeño"}, ["csa"] = {"Chiltepec Chinantec"}, ["csb"] = {"Kashubian"}, ["csc"] = {"Catalan Sign Language", "Lengua de señas catalana", "Llengua de Signes Catalana"}, ["csd"] = {"Chiangmai Sign Language"}, ["cse"] = {"Czech Sign Language"}, ["csf"] = {"Cuba Sign Language"}, ["csg"] = {"Chilean Sign Language"}, ["csh"] = {"Asho Chin"}, ["csi"] = {"Coast Miwok"}, ["csj"] = {"Songlai Chin"}, ["csk"] = {"Jola-Kasa"}, ["csl"] = {"Chinese Sign Language"}, ["csm"] = {"Central Sierra Miwok"}, ["csn"] = {"Colombian Sign Language"}, ["cso"] = {"Sochiapam Chinantec", "Sochiapan Chinantec"}, ["csp"] = {"Southern Ping Chinese", "Southern Pinghua"}, ["csq"] = {"Croatia Sign Language"}, ["csr"] = {"Costa Rican Sign Language"}, ["css"] = {"Southern Ohlone"}, ["cst"] = {"Northern Ohlone"}, ["csu"] = {"Central Sudanic languages"}, ["csv"] = {"Sumtu Chin"}, ["csw"] = {"Swampy Cree"}, ["csy"] = {"Siyin Chin"}, ["csz"] = {"Coos"}, ["cta"] = {"Tataltepec Chatino"}, ["ctc"] = {"Chetco"}, ["ctd"] = {"Tedim Chin"}, ["cte"] = {"Tepinapa Chinantec"}, ["ctg"] = {"Chittagonian"}, ["cth"] = {"Thaiphum Chin"}, ["ctl"] = {"Tlacoatzintepec Chinantec"}, ["ctm"] = {"Chitimacha"}, ["ctn"] = {"Chhintange"}, ["cto"] = {"Emberá-Catío"}, ["ctp"] = {"Western Highland Chatino"}, ["cts"] = {"Northern Catanduanes Bikol"}, ["ctt"] = {"Wayanad Chetti"}, ["ctu"] = {"Chol"}, ["ctz"] = {"Zacatepec Chatino"}, ["cua"] = {"Cua"}, ["cub"] = {"Cubeo"}, ["cuc"] = {"Usila Chinantec"}, ["cug"] = {"Chungmboko", "Cung"}, ["cuh"] = {"Chuka", "Gichuka"}, ["cui"] = {"Cuiba"}, ["cuj"] = {"Mashco Piro"}, ["cuk"] = {"San Blas Kuna"}, ["cul"] = {"Culina", "Kulina"}, ["cuo"] = {"Cumanagoto"}, ["cup"] = {"Cupeño"}, ["cuq"] = {"Cun"}, ["cur"] = {"Chhulung"}, ["cus"] = {"Cushitic languages"}, ["cut"] = {"Teutila Cuicatec"}, ["cuu"] = {"Tai Ya"}, ["cuv"] = {"Cuvok"}, ["cuw"] = {"Chukwa"}, ["cux"] = {"Tepeuxila Cuicatec"}, ["cuy"] = {"Cuitlatec"}, ["cvg"] = {"Chug"}, ["cvn"] = {"Valle Nacional Chinantec"}, ["cwa"] = {"Kabwa"}, ["cwb"] = {"Maindo"}, ["cwd"] = {"Woods Cree"}, ["cwe"] = {"Kwere"}, ["cwg"] = {"Chewong", "Cheq Wong"}, ["cwt"] = {"Kuwaataay"}, ["cya"] = {"Nopala Chatino"}, ["cyb"] = {"Cayubaba"}, ["cyo"] = {"Cuyonon"}, ["czh"] = {"Huizhou Chinese"}, ["czk"] = {"Knaanic"}, ["czn"] = {"Zenzontepec Chatino"}, ["czo"] = {"Min Zhong Chinese"}, ["czt"] = {"Zotung Chin"}, ["daa"] = {"Dangaléat"}, ["dac"] = {"Dambi"}, ["dad"] = {"Marik"}, ["dae"] = {"Duupa"}, ["dag"] = {"Dagbani"}, ["dah"] = {"Gwahatike"}, ["dai"] = {"Day"}, ["daj"] = {"Dar Fur Daju"}, ["dak"] = {"Dakota"}, ["dal"] = {"Dahalo"}, ["dam"] = {"Damakawa"}, ["dao"] = {"Daai Chin"}, ["daq"] = {"Dandami Maria"}, ["dar"] = {"Dargwa"}, ["das"] = {"Daho-Doo"}, ["dau"] = {"Dar Sila Daju"}, ["dav"] = {"Taita", "Dawida"}, ["daw"] = {"Davawenyo"}, ["dax"] = {"Dayi"}, ["day"] = {"Land Dayak languages"}, ["daz"] = {"Dao"}, ["dba"] = {"Bangime"}, ["dbb"] = {"Deno"}, ["dbd"] = {"Dadiya"}, ["dbe"] = {"Dabe"}, ["dbf"] = {"Edopi"}, ["dbg"] = {"Dogul Dom Dogon"}, ["dbi"] = {"Doka"}, ["dbj"] = {"Ida'an"}, ["dbl"] = {"Dyirbal"}, ["dbm"] = {"Duguri"}, ["dbn"] = {"Duriankere"}, ["dbo"] = {"Dulbu"}, ["dbp"] = {"Duwai"}, ["dbq"] = {"Daba"}, ["dbr"] = {"Dabarre"}, ["dbt"] = {"Ben Tey Dogon"}, ["dbu"] = {"Bondum Dom Dogon"}, ["dbv"] = {"Dungu"}, ["dbw"] = {"Bankan Tey Dogon"}, ["dby"] = {"Dibiyaso"}, ["dcc"] = {"Deccan"}, ["dcr"] = {"Negerhollands"}, ["dda"] = {"Dadi Dadi"}, ["ddd"] = {"Dongotono"}, ["dde"] = {"Doondo"}, ["ddg"] = {"Fataluku"}, ["ddi"] = {"West Goodenough"}, ["ddj"] = {"Jaru"}, ["ddn"] = {"Dendi (Benin)"}, ["ddo"] = {"Dido"}, ["ddr"] = {"Dhudhuroa"}, ["dds"] = {"Donno So Dogon"}, ["ddw"] = {"Dawera-Daweloor"}, ["dec"] = {"Dagik"}, ["ded"] = {"Dedua"}, ["dee"] = {"Dewoin"}, ["def"] = {"Dezfuli"}, ["deg"] = {"Degema"}, ["deh"] = {"Dehwari"}, ["dei"] = {"Demisa"}, ["dek"] = {"Dek"}, ["del"] = {"Delaware"}, ["dem"] = {"Dem"}, ["den"] = {"Slave (Athapascan)"}, ["dep"] = {"Pidgin Delaware"}, ["deq"] = {"Dendi (Central African Republic)"}, ["der"] = {"Deori"}, ["des"] = {"Desano"}, ["dev"] = {"Domung"}, ["dez"] = {"Dengese"}, ["dga"] = {"Southern Dagaare"}, ["dgb"] = {"Bunoge Dogon"}, ["dgc"] = {"Casiguran Dumagat Agta"}, ["dgd"] = {"Dagaari Dioula"}, ["dge"] = {"Degenan"}, ["dgg"] = {"Doga"}, ["dgh"] = {"Dghwede"}, ["dgi"] = {"Northern Dagara"}, ["dgk"] = {"Dagba"}, ["dgl"] = {"Andaandi", "Dongolawi"}, ["dgn"] = {"Dagoman"}, ["dgo"] = {"Dogri (individual language)"}, ["dgr"] = {"Dogrib", "Tłı̨chǫ"}, ["dgs"] = {"Dogoso"}, ["dgt"] = {"Ndra'ngith"}, ["dgw"] = {"Daungwurrung"}, ["dgx"] = {"Doghoro"}, ["dgz"] = {"Daga"}, ["dhd"] = {"Dhundari"}, ["dhg"] = {"Dhangu-Djangu", "Dhangu", "Djangu"}, ["dhi"] = {"Dhimal"}, ["dhl"] = {"Dhalandji"}, ["dhm"] = {"Zemba"}, ["dhn"] = {"Dhanki"}, ["dho"] = {"Dhodia"}, ["dhr"] = {"Dhargari"}, ["dhs"] = {"Dhaiso"}, ["dhu"] = {"Dhurga"}, ["dhv"] = {"Dehu", "Drehu"}, ["dhw"] = {"Dhanwar (Nepal)"}, ["dhx"] = {"Dhungaloo"}, ["dia"] = {"Dia"}, ["dib"] = {"South Central Dinka"}, ["dic"] = {"Lakota Dida"}, ["did"] = {"Didinga"}, ["dif"] = {"Dieri", "Diyari"}, ["dig"] = {"Digo", "Chidigo"}, ["dih"] = {"Kumiai"}, ["dii"] = {"Dimbong"}, ["dij"] = {"Dai"}, ["dik"] = {"Southwestern Dinka"}, ["dil"] = {"Dilling"}, ["dim"] = {"Dime"}, ["din"] = {"Dinka"}, ["dio"] = {"Dibo"}, ["dip"] = {"Northeastern Dinka"}, ["diq"] = {"Dimli (individual language)"}, ["dir"] = {"Dirim"}, ["dis"] = {"Dimasa"}, ["diu"] = {"Diriku"}, ["diw"] = {"Northwestern Dinka"}, ["dix"] = {"Dixon Reef"}, ["diy"] = {"Diuwe"}, ["diz"] = {"Ding"}, ["dja"] = {"Djadjawurrung"}, ["djb"] = {"Djinba"}, ["djc"] = {"Dar Daju Daju"}, ["djd"] = {"Djamindjung", "Ngaliwurru"}, ["dje"] = {"Zarma"}, ["djf"] = {"Djangun"}, ["dji"] = {"Djinang"}, ["djj"] = {"Djeebbana"}, ["djk"] = {"Eastern Maroon Creole", "Businenge Tongo", "Nenge"}, ["djm"] = {"Jamsay Dogon"}, ["djn"] = {"Jawoyn", "Djauan"}, ["djo"] = {"Jangkang"}, ["djr"] = {"Djambarrpuyngu"}, ["dju"] = {"Kapriman"}, ["djw"] = {"Djawi"}, ["dka"] = {"Dakpakha"}, ["dkk"] = {"Dakka"}, ["dkr"] = {"Kuijau"}, ["dks"] = {"Southeastern Dinka"}, ["dkx"] = {"Mazagway"}, ["dlg"] = {"Dolgan"}, ["dlk"] = {"Dahalik"}, ["dlm"] = {"Dalmatian"}, ["dln"] = {"Darlong"}, ["dma"] = {"Duma"}, ["dmb"] = {"Mombo Dogon"}, ["dmc"] = {"Gavak"}, ["dmd"] = {"Madhi Madhi"}, ["dme"] = {"Dugwor"}, ["dmf"] = {"Medefaidrin"}, ["dmg"] = {"Upper Kinabatangan"}, ["dmk"] = {"Domaaki"}, ["dml"] = {"Dameli"}, ["dmm"] = {"Dama"}, ["dmn"] = {"Mande languages"}, ["dmo"] = {"Kemedzung"}, ["dmr"] = {"East Damar"}, ["dms"] = {"Dampelas"}, ["dmu"] = {"Dubu", "Tebi"}, ["dmv"] = {"Dumpas"}, ["dmw"] = {"Mudburra"}, ["dmx"] = {"Dema"}, ["dmy"] = {"Demta", "Sowari"}, ["dna"] = {"Upper Grand Valley Dani"}, ["dnd"] = {"Daonda"}, ["dne"] = {"Ndendeule"}, ["dng"] = {"Dungan"}, ["dni"] = {"Lower Grand Valley Dani"}, ["dnj"] = {"Dan"}, ["dnk"] = {"Dengka"}, ["dnn"] = {"Dzùùngoo"}, ["dno"] = {"Ndrulo", "Northern Lendu"}, ["dnr"] = {"Danaru"}, ["dnt"] = {"Mid Grand Valley Dani"}, ["dnu"] = {"Danau"}, ["dnv"] = {"Danu"}, ["dnw"] = {"Western Dani"}, ["dny"] = {"Dení"}, ["doa"] = {"Dom"}, ["dob"] = {"Dobu"}, ["doc"] = {"Northern Dong"}, ["doe"] = {"Doe"}, ["dof"] = {"Domu"}, ["doh"] = {"Dong"}, ["doi"] = {"Dogri (macrolanguage)"}, ["dok"] = {"Dondo"}, ["dol"] = {"Doso"}, ["don"] = {"Toura (Papua New Guinea)"}, ["doo"] = {"Dongo"}, ["dop"] = {"Lukpa"}, ["doq"] = {"Dominican Sign Language"}, ["dor"] = {"Dori'o"}, ["dos"] = {"Dogosé"}, ["dot"] = {"Dass"}, ["dov"] = {"Dombe"}, ["dow"] = {"Doyayo"}, ["dox"] = {"Bussa"}, ["doy"] = {"Dompo"}, ["doz"] = {"Dorze"}, ["dpp"] = {"Papar"}, ["dra"] = {"Dravidian languages"}, ["drb"] = {"Dair"}, ["drc"] = {"Minderico"}, ["drd"] = {"Darmiya"}, ["dre"] = {"Dolpo"}, ["drg"] = {"Rungus"}, ["dri"] = {"C'Lela"}, ["drl"] = {"Paakantyi"}, ["drn"] = {"West Damar"}, ["dro"] = {"Daro-Matu Melanau"}, ["drq"] = {"Dura"}, ["drs"] = {"Gedeo"}, ["drt"] = {"Drents"}, ["dru"] = {"Rukai"}, ["dry"] = {"Darai"}, ["dsb"] = {"Lower Sorbian"}, ["dse"] = {"Dutch Sign Language"}, ["dsh"] = {"Daasanach"}, ["dsi"] = {"Disa"}, ["dsl"] = {"Danish Sign Language"}, ["dsn"] = {"Dusner"}, ["dso"] = {"Desiya"}, ["dsq"] = {"Tadaksahak"}, ["dta"] = {"Daur"}, ["dtb"] = {"Labuk-Kinabatangan Kadazan"}, ["dtd"] = {"Ditidaht"}, ["dth"] = {"Adithinngithigh"}, ["dti"] = {"Ana Tinga Dogon"}, ["dtk"] = {"Tene Kan Dogon"}, ["dtm"] = {"Tomo Kan Dogon"}, ["dtn"] = {"Daatsʼíin"}, ["dto"] = {"Tommo So Dogon"}, ["dtp"] = {"Kadazan Dusun", "Central Dusun"}, ["dtr"] = {"Lotud"}, ["dts"] = {"Toro So Dogon"}, ["dtt"] = {"Toro Tegu Dogon"}, ["dtu"] = {"Tebul Ure Dogon"}, ["dty"] = {"Dotyali"}, ["dua"] = {"Duala"}, ["dub"] = {"Dubli"}, ["duc"] = {"Duna"}, ["due"] = {"Umiray Dumaget Agta"}, ["duf"] = {"Dumbea", "Drubea"}, ["dug"] = {"Duruma", "Chiduruma"}, ["duh"] = {"Dungra Bhil"}, ["dui"] = {"Dumun"}, ["duk"] = {"Uyajitaya"}, ["dul"] = {"Alabat Island Agta"}, ["dum"] = {"Middle Dutch (ca. 1050-1350)"}, ["dun"] = {"Dusun Deyah"}, ["duo"] = {"Dupaninan Agta"}, ["dup"] = {"Duano"}, ["duq"] = {"Dusun Malang"}, ["dur"] = {"Dii"}, ["dus"] = {"Dumi"}, ["duu"] = {"Drung"}, ["duv"] = {"Duvle"}, ["duw"] = {"Dusun Witu"}, ["dux"] = {"Duungooma"}, ["duy"] = {"Dicamay Agta"}, ["duz"] = {"Duli-Gey"}, ["dva"] = {"Duau"}, ["dwa"] = {"Diri"}, ["dwk"] = {"Dawik Kui"}, ["dwr"] = {"Dawro"}, ["dws"] = {"Dutton World Speedwords"}, ["dwu"] = {"Dhuwal"}, ["dww"] = {"Dawawa"}, ["dwy"] = {"Dhuwaya"}, ["dwz"] = {"Dewas Rai"}, ["dya"] = {"Dyan"}, ["dyb"] = {"Dyaberdyaber"}, ["dyd"] = {"Dyugun"}, ["dyg"] = {"Villa Viciosa Agta"}, ["dyi"] = {"Djimini Senoufo"}, ["dym"] = {"Yanda Dom Dogon"}, ["dyn"] = {"Dyangadi", "Dhanggatti"}, ["dyo"] = {"Jola-Fonyi"}, ["dyu"] = {"Dyula"}, ["dyy"] = {"Djabugay", "Dyaabugay"}, ["dza"] = {"Tunzu"}, ["dze"] = {"Djiwarli"}, ["dzg"] = {"Dazaga"}, ["dzl"] = {"Dzalakha"}, ["dzn"] = {"Dzando"}, ["eaa"] = {"Karenggapa"}, ["ebc"] = {"Beginci"}, ["ebg"] = {"Ebughu"}, ["ebk"] = {"Eastern Bontok"}, ["ebo"] = {"Teke-Ebo"}, ["ebr"] = {"Ebrié"}, ["ebu"] = {"Embu", "Kiembu"}, ["ecr"] = {"Eteocretan"}, ["ecs"] = {"Ecuadorian Sign Language"}, ["ecy"] = {"Eteocypriot"}, ["eee"] = {"E"}, ["efa"] = {"Efai"}, ["efe"] = {"Efe"}, ["efi"] = {"Efik"}, ["ega"] = {"Ega"}, ["egl"] = {"Emilian"}, ["ego"] = {"Eggon"}, ["egx"] = {"Egyptian languages"}, ["egy"] = {"Egyptian (Ancient)"}, ["ehu"] = {"Ehueun"}, ["eip"] = {"Eipomek"}, ["eit"] = {"Eitiep"}, ["eiv"] = {"Askopan"}, ["eja"] = {"Ejamat"}, ["eka"] = {"Ekajuk"}, ["eke"] = {"Ekit"}, ["ekg"] = {"Ekari"}, ["eki"] = {"Eki"}, ["ekk"] = {"Standard Estonian"}, ["ekl"] = {"Kol (Bangladesh)", "Kol"}, ["ekm"] = {"Elip"}, ["eko"] = {"Koti"}, ["ekp"] = {"Ekpeye"}, ["ekr"] = {"Yace"}, ["eky"] = {"Eastern Kayah"}, ["ele"] = {"Elepi"}, ["elh"] = {"El Hugeirat"}, ["eli"] = {"Nding"}, ["elk"] = {"Elkei"}, ["elm"] = {"Eleme"}, ["elo"] = {"El Molo"}, ["elu"] = {"Elu"}, ["elx"] = {"Elamite"}, ["ema"] = {"Emai-Iuleha-Ora"}, ["emb"] = {"Embaloh"}, ["eme"] = {"Emerillon"}, ["emg"] = {"Eastern Meohang"}, ["emi"] = {"Mussau-Emira"}, ["emk"] = {"Eastern Maninkakan"}, ["emm"] = {"Mamulique"}, ["emn"] = {"Eman"}, ["emp"] = {"Northern Emberá"}, ["ems"] = {"Pacific Gulf Yupik"}, ["emu"] = {"Eastern Muria"}, ["emw"] = {"Emplawas"}, ["emx"] = {"Erromintxela"}, ["emy"] = {"Epigraphic Mayan"}, ["ena"] = {"Apali"}, ["enb"] = {"Markweeta"}, ["enc"] = {"En"}, ["end"] = {"Ende"}, ["enf"] = {"Forest Enets"}, ["enh"] = {"Tundra Enets"}, ["enl"] = {"Enlhet"}, ["enm"] = {"Middle English (1100-1500)"}, ["enn"] = {"Engenni"}, ["eno"] = {"Enggano"}, ["enq"] = {"Enga"}, ["enr"] = {"Emumu", "Emem"}, ["enu"] = {"Enu"}, ["env"] = {"Enwan (Edu State)"}, ["enw"] = {"Enwan (Akwa Ibom State)"}, ["enx"] = {"Enxet"}, ["eot"] = {"Beti (Côte d'Ivoire)"}, ["epi"] = {"Epie"}, ["era"] = {"Eravallan"}, ["erg"] = {"Sie"}, ["erh"] = {"Eruwa"}, ["eri"] = {"Ogea"}, ["erk"] = {"South Efate"}, ["ero"] = {"Horpa"}, ["err"] = {"Erre"}, ["ers"] = {"Ersu"}, ["ert"] = {"Eritai"}, ["erw"] = {"Erokwanas"}, ["ese"] = {"Ese Ejja"}, ["esg"] = {"Aheri Gondi"}, ["esh"] = {"Eshtehardi"}, ["esi"] = {"North Alaskan Inupiatun"}, ["esk"] = {"Northwest Alaska Inupiatun"}, ["esl"] = {"Egypt Sign Language"}, ["esm"] = {"Esuma"}, ["esn"] = {"Salvadoran Sign Language"}, ["eso"] = {"Estonian Sign Language"}, ["esq"] = {"Esselen"}, ["ess"] = {"Central Siberian Yupik"}, ["esu"] = {"Central Yupik"}, ["esx"] = {"Eskimo-Aleut languages"}, ["esy"] = {"Eskayan"}, ["etb"] = {"Etebi"}, ["etc"] = {"Etchemin"}, ["eth"] = {"Ethiopian Sign Language"}, ["etn"] = {"Eton (Vanuatu)"}, ["eto"] = {"Eton (Cameroon)"}, ["etr"] = {"Edolo"}, ["ets"] = {"Yekhee"}, ["ett"] = {"Etruscan"}, ["etu"] = {"Ejagham"}, ["etx"] = {"Eten"}, ["etz"] = {"Semimi"}, ["euq"] = {"Basque (family)"}, ["eve"] = {"Even"}, ["evh"] = {"Uvbie"}, ["evn"] = {"Evenki"}, ["ewo"] = {"Ewondo"}, ["ext"] = {"Extremaduran"}, ["eya"] = {"Eyak"}, ["eyo"] = {"Keiyo"}, ["eza"] = {"Ezaa"}, ["eze"] = {"Uzekwe"}, ["faa"] = {"Fasu"}, ["fab"] = {"Fa d'Ambu"}, ["fad"] = {"Wagi"}, ["faf"] = {"Fagani"}, ["fag"] = {"Finongan"}, ["fah"] = {"Baissa Fali"}, ["fai"] = {"Faiwol"}, ["faj"] = {"Faita"}, ["fak"] = {"Fang (Cameroon)"}, ["fal"] = {"South Fali"}, ["fam"] = {"Fam"}, ["fan"] = {"Fang (Equatorial Guinea)"}, ["fap"] = {"Paloor"}, ["far"] = {"Fataleka"}, ["fat"] = {"Fanti"}, ["fau"] = {"Fayu"}, ["fax"] = {"Fala"}, ["fay"] = {"Southwestern Fars"}, ["faz"] = {"Northwestern Fars"}, ["fbl"] = {"West Albay Bikol"}, ["fcs"] = {"Quebec Sign Language"}, ["fer"] = {"Feroge"}, ["ffi"] = {"Foia Foia"}, ["ffm"] = {"Maasina Fulfulde"}, ["fgr"] = {"Fongoro"}, ["fia"] = {"Nobiin"}, ["fie"] = {"Fyer"}, ["fif"] = {"Faifi"}, ["fil"] = {"Filipino", "Pilipino"}, ["fip"] = {"Fipa"}, ["fir"] = {"Firan"}, ["fit"] = {"Tornedalen Finnish"}, ["fiu"] = {"Finno-Ugrian languages"}, ["fiw"] = {"Fiwaga"}, ["fkk"] = {"Kirya-Konzəl"}, ["fkv"] = {"Kven Finnish"}, ["fla"] = {"Kalispel-Pend d'Oreille"}, ["flh"] = {"Foau"}, ["fli"] = {"Fali"}, ["fll"] = {"North Fali"}, ["fln"] = {"Flinders Island"}, ["flr"] = {"Fuliiru"}, ["fly"] = {"Flaaitaal", "Tsotsitaal"}, ["fmp"] = {"Fe'fe'"}, ["fmu"] = {"Far Western Muria"}, ["fnb"] = {"Fanbak"}, ["fng"] = {"Fanagalo"}, ["fni"] = {"Fania"}, ["fod"] = {"Foodo"}, ["foi"] = {"Foi"}, ["fom"] = {"Foma"}, ["fon"] = {"Fon"}, ["for"] = {"Fore"}, ["fos"] = {"Siraya"}, ["fox"] = {"Formosan languages"}, ["fpe"] = {"Fernando Po Creole English"}, ["fqs"] = {"Fas"}, ["frc"] = {"Cajun French"}, ["frd"] = {"Fordata"}, ["frk"] = {"Frankish"}, ["frm"] = {"Middle French (ca. 1400-1600)"}, ["fro"] = {"Old French (842-ca. 1400)"}, ["frp"] = {"Arpitan", "Francoprovençal"}, ["frq"] = {"Forak"}, ["frr"] = {"Northern Frisian"}, ["frs"] = {"Eastern Frisian"}, ["frt"] = {"Fortsenal"}, ["fse"] = {"Finnish Sign Language"}, ["fsl"] = {"French Sign Language"}, ["fss"] = {"Finland-Swedish Sign Language", "finlandssvenskt teckenspråk", "suomenruotsalainen viittomakieli"}, ["fub"] = {"Adamawa Fulfulde"}, ["fuc"] = {"Pulaar"}, ["fud"] = {"East Futuna"}, ["fue"] = {"Borgu Fulfulde"}, ["fuf"] = {"Pular"}, ["fuh"] = {"Western Niger Fulfulde"}, ["fui"] = {"Bagirmi Fulfulde"}, ["fuj"] = {"Ko"}, ["fum"] = {"Fum"}, ["fun"] = {"Fulniô"}, ["fuq"] = {"Central-Eastern Niger Fulfulde"}, ["fur"] = {"Friulian"}, ["fut"] = {"Futuna-Aniwa"}, ["fuu"] = {"Furu"}, ["fuv"] = {"Nigerian Fulfulde"}, ["fuy"] = {"Fuyug"}, ["fvr"] = {"Fur"}, ["fwa"] = {"Fwâi"}, ["fwe"] = {"Fwe"}, ["gaa"] = {"Ga"}, ["gab"] = {"Gabri"}, ["gac"] = {"Mixed Great Andamanese"}, ["gad"] = {"Gaddang"}, ["gae"] = {"Guarequena"}, ["gaf"] = {"Gende"}, ["gag"] = {"Gagauz"}, ["gah"] = {"Alekano"}, ["gai"] = {"Borei"}, ["gaj"] = {"Gadsup"}, ["gak"] = {"Gamkonora"}, ["gal"] = {"Galolen"}, ["gam"] = {"Kandawo"}, ["gan"] = {"Gan Chinese"}, ["gao"] = {"Gants"}, ["gap"] = {"Gal"}, ["gaq"] = {"Gata'"}, ["gar"] = {"Galeya"}, ["gas"] = {"Adiwasi Garasia"}, ["gat"] = {"Kenati"}, ["gau"] = {"Mudhili Gadaba"}, ["gaw"] = {"Nobonob"}, ["gax"] = {"Borana-Arsi-Guji Oromo"}, ["gay"] = {"Gayo"}, ["gaz"] = {"West Central Oromo"}, ["gba"] = {"Gbaya (Central African Republic)"}, ["gbb"] = {"Kaytetye"}, ["gbd"] = {"Karajarri"}, ["gbe"] = {"Niksek"}, ["gbf"] = {"Gaikundi"}, ["gbg"] = {"Gbanziri"}, ["gbh"] = {"Defi Gbe"}, ["gbi"] = {"Galela"}, ["gbj"] = {"Bodo Gadaba"}, ["gbk"] = {"Gaddi"}, ["gbl"] = {"Gamit"}, ["gbm"] = {"Garhwali"}, ["gbn"] = {"Mo'da"}, ["gbo"] = {"Northern Grebo"}, ["gbp"] = {"Gbaya-Bossangoa"}, ["gbq"] = {"Gbaya-Bozoum"}, ["gbr"] = {"Gbagyi"}, ["gbs"] = {"Gbesi Gbe"}, ["gbu"] = {"Gagadu"}, ["gbv"] = {"Gbanu"}, ["gbw"] = {"Gabi-Gabi"}, ["gbx"] = {"Eastern Xwla Gbe"}, ["gby"] = {"Gbari"}, ["gbz"] = {"Zoroastrian Dari"}, ["gcc"] = {"Mali"}, ["gcd"] = {"Ganggalida"}, ["gce"] = {"Galice"}, ["gcf"] = {"Guadeloupean Creole French"}, ["gcl"] = {"Grenadian Creole English"}, ["gcn"] = {"Gaina"}, ["gcr"] = {"Guianese Creole French"}, ["gct"] = {"Colonia Tovar German"}, ["gda"] = {"Gade Lohar"}, ["gdb"] = {"Pottangi Ollar Gadaba"}, ["gdc"] = {"Gugu Badhun"}, ["gdd"] = {"Gedaged"}, ["gde"] = {"Gude"}, ["gdf"] = {"Guduf-Gava"}, ["gdg"] = {"Ga'dang"}, ["gdh"] = {"Gadjerawang", "Gajirrabeng"}, ["gdi"] = {"Gundi"}, ["gdj"] = {"Gurdjar"}, ["gdk"] = {"Gadang"}, ["gdl"] = {"Dirasha"}, ["gdm"] = {"Laal"}, ["gdn"] = {"Umanakaina"}, ["gdo"] = {"Ghodoberi"}, ["gdq"] = {"Mehri"}, ["gdr"] = {"Wipi"}, ["gds"] = {"Ghandruk Sign Language"}, ["gdt"] = {"Kungardutyi"}, ["gdu"] = {"Gudu"}, ["gdx"] = {"Godwari"}, ["gea"] = {"Geruma"}, ["geb"] = {"Kire"}, ["gec"] = {"Gboloo Grebo"}, ["ged"] = {"Gade"}, ["gef"] = {"Gerai"}, ["geg"] = {"Gengle"}, ["geh"] = {"Hutterite German", "Hutterisch"}, ["gei"] = {"Gebe"}, ["gej"] = {"Gen"}, ["gek"] = {"Ywom"}, ["gel"] = {"ut-Ma'in"}, ["gem"] = {"Germanic languages"}, ["geq"] = {"Geme"}, ["ges"] = {"Geser-Gorom"}, ["gev"] = {"Eviya"}, ["gew"] = {"Gera"}, ["gex"] = {"Garre"}, ["gey"] = {"Enya"}, ["gez"] = {"Geez"}, ["gfk"] = {"Patpatar"}, ["gft"] = {"Gafat"}, ["gga"] = {"Gao"}, ["ggb"] = {"Gbii"}, ["ggd"] = {"Gugadj"}, ["gge"] = {"Gurr-goni"}, ["ggg"] = {"Gurgula"}, ["ggk"] = {"Kungarakany"}, ["ggl"] = {"Ganglau"}, ["ggt"] = {"Gitua"}, ["ggu"] = {"Gagu", "Gban"}, ["ggw"] = {"Gogodala"}, ["gha"] = {"Ghadamès"}, ["ghc"] = {"Hiberno-Scottish Gaelic"}, ["ghe"] = {"Southern Ghale"}, ["ghh"] = {"Northern Ghale"}, ["ghk"] = {"Geko Karen"}, ["ghl"] = {"Ghulfan"}, ["ghn"] = {"Ghanongga"}, ["gho"] = {"Ghomara"}, ["ghr"] = {"Ghera"}, ["ghs"] = {"Guhu-Samane"}, ["ght"] = {"Kuke", "Kutang Ghale"}, ["gia"] = {"Kija"}, ["gib"] = {"Gibanawa"}, ["gic"] = {"Gail"}, ["gid"] = {"Gidar"}, ["gie"] = {"Gaɓogbo", "Guébie"}, ["gig"] = {"Goaria"}, ["gih"] = {"Githabul"}, ["gil"] = {"Gilbertese"}, ["gim"] = {"Gimi (Eastern Highlands)"}, ["gin"] = {"Hinukh"}, ["gip"] = {"Gimi (West New Britain)"}, ["giq"] = {"Green Gelao"}, ["gir"] = {"Red Gelao"}, ["gis"] = {"North Giziga"}, ["git"] = {"Gitxsan"}, ["giu"] = {"Mulao"}, ["giw"] = {"White Gelao"}, ["gix"] = {"Gilima"}, ["giy"] = {"Giyug"}, ["giz"] = {"South Giziga"}, ["gji"] = {"Geji"}, ["gjk"] = {"Kachi Koli"}, ["gjm"] = {"Gunditjmara"}, ["gjn"] = {"Gonja"}, ["gjr"] = {"Gurindji Kriol"}, ["gju"] = {"Gujari"}, ["gka"] = {"Guya"}, ["gkd"] = {"Magɨ (Madang Province)"}, ["gke"] = {"Ndai"}, ["gkn"] = {"Gokana"}, ["gko"] = {"Kok-Nar"}, ["gkp"] = {"Guinea Kpelle"}, ["gku"] = {"ǂUngkue"}, ["glc"] = {"Bon Gula"}, ["gld"] = {"Nanai"}, ["glh"] = {"Northwest Pashai", "Northwest Pashayi"}, ["glj"] = {"Gula Iro"}, ["glk"] = {"Gilaki"}, ["gll"] = {"Garlali"}, ["glo"] = {"Galambu"}, ["glr"] = {"Glaro-Twabo"}, ["glu"] = {"Gula (Chad)"}, ["glw"] = {"Glavda"}, ["gly"] = {"Gule"}, ["gma"] = {"Gambera"}, ["gmb"] = {"Gula'alaa"}, ["gmd"] = {"Mághdì"}, ["gme"] = {"East Germanic languages"}, ["gmg"] = {"Magɨyi"}, ["gmh"] = {"Middle High German (ca. 1050-1500)"}, ["gml"] = {"Middle Low German"}, ["gmm"] = {"Gbaya-Mbodomo"}, ["gmn"] = {"Gimnime"}, ["gmq"] = {"North Germanic languages"}, ["gmr"] = {"Mirning", "Mirniny"}, ["gmu"] = {"Gumalu"}, ["gmv"] = {"Gamo"}, ["gmw"] = {"West Germanic languages"}, ["gmx"] = {"Magoma"}, ["gmy"] = {"Mycenaean Greek"}, ["gmz"] = {"Mgbolizhia"}, ["gna"] = {"Kaansa"}, ["gnb"] = {"Gangte"}, ["gnc"] = {"Guanche"}, ["gnd"] = {"Zulgo-Gemzek"}, ["gne"] = {"Ganang"}, ["gng"] = {"Ngangam"}, ["gnh"] = {"Lere"}, ["gni"] = {"Gooniyandi"}, ["gnj"] = {"Ngen"}, ["gnk"] = {"ǁGana"}, ["gnl"] = {"Gangulu"}, ["gnm"] = {"Ginuman"}, ["gnn"] = {"Gumatj"}, ["gno"] = {"Northern Gondi"}, ["gnq"] = {"Gana"}, ["gnr"] = {"Gureng Gureng"}, ["gnt"] = {"Guntai"}, ["gnu"] = {"Gnau"}, ["gnw"] = {"Western Bolivian Guaraní"}, ["gnz"] = {"Ganzi"}, ["goa"] = {"Guro"}, ["gob"] = {"Playero"}, ["goc"] = {"Gorakor"}, ["god"] = {"Godié"}, ["goe"] = {"Gongduk"}, ["gof"] = {"Gofa"}, ["gog"] = {"Gogo"}, ["goh"] = {"Old High German (ca. 750-1050)"}, ["goi"] = {"Gobasi"}, ["goj"] = {"Gowlan"}, ["gok"] = {"Gowli"}, ["gol"] = {"Gola"}, ["gom"] = {"Goan Konkani"}, ["gon"] = {"Gondi"}, ["goo"] = {"Gone Dau"}, ["gop"] = {"Yeretuar"}, ["goq"] = {"Gorap"}, ["gor"] = {"Gorontalo"}, ["gos"] = {"Gronings"}, ["got"] = {"Gothic"}, ["gou"] = {"Gavar"}, ["gow"] = {"Gorowa"}, ["gox"] = {"Gobu"}, ["goy"] = {"Goundo"}, ["goz"] = {"Gozarkhani"}, ["gpa"] = {"Gupa-Abawa"}, ["gpe"] = {"Ghanaian Pidgin English"}, ["gpn"] = {"Taiap"}, ["gqa"] = {"Ga'anda"}, ["gqi"] = {"Guiqiong"}, ["gqn"] = {"Guana (Brazil)"}, ["gqr"] = {"Gor"}, ["gqu"] = {"Qau"}, ["gra"] = {"Rajput Garasia"}, ["grb"] = {"Grebo"}, ["grc"] = {"Ancient Greek (to 1453)"}, ["grd"] = {"Guruntum-Mbaaru"}, ["grg"] = {"Madi"}, ["grh"] = {"Gbiri-Niragu"}, ["gri"] = {"Ghari"}, ["grj"] = {"Southern Grebo"}, ["grk"] = {"Greek languages"}, ["grm"] = {"Kota Marudu Talantang"}, ["gro"] = {"Groma"}, ["grq"] = {"Gorovu"}, ["grr"] = {"Taznatit"}, ["grs"] = {"Gresi"}, ["grt"] = {"Garo"}, ["gru"] = {"Kistane"}, ["grv"] = {"Central Grebo"}, ["grw"] = {"Gweda"}, ["grx"] = {"Guriaso"}, ["gry"] = {"Barclayville Grebo"}, ["grz"] = {"Guramalum"}, ["gse"] = {"Ghanaian Sign Language"}, ["gsg"] = {"German Sign Language"}, ["gsl"] = {"Gusilay"}, ["gsm"] = {"Guatemalan Sign Language"}, ["gsn"] = {"Nema", "Gusan"}, ["gso"] = {"Southwest Gbaya"}, ["gsp"] = {"Wasembo"}, ["gss"] = {"Greek Sign Language"}, ["gsw"] = {"Swiss German", "Alemannic", "Alsatian"}, ["gta"] = {"Guató"}, ["gtu"] = {"Aghu-Tharnggala"}, ["gua"] = {"Shiki"}, ["gub"] = {"Guajajára"}, ["guc"] = {"Wayuu"}, ["gud"] = {"Yocoboué Dida"}, ["gue"] = {"Gurindji"}, ["guf"] = {"Gupapuyngu"}, ["gug"] = {"Paraguayan Guaraní"}, ["guh"] = {"Guahibo"}, ["gui"] = {"Eastern Bolivian Guaraní"}, ["guk"] = {"Gumuz"}, ["gul"] = {"Sea Island Creole English"}, ["gum"] = {"Guambiano"}, ["gun"] = {"Mbyá Guaraní"}, ["guo"] = {"Guayabero"}, ["gup"] = {"Gunwinggu"}, ["guq"] = {"Aché"}, ["gur"] = {"Farefare"}, ["gus"] = {"Guinean Sign Language"}, ["gut"] = {"Maléku Jaíka"}, ["guu"] = {"Yanomamö"}, ["guw"] = {"Gun"}, ["gux"] = {"Gourmanchéma"}, ["guz"] = {"Gusii", "Ekegusii"}, ["gva"] = {"Guana (Paraguay)"}, ["gvc"] = {"Guanano"}, ["gve"] = {"Duwet"}, ["gvf"] = {"Golin"}, ["gvj"] = {"Guajá"}, ["gvl"] = {"Gulay"}, ["gvm"] = {"Gurmana"}, ["gvn"] = {"Kuku-Yalanji"}, ["gvo"] = {"Gavião Do Jiparaná"}, ["gvp"] = {"Pará Gavião"}, ["gvr"] = {"Gurung"}, ["gvs"] = {"Gumawana"}, ["gvy"] = {"Guyani"}, ["gwa"] = {"Mbato"}, ["gwb"] = {"Gwa"}, ["gwc"] = {"Gawri", "Kalami"}, ["gwd"] = {"Gawwada"}, ["gwe"] = {"Gweno"}, ["gwf"] = {"Gowro"}, ["gwg"] = {"Moo"}, ["gwi"] = {"Gwichʼin"}, ["gwj"] = {"ǀGwi"}, ["gwm"] = {"Awngthim"}, ["gwn"] = {"Gwandara"}, ["gwr"] = {"Gwere"}, ["gwt"] = {"Gawar-Bati"}, ["gwu"] = {"Guwamu"}, ["gww"] = {"Kwini"}, ["gwx"] = {"Gua"}, ["gxx"] = {"Wè Southern"}, ["gya"] = {"Northwest Gbaya"}, ["gyb"] = {"Garus"}, ["gyd"] = {"Kayardild"}, ["gye"] = {"Gyem"}, ["gyf"] = {"Gungabula"}, ["gyg"] = {"Gbayi"}, ["gyi"] = {"Gyele"}, ["gyl"] = {"Gayil"}, ["gym"] = {"Ngäbere"}, ["gyn"] = {"Guyanese Creole English"}, ["gyo"] = {"Gyalsumdo"}, ["gyr"] = {"Guarayu"}, ["gyy"] = {"Gunya"}, ["gza"] = {"Ganza"}, ["gzi"] = {"Gazi"}, ["gzn"] = {"Gane"}, ["haa"] = {"Han"}, ["hab"] = {"Hanoi Sign Language"}, ["hac"] = {"Gurani"}, ["had"] = {"Hatam"}, ["hae"] = {"Eastern Oromo"}, ["haf"] = {"Haiphong Sign Language"}, ["hag"] = {"Hanga"}, ["hah"] = {"Hahon"}, ["hai"] = {"Haida"}, ["haj"] = {"Hajong"}, ["hak"] = {"Hakka Chinese"}, ["hal"] = {"Halang"}, ["ham"] = {"Hewa"}, ["han"] = {"Hangaza"}, ["hao"] = {"Hakö"}, ["hap"] = {"Hupla"}, ["haq"] = {"Ha"}, ["har"] = {"Harari"}, ["has"] = {"Haisla"}, ["hav"] = {"Havu"}, ["haw"] = {"Hawaiian"}, ["hax"] = {"Southern Haida"}, ["hay"] = {"Haya"}, ["haz"] = {"Hazaragi"}, ["hba"] = {"Hamba"}, ["hbb"] = {"Huba"}, ["hbn"] = {"Heiban"}, ["hbo"] = {"Ancient Hebrew"}, ["hbu"] = {"Habu"}, ["hca"] = {"Andaman Creole Hindi"}, ["hch"] = {"Huichol"}, ["hdn"] = {"Northern Haida"}, ["hds"] = {"Honduras Sign Language"}, ["hdy"] = {"Hadiyya"}, ["hea"] = {"Northern Qiandong Miao"}, ["hed"] = {"Herdé"}, ["heg"] = {"Helong"}, ["heh"] = {"Hehe"}, ["hei"] = {"Heiltsuk"}, ["hem"] = {"Hemba"}, ["hgm"] = {"Haiǁom"}, ["hgw"] = {"Haigwai"}, ["hhi"] = {"Hoia Hoia"}, ["hhr"] = {"Kerak"}, ["hhy"] = {"Hoyahoya"}, ["hia"] = {"Lamang"}, ["hib"] = {"Hibito"}, ["hid"] = {"Hidatsa"}, ["hif"] = {"Fiji Hindi"}, ["hig"] = {"Kamwe"}, ["hih"] = {"Pamosu"}, ["hii"] = {"Hinduri"}, ["hij"] = {"Hijuk"}, ["hik"] = {"Seit-Kaitetu"}, ["hil"] = {"Hiligaynon"}, ["him"] = {"Himachali languages", "Western Pahari languages"}, ["hio"] = {"Tsoa"}, ["hir"] = {"Himarimã"}, ["hit"] = {"Hittite"}, ["hiw"] = {"Hiw"}, ["hix"] = {"Hixkaryána"}, ["hji"] = {"Haji"}, ["hka"] = {"Kahe"}, ["hke"] = {"Hunde"}, ["hkk"] = {"Hunjara-Kaina Ke"}, ["hkn"] = {"Mel-Khaonh"}, ["hks"] = {"Hong Kong Sign Language", "Heung Kong Sau Yue"}, ["hla"] = {"Halia"}, ["hlb"] = {"Halbi"}, ["hld"] = {"Halang Doan"}, ["hle"] = {"Hlersu"}, ["hlt"] = {"Matu Chin"}, ["hlu"] = {"Hieroglyphic Luwian"}, ["hma"] = {"Southern Mashan Hmong", "Southern Mashan Miao"}, ["hmb"] = {"Humburi Senni Songhay"}, ["hmc"] = {"Central Huishui Hmong", "Central Huishui Miao"}, ["hmd"] = {"Large Flowery Miao", "A-hmaos", "Da-Hua Miao"}, ["hme"] = {"Eastern Huishui Hmong", "Eastern Huishui Miao"}, ["hmf"] = {"Hmong Don"}, ["hmg"] = {"Southwestern Guiyang Hmong"}, ["hmh"] = {"Southwestern Huishui Hmong", "Southwestern Huishui Miao"}, ["hmi"] = {"Northern Huishui Hmong", "Northern Huishui Miao"}, ["hmj"] = {"Ge", "Gejia"}, ["hmk"] = {"Maek"}, ["hml"] = {"Luopohe Hmong", "Luopohe Miao"}, ["hmm"] = {"Central Mashan Hmong", "Central Mashan Miao"}, ["hmn"] = {"Hmong", "Mong"}, ["hmp"] = {"Northern Mashan Hmong", "Northern Mashan Miao"}, ["hmq"] = {"Eastern Qiandong Miao"}, ["hmr"] = {"Hmar"}, ["hms"] = {"Southern Qiandong Miao"}, ["hmt"] = {"Hamtai"}, ["hmu"] = {"Hamap"}, ["hmv"] = {"Hmong Dô"}, ["hmw"] = {"Western Mashan Hmong", "Western Mashan Miao"}, ["hmx"] = {"Hmong-Mien languages"}, ["hmy"] = {"Southern Guiyang Hmong", "Southern Guiyang Miao"}, ["hmz"] = {"Hmong Shua", "Sinicized Miao"}, ["hna"] = {"Mina (Cameroon)"}, ["hnd"] = {"Southern Hindko"}, ["hne"] = {"Chhattisgarhi"}, ["hng"] = {"Hungu"}, ["hnh"] = {"ǁAni"}, ["hni"] = {"Hani"}, ["hnj"] = {"Hmong Njua", "Mong Leng", "Mong Njua"}, ["hnn"] = {"Hanunoo"}, ["hno"] = {"Northern Hindko"}, ["hns"] = {"Caribbean Hindustani"}, ["hnu"] = {"Hung"}, ["hoa"] = {"Hoava"}, ["hob"] = {"Mari (Madang Province)"}, ["hoc"] = {"Ho"}, ["hod"] = {"Holma"}, ["hoe"] = {"Horom"}, ["hoh"] = {"Hobyót"}, ["hoi"] = {"Holikachuk"}, ["hoj"] = {"Hadothi", "Haroti"}, ["hok"] = {"Hokan languages"}, ["hol"] = {"Holu"}, ["hom"] = {"Homa"}, ["hoo"] = {"Holoholo"}, ["hop"] = {"Hopi"}, ["hor"] = {"Horo"}, ["hos"] = {"Ho Chi Minh City Sign Language"}, ["hot"] = {"Hote", "Malê"}, ["hov"] = {"Hovongan"}, ["how"] = {"Honi"}, ["hoy"] = {"Holiya"}, ["hoz"] = {"Hozo"}, ["hpo"] = {"Hpon"}, ["hps"] = {"Hawai'i Sign Language (HSL)", "Hawai'i Pidgin Sign Language"}, ["hra"] = {"Hrangkhol"}, ["hrc"] = {"Niwer Mil"}, ["hre"] = {"Hre"}, ["hrk"] = {"Haruku"}, ["hrm"] = {"Horned Miao"}, ["hro"] = {"Haroi"}, ["hrp"] = {"Nhirrpi"}, ["hrt"] = {"Hértevin"}, ["hru"] = {"Hruso"}, ["hrw"] = {"Warwar Feni"}, ["hrx"] = {"Hunsrik"}, ["hrz"] = {"Harzani"}, ["hsb"] = {"Upper Sorbian"}, ["hsh"] = {"Hungarian Sign Language"}, ["hsl"] = {"Hausa Sign Language"}, ["hsn"] = {"Xiang Chinese"}, ["hss"] = {"Harsusi"}, ["hti"] = {"Hoti"}, ["hto"] = {"Minica Huitoto"}, ["hts"] = {"Hadza"}, ["htu"] = {"Hitu"}, ["htx"] = {"Middle Hittite"}, ["hub"] = {"Huambisa"}, ["huc"] = {"ǂHua", "ǂʼAmkhoe"}, ["hud"] = {"Huaulu"}, ["hue"] = {"San Francisco Del Mar Huave"}, ["huf"] = {"Humene"}, ["hug"] = {"Huachipaeri"}, ["huh"] = {"Huilliche"}, ["hui"] = {"Huli"}, ["huj"] = {"Northern Guiyang Hmong", "Northern Guiyang Miao"}, ["huk"] = {"Hulung"}, ["hul"] = {"Hula"}, ["hum"] = {"Hungana"}, ["huo"] = {"Hu"}, ["hup"] = {"Hupa"}, ["huq"] = {"Tsat"}, ["hur"] = {"Halkomelem"}, ["hus"] = {"Huastec"}, ["hut"] = {"Humla"}, ["huu"] = {"Murui Huitoto"}, ["huv"] = {"San Mateo Del Mar Huave"}, ["huw"] = {"Hukumina"}, ["hux"] = {"Nüpode Huitoto"}, ["huy"] = {"Hulaulá"}, ["huz"] = {"Hunzib"}, ["hvc"] = {"Haitian Vodoun Culture Language"}, ["hve"] = {"San Dionisio Del Mar Huave"}, ["hvk"] = {"Haveke"}, ["hvn"] = {"Sabu"}, ["hvv"] = {"Santa María Del Mar Huave"}, ["hwa"] = {"Wané"}, ["hwc"] = {"Hawai'i Creole English", "Hawai'i Pidgin"}, ["hwo"] = {"Hwana"}, ["hya"] = {"Hya"}, ["hyw"] = {"Western Armenian"}, ["hyx"] = {"Armenian (family)"}, ["iai"] = {"Iaai"}, ["ian"] = {"Iatmul"}, ["iar"] = {"Purari"}, ["iba"] = {"Iban"}, ["ibb"] = {"Ibibio"}, ["ibd"] = {"Iwaidja"}, ["ibe"] = {"Akpes"}, ["ibg"] = {"Ibanag"}, ["ibh"] = {"Bih"}, ["ibl"] = {"Ibaloi"}, ["ibm"] = {"Agoi"}, ["ibn"] = {"Ibino"}, ["ibr"] = {"Ibuoro"}, ["ibu"] = {"Ibu"}, ["iby"] = {"Ibani"}, ["ica"] = {"Ede Ica"}, ["ich"] = {"Etkywan"}, ["icl"] = {"Icelandic Sign Language"}, ["icr"] = {"Islander Creole English"}, ["ida"] = {"Idakho-Isukha-Tiriki", "Luidakho-Luisukha-Lutirichi"}, ["idb"] = {"Indo-Portuguese"}, ["idc"] = {"Idon", "Ajiya"}, ["idd"] = {"Ede Idaca"}, ["ide"] = {"Idere"}, ["idi"] = {"Idi"}, ["idr"] = {"Indri"}, ["ids"] = {"Idesa"}, ["idt"] = {"Idaté"}, ["idu"] = {"Idoma"}, ["ifa"] = {"Amganad Ifugao"}, ["ifb"] = {"Batad Ifugao", "Ayangan Ifugao"}, ["ife"] = {"Ifè"}, ["iff"] = {"Ifo"}, ["ifk"] = {"Tuwali Ifugao"}, ["ifm"] = {"Teke-Fuumu"}, ["ifu"] = {"Mayoyao Ifugao"}, ["ify"] = {"Keley-I Kallahan"}, ["igb"] = {"Ebira"}, ["ige"] = {"Igede"}, ["igg"] = {"Igana"}, ["igl"] = {"Igala"}, ["igm"] = {"Kanggape"}, ["ign"] = {"Ignaciano"}, ["igo"] = {"Isebe"}, ["igs"] = {"Interglossa"}, ["igw"] = {"Igwe"}, ["ihb"] = {"Iha Based Pidgin"}, ["ihi"] = {"Ihievbe"}, ["ihp"] = {"Iha"}, ["ihw"] = {"Bidhawal"}, ["iin"] = {"Thiin"}, ["iir"] = {"Indo-Iranian languages"}, ["ijc"] = {"Izon"}, ["ije"] = {"Biseni"}, ["ijj"] = {"Ede Ije"}, ["ijn"] = {"Kalabari"}, ["ijo"] = {"Ijo languages"}, ["ijs"] = {"Southeast Ijo"}, ["ike"] = {"Eastern Canadian Inuktitut"}, ["iki"] = {"Iko"}, ["ikk"] = {"Ika"}, ["ikl"] = {"Ikulu"}, ["iko"] = {"Olulumo-Ikom"}, ["ikp"] = {"Ikpeshi"}, ["ikr"] = {"Ikaranggal"}, ["iks"] = {"Inuit Sign Language"}, ["ikt"] = {"Inuinnaqtun", "Western Canadian Inuktitut"}, ["ikv"] = {"Iku-Gora-Ankwa"}, ["ikw"] = {"Ikwere"}, ["ikx"] = {"Ik"}, ["ikz"] = {"Ikizu"}, ["ila"] = {"Ile Ape"}, ["ilb"] = {"Ila"}, ["ilg"] = {"Garig-Ilgar"}, ["ili"] = {"Ili Turki"}, ["ilk"] = {"Ilongot"}, ["ilm"] = {"Iranun (Malaysia)"}, ["ilo"] = {"Iloko"}, ["ilp"] = {"Iranun (Philippines)"}, ["ils"] = {"International Sign"}, ["ilu"] = {"Ili'uun"}, ["ilv"] = {"Ilue"}, ["ima"] = {"Mala Malasar"}, ["imi"] = {"Anamgura"}, ["iml"] = {"Miluk"}, ["imn"] = {"Imonda"}, ["imo"] = {"Imbongu"}, ["imr"] = {"Imroing"}, ["ims"] = {"Marsian"}, ["imy"] = {"Milyan"}, ["inb"] = {"Inga"}, ["inc"] = {"Indic languages"}, ["ine"] = {"Indo-European languages"}, ["ing"] = {"Degexit'an"}, ["inh"] = {"Ingush"}, ["inj"] = {"Jungle Inga"}, ["inl"] = {"Indonesian Sign Language"}, ["inm"] = {"Minaean"}, ["inn"] = {"Isinai"}, ["ino"] = {"Inoke-Yate"}, ["inp"] = {"Iñapari"}, ["ins"] = {"Indian Sign Language"}, ["int"] = {"Intha"}, ["inz"] = {"Ineseño"}, ["ior"] = {"Inor"}, ["iou"] = {"Tuma-Irumu"}, ["iow"] = {"Iowa-Oto"}, ["ipi"] = {"Ipili"}, ["ipo"] = {"Ipiko"}, ["iqu"] = {"Iquito"}, ["iqw"] = {"Ikwo"}, ["ira"] = {"Iranian languages"}, ["ire"] = {"Iresim"}, ["irh"] = {"Irarutu"}, ["iri"] = {"Rigwe", "Irigwe"}, ["irk"] = {"Iraqw"}, ["irn"] = {"Irántxe"}, ["iro"] = {"Iroquoian languages"}, ["irr"] = {"Ir"}, ["iru"] = {"Irula"}, ["irx"] = {"Kamberau"}, ["iry"] = {"Iraya"}, ["isa"] = {"Isabi"}, ["isc"] = {"Isconahua"}, ["isd"] = {"Isnag"}, ["ise"] = {"Italian Sign Language"}, ["isg"] = {"Irish Sign Language"}, ["ish"] = {"Esan"}, ["isi"] = {"Nkem-Nkum"}, ["isk"] = {"Ishkashimi"}, ["ism"] = {"Masimasi"}, ["isn"] = {"Isanzu"}, ["iso"] = {"Isoko"}, ["isr"] = {"Israeli Sign Language"}, ["ist"] = {"Istriot"}, ["isu"] = {"Isu (Menchum Division)"}, ["itb"] = {"Binongan Itneg"}, ["itc"] = {"Italic languages"}, ["itd"] = {"Southern Tidung"}, ["ite"] = {"Itene"}, ["iti"] = {"Inlaod Itneg"}, ["itk"] = {"Judeo-Italian"}, ["itl"] = {"Itelmen"}, ["itm"] = {"Itu Mbon Uzo"}, ["ito"] = {"Itonama"}, ["itr"] = {"Iteri"}, ["its"] = {"Isekiri"}, ["itt"] = {"Maeng Itneg"}, ["itv"] = {"Itawit"}, ["itw"] = {"Ito"}, ["itx"] = {"Itik"}, ["ity"] = {"Moyadan Itneg"}, ["itz"] = {"Itzá"}, ["ium"] = {"Iu Mien"}, ["ivb"] = {"Ibatan"}, ["ivv"] = {"Ivatan"}, ["iwk"] = {"I-Wak"}, ["iwm"] = {"Iwam"}, ["iwo"] = {"Iwur"}, ["iws"] = {"Sepik Iwam"}, ["ixc"] = {"Ixcatec"}, ["ixl"] = {"Ixil"}, ["iya"] = {"Iyayu"}, ["iyo"] = {"Mesaka"}, ["iyx"] = {"Yaka (Congo)"}, ["izh"] = {"Ingrian"}, ["izr"] = {"Izere"}, ["izz"] = {"Izii"}, ["jaa"] = {"Jamamadí"}, ["jab"] = {"Hyam"}, ["jac"] = {"Popti'", "Jakalteko"}, ["jad"] = {"Jahanka"}, ["jae"] = {"Yabem"}, ["jaf"] = {"Jara"}, ["jah"] = {"Jah Hut"}, ["jaj"] = {"Zazao"}, ["jak"] = {"Jakun"}, ["jal"] = {"Yalahatan"}, ["jam"] = {"Jamaican Creole English"}, ["jan"] = {"Jandai"}, ["jao"] = {"Yanyuwa"}, ["jaq"] = {"Yaqay"}, ["jas"] = {"New Caledonian Javanese"}, ["jat"] = {"Jakati"}, ["jau"] = {"Yaur"}, ["jax"] = {"Jambi Malay"}, ["jay"] = {"Yan-nhangu", "Nhangu"}, ["jaz"] = {"Jawe"}, ["jbe"] = {"Judeo-Berber"}, ["jbi"] = {"Badjiri"}, ["jbj"] = {"Arandai"}, ["jbk"] = {"Barikewa"}, ["jbn"] = {"Nafusi"}, ["jbo"] = {"Lojban"}, ["jbr"] = {"Jofotek-Bromnya"}, ["jbt"] = {"Jabutí"}, ["jbu"] = {"Jukun Takum"}, ["jbw"] = {"Yawijibaya"}, ["jcs"] = {"Jamaican Country Sign Language"}, ["jct"] = {"Krymchak"}, ["jda"] = {"Jad"}, ["jdg"] = {"Jadgali"}, ["jdt"] = {"Judeo-Tat"}, ["jeb"] = {"Jebero"}, ["jee"] = {"Jerung"}, ["jeh"] = {"Jeh"}, ["jei"] = {"Yei"}, ["jek"] = {"Jeri Kuo"}, ["jel"] = {"Yelmek"}, ["jen"] = {"Dza"}, ["jer"] = {"Jere"}, ["jet"] = {"Manem"}, ["jeu"] = {"Jonkor Bourmataguil"}, ["jgb"] = {"Ngbee"}, ["jge"] = {"Judeo-Georgian"}, ["jgk"] = {"Gwak"}, ["jgo"] = {"Ngomba"}, ["jhi"] = {"Jehai"}, ["jhs"] = {"Jhankot Sign Language"}, ["jia"] = {"Jina"}, ["jib"] = {"Jibu"}, ["jic"] = {"Tol"}, ["jid"] = {"Bu"}, ["jie"] = {"Jilbe"}, ["jig"] = {"Jingulu", "Djingili"}, ["jih"] = {"sTodsde", "Shangzhai"}, ["jii"] = {"Jiiddu"}, ["jil"] = {"Jilim"}, ["jim"] = {"Jimi (Cameroon)"}, ["jio"] = {"Jiamao"}, ["jiq"] = {"Guanyinqiao", "Lavrung"}, ["jit"] = {"Jita"}, ["jiu"] = {"Youle Jinuo"}, ["jiv"] = {"Shuar"}, ["jiy"] = {"Buyuan Jinuo"}, ["jje"] = {"Jejueo"}, ["jjr"] = {"Bankal"}, ["jka"] = {"Kaera"}, ["jkm"] = {"Mobwa Karen"}, ["jko"] = {"Kubo"}, ["jkp"] = {"Paku Karen"}, ["jkr"] = {"Koro (India)"}, ["jku"] = {"Labir"}, ["jle"] = {"Ngile"}, ["jls"] = {"Jamaican Sign Language"}, ["jma"] = {"Dima"}, ["jmb"] = {"Zumbun"}, ["jmc"] = {"Machame"}, ["jmd"] = {"Yamdena"}, ["jmi"] = {"Jimi (Nigeria)"}, ["jml"] = {"Jumli"}, ["jmn"] = {"Makuri Naga"}, ["jmr"] = {"Kamara"}, ["jms"] = {"Mashi (Nigeria)"}, ["jmw"] = {"Mouwase"}, ["jmx"] = {"Western Juxtlahuaca Mixtec"}, ["jna"] = {"Jangshung"}, ["jnd"] = {"Jandavra"}, ["jng"] = {"Yangman"}, ["jni"] = {"Janji"}, ["jnj"] = {"Yemsa"}, ["jnl"] = {"Rawat"}, ["jns"] = {"Jaunsari"}, ["job"] = {"Joba"}, ["jod"] = {"Wojenaka"}, ["jog"] = {"Jogi"}, ["jor"] = {"Jorá"}, ["jos"] = {"Jordanian Sign Language"}, ["jow"] = {"Jowulu"}, ["jpa"] = {"Jewish Palestinian Aramaic"}, ["jpr"] = {"Judeo-Persian"}, ["jpx"] = {"Japanese (family)"}, ["jqr"] = {"Jaqaru"}, ["jra"] = {"Jarai"}, ["jrb"] = {"Judeo-Arabic"}, ["jrr"] = {"Jiru"}, ["jrt"] = {"Jorto"}, ["jru"] = {"Japrería"}, ["jsl"] = {"Japanese Sign Language"}, ["jua"] = {"Júma"}, ["jub"] = {"Wannu"}, ["juc"] = {"Jurchen"}, ["jud"] = {"Worodougou"}, ["juh"] = {"Hõne"}, ["jui"] = {"Ngadjuri"}, ["juk"] = {"Wapan"}, ["jul"] = {"Jirel"}, ["jum"] = {"Jumjum"}, ["jun"] = {"Juang"}, ["juo"] = {"Jiba"}, ["jup"] = {"Hupdë"}, ["jur"] = {"Jurúna"}, ["jus"] = {"Jumla Sign Language"}, ["jut"] = {"Jutish"}, ["juu"] = {"Ju"}, ["juw"] = {"Wãpha"}, ["juy"] = {"Juray"}, ["jvd"] = {"Javindo"}, ["jvn"] = {"Caribbean Javanese"}, ["jwi"] = {"Jwira-Pepesa"}, ["jya"] = {"Jiarong"}, ["jye"] = {"Judeo-Yemeni Arabic"}, ["jyy"] = {"Jaya"}, ["kaa"] = {"Kara-Kalpak", "Karakalpak"}, ["kab"] = {"Kabyle"}, ["kac"] = {"Kachin", "Jingpho"}, ["kad"] = {"Adara"}, ["kae"] = {"Ketangalan"}, ["kaf"] = {"Katso"}, ["kag"] = {"Kajaman"}, ["kah"] = {"Kara (Central African Republic)"}, ["kai"] = {"Karekare"}, ["kaj"] = {"Jju"}, ["kak"] = {"Kalanguya", "Kayapa Kallahan"}, ["kam"] = {"Kamba (Kenya)"}, ["kao"] = {"Xaasongaxango"}, ["kap"] = {"Bezhta"}, ["kaq"] = {"Capanahua"}, ["kar"] = {"Karen languages"}, ["kav"] = {"Katukína"}, ["kaw"] = {"Kawi"}, ["kax"] = {"Kao"}, ["kay"] = {"Kamayurá"}, ["kba"] = {"Kalarko"}, ["kbb"] = {"Kaxuiâna"}, ["kbc"] = {"Kadiwéu"}, ["kbd"] = {"Kabardian"}, ["kbe"] = {"Kanju"}, ["kbg"] = {"Khamba"}, ["kbh"] = {"Camsá"}, ["kbi"] = {"Kaptiau"}, ["kbj"] = {"Kari"}, ["kbk"] = {"Grass Koiari"}, ["kbl"] = {"Kanembu"}, ["kbm"] = {"Iwal"}, ["kbn"] = {"Kare (Central African Republic)"}, ["kbo"] = {"Keliko"}, ["kbp"] = {"Kabiyè"}, ["kbq"] = {"Kamano"}, ["kbr"] = {"Kafa"}, ["kbs"] = {"Kande"}, ["kbt"] = {"Abadi"}, ["kbu"] = {"Kabutra"}, ["kbv"] = {"Dera (Indonesia)"}, ["kbw"] = {"Kaiep"}, ["kbx"] = {"Ap Ma"}, ["kby"] = {"Manga Kanuri"}, ["kbz"] = {"Duhwa"}, ["kca"] = {"Khanty"}, ["kcb"] = {"Kawacha"}, ["kcc"] = {"Lubila"}, ["kcd"] = {"Ngkâlmpw Kanum"}, ["kce"] = {"Kaivi"}, ["kcf"] = {"Ukaan"}, ["kcg"] = {"Tyap"}, ["kch"] = {"Vono"}, ["kci"] = {"Kamantan"}, ["kcj"] = {"Kobiana"}, ["kck"] = {"Kalanga"}, ["kcl"] = {"Kela (Papua New Guinea)", "Kala"}, ["kcm"] = {"Gula (Central African Republic)"}, ["kcn"] = {"Nubi"}, ["kco"] = {"Kinalakna"}, ["kcp"] = {"Kanga"}, ["kcq"] = {"Kamo"}, ["kcr"] = {"Katla"}, ["kcs"] = {"Koenoem"}, ["kct"] = {"Kaian"}, ["kcu"] = {"Kami (Tanzania)"}, ["kcv"] = {"Kete"}, ["kcw"] = {"Kabwari"}, ["kcx"] = {"Kachama-Ganjule"}, ["kcy"] = {"Korandje"}, ["kcz"] = {"Konongo"}, ["kda"] = {"Worimi"}, ["kdc"] = {"Kutu"}, ["kdd"] = {"Yankunytjatjara"}, ["kde"] = {"Makonde"}, ["kdf"] = {"Mamusi"}, ["kdg"] = {"Seba"}, ["kdh"] = {"Tem"}, ["kdi"] = {"Kumam"}, ["kdj"] = {"Karamojong"}, ["kdk"] = {"Numèè", "Kwényi"}, ["kdl"] = {"Tsikimba"}, ["kdm"] = {"Kagoma"}, ["kdn"] = {"Kunda"}, ["kdo"] = {"Kordofanian languages"}, ["kdp"] = {"Kaningdon-Nindem"}, ["kdq"] = {"Koch"}, ["kdr"] = {"Karaim"}, ["kdt"] = {"Kuy"}, ["kdu"] = {"Kadaru"}, ["kdw"] = {"Koneraw"}, ["kdx"] = {"Kam"}, ["kdy"] = {"Keder", "Keijar"}, ["kdz"] = {"Kwaja"}, ["kea"] = {"Kabuverdianu"}, ["keb"] = {"Kélé"}, ["kec"] = {"Keiga"}, ["ked"] = {"Kerewe"}, ["kee"] = {"Eastern Keres"}, ["kef"] = {"Kpessi"}, ["keg"] = {"Tese"}, ["keh"] = {"Keak"}, ["kei"] = {"Kei"}, ["kej"] = {"Kadar"}, ["kek"] = {"Kekchí"}, ["kel"] = {"Kela (Democratic Republic of Congo)"}, ["kem"] = {"Kemak"}, ["ken"] = {"Kenyang"}, ["keo"] = {"Kakwa"}, ["kep"] = {"Kaikadi"}, ["keq"] = {"Kamar"}, ["ker"] = {"Kera"}, ["kes"] = {"Kugbo"}, ["ket"] = {"Ket"}, ["keu"] = {"Akebu"}, ["kev"] = {"Kanikkaran"}, ["kew"] = {"West Kewa"}, ["kex"] = {"Kukna"}, ["key"] = {"Kupia"}, ["kez"] = {"Kukele"}, ["kfa"] = {"Kodava"}, ["kfb"] = {"Northwestern Kolami"}, ["kfc"] = {"Konda-Dora"}, ["kfd"] = {"Korra Koraga"}, ["kfe"] = {"Kota (India)"}, ["kff"] = {"Koya"}, ["kfg"] = {"Kudiya"}, ["kfh"] = {"Kurichiya"}, ["kfi"] = {"Kannada Kurumba"}, ["kfj"] = {"Kemiehua"}, ["kfk"] = {"Kinnauri"}, ["kfl"] = {"Kung"}, ["kfm"] = {"Khunsari"}, ["kfn"] = {"Kuk"}, ["kfo"] = {"Koro (Côte d'Ivoire)"}, ["kfp"] = {"Korwa"}, ["kfq"] = {"Korku"}, ["kfr"] = {"Kachhi", "Kutchi"}, ["kfs"] = {"Bilaspuri"}, ["kft"] = {"Kanjari"}, ["kfu"] = {"Katkari"}, ["kfv"] = {"Kurmukar"}, ["kfw"] = {"Kharam Naga"}, ["kfx"] = {"Kullu Pahari"}, ["kfy"] = {"Kumaoni"}, ["kfz"] = {"Koromfé"}, ["kga"] = {"Koyaga"}, ["kgb"] = {"Kawe"}, ["kge"] = {"Komering"}, ["kgf"] = {"Kube"}, ["kgg"] = {"Kusunda"}, ["kgi"] = {"Selangor Sign Language"}, ["kgj"] = {"Gamale Kham"}, ["kgk"] = {"Kaiwá"}, ["kgl"] = {"Kunggari"}, ["kgm"] = {"Karipúna"}, ["kgn"] = {"Karingani"}, ["kgo"] = {"Krongo"}, ["kgp"] = {"Kaingang"}, ["kgq"] = {"Kamoro"}, ["kgr"] = {"Abun"}, ["kgs"] = {"Kumbainggar"}, ["kgt"] = {"Somyev"}, ["kgu"] = {"Kobol"}, ["kgv"] = {"Karas"}, ["kgw"] = {"Karon Dori"}, ["kgx"] = {"Kamaru"}, ["kgy"] = {"Kyerung"}, ["kha"] = {"Khasi"}, ["khb"] = {"Lü"}, ["khc"] = {"Tukang Besi North"}, ["khd"] = {"Bädi Kanum"}, ["khe"] = {"Korowai"}, ["khf"] = {"Khuen"}, ["khg"] = {"Khams Tibetan"}, ["khh"] = {"Kehu"}, ["khi"] = {"Khoisan languages"}, ["khj"] = {"Kuturmi"}, ["khk"] = {"Halh Mongolian"}, ["khl"] = {"Lusi"}, ["khn"] = {"Khandesi"}, ["kho"] = {"Khotanese", "Sakan"}, ["khp"] = {"Kapori", "Kapauri"}, ["khq"] = {"Koyra Chiini Songhay"}, ["khr"] = {"Kharia"}, ["khs"] = {"Kasua"}, ["kht"] = {"Khamti"}, ["khu"] = {"Nkhumbi"}, ["khv"] = {"Khvarshi"}, ["khw"] = {"Khowar"}, ["khx"] = {"Kanu"}, ["khy"] = {"Kele (Democratic Republic of Congo)"}, ["khz"] = {"Keapara"}, ["kia"] = {"Kim"}, ["kib"] = {"Koalib"}, ["kic"] = {"Kickapoo"}, ["kid"] = {"Koshin"}, ["kie"] = {"Kibet"}, ["kif"] = {"Eastern Parbate Kham"}, ["kig"] = {"Kimaama", "Kimaghima"}, ["kih"] = {"Kilmeri"}, ["kii"] = {"Kitsai"}, ["kij"] = {"Kilivila"}, ["kil"] = {"Kariya"}, ["kim"] = {"Karagas"}, ["kio"] = {"Kiowa"}, ["kip"] = {"Sheshi Kham"}, ["kiq"] = {"Kosadle", "Kosare"}, ["kis"] = {"Kis"}, ["kit"] = {"Agob"}, ["kiu"] = {"Kirmanjki (individual language)"}, ["kiv"] = {"Kimbu"}, ["kiw"] = {"Northeast Kiwai"}, ["kix"] = {"Khiamniungan Naga"}, ["kiy"] = {"Kirikiri"}, ["kiz"] = {"Kisi"}, ["kja"] = {"Mlap"}, ["kjb"] = {"Q'anjob'al", "Kanjobal"}, ["kjc"] = {"Coastal Konjo"}, ["kjd"] = {"Southern Kiwai"}, ["kje"] = {"Kisar"}, ["kjg"] = {"Khmu"}, ["kjh"] = {"Khakas"}, ["kji"] = {"Zabana"}, ["kjj"] = {"Khinalugh"}, ["kjk"] = {"Highland Konjo"}, ["kjl"] = {"Western Parbate Kham"}, ["kjm"] = {"Kháng"}, ["kjn"] = {"Kunjen"}, ["kjo"] = {"Harijan Kinnauri"}, ["kjp"] = {"Pwo Eastern Karen"}, ["kjq"] = {"Western Keres"}, ["kjr"] = {"Kurudu"}, ["kjs"] = {"East Kewa"}, ["kjt"] = {"Phrae Pwo Karen"}, ["kju"] = {"Kashaya"}, ["kjv"] = {"Kaikavian Literary Language"}, ["kjx"] = {"Ramopa"}, ["kjy"] = {"Erave"}, ["kjz"] = {"Bumthangkha"}, ["kka"] = {"Kakanda"}, ["kkb"] = {"Kwerisa"}, ["kkc"] = {"Odoodee"}, ["kkd"] = {"Kinuku"}, ["kke"] = {"Kakabe"}, ["kkf"] = {"Kalaktang Monpa"}, ["kkg"] = {"Mabaka Valley Kalinga"}, ["kkh"] = {"Khün"}, ["kki"] = {"Kagulu"}, ["kkj"] = {"Kako"}, ["kkk"] = {"Kokota"}, ["kkl"] = {"Kosarek Yale"}, ["kkm"] = {"Kiong"}, ["kkn"] = {"Kon Keu"}, ["kko"] = {"Karko"}, ["kkp"] = {"Gugubera", "Koko-Bera"}, ["kkq"] = {"Kaeku"}, ["kkr"] = {"Kir-Balar"}, ["kks"] = {"Giiwo"}, ["kkt"] = {"Koi"}, ["kku"] = {"Tumi"}, ["kkv"] = {"Kangean"}, ["kkw"] = {"Teke-Kukuya"}, ["kkx"] = {"Kohin"}, ["kky"] = {"Guugu Yimidhirr", "Guguyimidjir"}, ["kkz"] = {"Kaska"}, ["kla"] = {"Klamath-Modoc"}, ["klb"] = {"Kiliwa"}, ["klc"] = {"Kolbila"}, ["kld"] = {"Gamilaraay"}, ["kle"] = {"Kulung (Nepal)"}, ["klf"] = {"Kendeje"}, ["klg"] = {"Tagakaulo"}, ["klh"] = {"Weliki"}, ["kli"] = {"Kalumpang"}, ["klj"] = {"Khalaj"}, ["klk"] = {"Kono (Nigeria)"}, ["kll"] = {"Kagan Kalagan"}, ["klm"] = {"Migum"}, ["kln"] = {"Kalenjin"}, ["klo"] = {"Kapya"}, ["klp"] = {"Kamasa"}, ["klq"] = {"Rumu"}, ["klr"] = {"Khaling"}, ["kls"] = {"Kalasha"}, ["klt"] = {"Nukna"}, ["klu"] = {"Klao"}, ["klv"] = {"Maskelynes"}, ["klw"] = {"Tado", "Lindu"}, ["klx"] = {"Koluwawa"}, ["kly"] = {"Kalao"}, ["klz"] = {"Kabola"}, ["kma"] = {"Konni"}, ["kmb"] = {"Kimbundu"}, ["kmc"] = {"Southern Dong"}, ["kmd"] = {"Majukayang Kalinga"}, ["kme"] = {"Bakole"}, ["kmf"] = {"Kare (Papua New Guinea)"}, ["kmg"] = {"Kâte"}, ["kmh"] = {"Kalam"}, ["kmi"] = {"Kami (Nigeria)"}, ["kmj"] = {"Kumarbhag Paharia"}, ["kmk"] = {"Limos Kalinga"}, ["kml"] = {"Tanudan Kalinga"}, ["kmm"] = {"Kom (India)"}, ["kmn"] = {"Awtuw"}, ["kmo"] = {"Kwoma"}, ["kmp"] = {"Gimme"}, ["kmq"] = {"Kwama"}, ["kmr"] = {"Northern Kurdish"}, ["kms"] = {"Kamasau"}, ["kmt"] = {"Kemtuik"}, ["kmu"] = {"Kanite"}, ["kmv"] = {"Karipúna Creole French"}, ["kmw"] = {"Komo (Democratic Republic of Congo)"}, ["kmx"] = {"Waboda"}, ["kmy"] = {"Koma"}, ["kmz"] = {"Khorasani Turkish"}, ["kna"] = {"Dera (Nigeria)"}, ["knb"] = {"Lubuagan Kalinga"}, ["knc"] = {"Central Kanuri"}, ["knd"] = {"Konda"}, ["kne"] = {"Kankanaey"}, ["knf"] = {"Mankanya"}, ["kng"] = {"Koongo"}, ["kni"] = {"Kanufi"}, ["knj"] = {"Western Kanjobal"}, ["knk"] = {"Kuranko"}, ["knl"] = {"Keninjal"}, ["knm"] = {"Kanamarí"}, ["knn"] = {"Konkani (individual language)"}, ["kno"] = {"Kono (Sierra Leone)"}, ["knp"] = {"Kwanja"}, ["knq"] = {"Kintaq"}, ["knr"] = {"Kaningra"}, ["kns"] = {"Kensiu"}, ["knt"] = {"Panoan Katukína"}, ["knu"] = {"Kono (Guinea)"}, ["knv"] = {"Tabo"}, ["knw"] = {"Kung-Ekoka"}, ["knx"] = {"Kendayan", "Salako"}, ["kny"] = {"Kanyok"}, ["knz"] = {"Kalamsé"}, ["koa"] = {"Konomala"}, ["koc"] = {"Kpati"}, ["kod"] = {"Kodi"}, ["koe"] = {"Kacipo-Balesi"}, ["kof"] = {"Kubi"}, ["kog"] = {"Cogui", "Kogi"}, ["koh"] = {"Koyo"}, ["koi"] = {"Komi-Permyak"}, ["kok"] = {"Konkani (macrolanguage)"}, ["kol"] = {"Kol (Papua New Guinea)"}, ["koo"] = {"Konzo"}, ["kop"] = {"Waube"}, ["koq"] = {"Kota (Gabon)"}, ["kos"] = {"Kosraean"}, ["kot"] = {"Lagwan"}, ["kou"] = {"Koke"}, ["kov"] = {"Kudu-Camo"}, ["kow"] = {"Kugama"}, ["koy"] = {"Koyukon"}, ["koz"] = {"Korak"}, ["kpa"] = {"Kutto"}, ["kpb"] = {"Mullu Kurumba"}, ["kpc"] = {"Curripaco"}, ["kpd"] = {"Koba"}, ["kpe"] = {"Kpelle"}, ["kpf"] = {"Komba"}, ["kpg"] = {"Kapingamarangi"}, ["kph"] = {"Kplang"}, ["kpi"] = {"Kofei"}, ["kpj"] = {"Karajá"}, ["kpk"] = {"Kpan"}, ["kpl"] = {"Kpala"}, ["kpm"] = {"Koho"}, ["kpn"] = {"Kepkiriwát"}, ["kpo"] = {"Ikposo"}, ["kpq"] = {"Korupun-Sela"}, ["kpr"] = {"Korafe-Yegha"}, ["kps"] = {"Tehit"}, ["kpt"] = {"Karata"}, ["kpu"] = {"Kafoa"}, ["kpv"] = {"Komi-Zyrian"}, ["kpw"] = {"Kobon"}, ["kpx"] = {"Mountain Koiali"}, ["kpy"] = {"Koryak"}, ["kpz"] = {"Kupsabiny"}, ["kqa"] = {"Mum"}, ["kqb"] = {"Kovai"}, ["kqc"] = {"Doromu-Koki"}, ["kqd"] = {"Koy Sanjaq Surat"}, ["kqe"] = {"Kalagan"}, ["kqf"] = {"Kakabai"}, ["kqg"] = {"Khe"}, ["kqh"] = {"Kisankasa"}, ["kqi"] = {"Koitabu"}, ["kqj"] = {"Koromira"}, ["kqk"] = {"Kotafon Gbe"}, ["kql"] = {"Kyenele"}, ["kqm"] = {"Khisa"}, ["kqn"] = {"Kaonde"}, ["kqo"] = {"Eastern Krahn"}, ["kqp"] = {"Kimré"}, ["kqq"] = {"Krenak"}, ["kqr"] = {"Kimaragang"}, ["kqs"] = {"Northern Kissi"}, ["kqt"] = {"Klias River Kadazan"}, ["kqu"] = {"Seroa"}, ["kqv"] = {"Okolod"}, ["kqw"] = {"Kandas"}, ["kqx"] = {"Mser"}, ["kqy"] = {"Koorete"}, ["kqz"] = {"Korana"}, ["kra"] = {"Kumhali"}, ["krb"] = {"Karkin"}, ["krc"] = {"Karachay-Balkar"}, ["krd"] = {"Kairui-Midiki"}, ["kre"] = {"Panará"}, ["krf"] = {"Koro (Vanuatu)"}, ["krh"] = {"Kurama"}, ["kri"] = {"Krio"}, ["krj"] = {"Kinaray-A"}, ["krk"] = {"Kerek"}, ["krl"] = {"Karelian"}, ["krn"] = {"Sapo"}, ["kro"] = {"Kru languages"}, ["krp"] = {"Korop"}, ["krr"] = {"Krung"}, ["krs"] = {"Gbaya (Sudan)"}, ["krt"] = {"Tumari Kanuri"}, ["kru"] = {"Kurukh"}, ["krv"] = {"Kavet"}, ["krw"] = {"Western Krahn"}, ["krx"] = {"Karon"}, ["kry"] = {"Kryts"}, ["krz"] = {"Sota Kanum"}, ["ksa"] = {"Shuwa-Zamani"}, ["ksb"] = {"Shambala"}, ["ksc"] = {"Southern Kalinga"}, ["ksd"] = {"Kuanua"}, ["kse"] = {"Kuni"}, ["ksf"] = {"Bafia"}, ["ksg"] = {"Kusaghe"}, ["ksh"] = {"Kölsch"}, ["ksi"] = {"Krisa", "I'saka"}, ["ksj"] = {"Uare"}, ["ksk"] = {"Kansa"}, ["ksl"] = {"Kumalu"}, ["ksm"] = {"Kumba"}, ["ksn"] = {"Kasiguranin"}, ["kso"] = {"Kofa"}, ["ksp"] = {"Kaba"}, ["ksq"] = {"Kwaami"}, ["ksr"] = {"Borong"}, ["kss"] = {"Southern Kisi"}, ["kst"] = {"Winyé"}, ["ksu"] = {"Khamyang"}, ["ksv"] = {"Kusu"}, ["ksw"] = {"S'gaw Karen"}, ["ksx"] = {"Kedang"}, ["ksy"] = {"Kharia Thar"}, ["ksz"] = {"Kodaku"}, ["kta"] = {"Katua"}, ["ktb"] = {"Kambaata"}, ["ktc"] = {"Kholok"}, ["ktd"] = {"Kokata", "Kukatha"}, ["kte"] = {"Nubri"}, ["ktf"] = {"Kwami"}, ["ktg"] = {"Kalkutung"}, ["kth"] = {"Karanga"}, ["kti"] = {"North Muyu"}, ["ktj"] = {"Plapo Krumen"}, ["ktk"] = {"Kaniet"}, ["ktl"] = {"Koroshi"}, ["ktm"] = {"Kurti"}, ["ktn"] = {"Karitiâna"}, ["kto"] = {"Kuot"}, ["ktp"] = {"Kaduo"}, ["ktq"] = {"Katabaga"}, ["kts"] = {"South Muyu"}, ["ktt"] = {"Ketum"}, ["ktu"] = {"Kituba (Democratic Republic of Congo)"}, ["ktv"] = {"Eastern Katu"}, ["ktw"] = {"Kato"}, ["ktx"] = {"Kaxararí"}, ["kty"] = {"Kango (Bas-Uélé District)"}, ["ktz"] = {"Juǀʼhoan", "Juǀʼhoansi"}, ["kub"] = {"Kutep"}, ["kuc"] = {"Kwinsu"}, ["kud"] = {"'Auhelawa"}, ["kue"] = {"Kuman (Papua New Guinea)"}, ["kuf"] = {"Western Katu"}, ["kug"] = {"Kupa"}, ["kuh"] = {"Kushi"}, ["kui"] = {"Kuikúro-Kalapálo", "Kalapalo"}, ["kuj"] = {"Kuria"}, ["kuk"] = {"Kepo'"}, ["kul"] = {"Kulere"}, ["kum"] = {"Kumyk"}, ["kun"] = {"Kunama"}, ["kuo"] = {"Kumukio"}, ["kup"] = {"Kunimaipa"}, ["kuq"] = {"Karipuna"}, ["kus"] = {"Kusaal"}, ["kut"] = {"Kutenai"}, ["kuu"] = {"Upper Kuskokwim"}, ["kuv"] = {"Kur"}, ["kuw"] = {"Kpagua"}, ["kux"] = {"Kukatja"}, ["kuy"] = {"Kuuku-Ya'u"}, ["kuz"] = {"Kunza"}, ["kva"] = {"Bagvalal"}, ["kvb"] = {"Kubu"}, ["kvc"] = {"Kove"}, ["kvd"] = {"Kui (Indonesia)"}, ["kve"] = {"Kalabakan"}, ["kvf"] = {"Kabalai"}, ["kvg"] = {"Kuni-Boazi"}, ["kvh"] = {"Komodo"}, ["kvi"] = {"Kwang"}, ["kvj"] = {"Psikye"}, ["kvk"] = {"Korean Sign Language"}, ["kvl"] = {"Kayaw"}, ["kvm"] = {"Kendem"}, ["kvn"] = {"Border Kuna"}, ["kvo"] = {"Dobel"}, ["kvp"] = {"Kompane"}, ["kvq"] = {"Geba Karen"}, ["kvr"] = {"Kerinci"}, ["kvt"] = {"Lahta Karen", "Lahta"}, ["kvu"] = {"Yinbaw Karen"}, ["kvv"] = {"Kola"}, ["kvw"] = {"Wersing"}, ["kvx"] = {"Parkari Koli"}, ["kvy"] = {"Yintale Karen", "Yintale"}, ["kvz"] = {"Tsakwambo", "Tsaukambo"}, ["kwa"] = {"Dâw"}, ["kwb"] = {"Kwa"}, ["kwc"] = {"Likwala"}, ["kwd"] = {"Kwaio"}, ["kwe"] = {"Kwerba"}, ["kwf"] = {"Kwara'ae"}, ["kwg"] = {"Sara Kaba Deme"}, ["kwh"] = {"Kowiai"}, ["kwi"] = {"Awa-Cuaiquer"}, ["kwj"] = {"Kwanga"}, ["kwk"] = {"Kwakiutl"}, ["kwl"] = {"Kofyar"}, ["kwm"] = {"Kwambi"}, ["kwn"] = {"Kwangali"}, ["kwo"] = {"Kwomtari"}, ["kwp"] = {"Kodia"}, ["kwr"] = {"Kwer"}, ["kws"] = {"Kwese"}, ["kwt"] = {"Kwesten"}, ["kwu"] = {"Kwakum"}, ["kwv"] = {"Sara Kaba Náà"}, ["kww"] = {"Kwinti"}, ["kwx"] = {"Khirwar"}, ["kwy"] = {"San Salvador Kongo"}, ["kwz"] = {"Kwadi"}, ["kxa"] = {"Kairiru"}, ["kxb"] = {"Krobu"}, ["kxc"] = {"Konso", "Khonso"}, ["kxd"] = {"Brunei"}, ["kxf"] = {"Manumanaw Karen", "Manumanaw"}, ["kxh"] = {"Karo (Ethiopia)"}, ["kxi"] = {"Keningau Murut"}, ["kxj"] = {"Kulfa"}, ["kxk"] = {"Zayein Karen"}, ["kxm"] = {"Northern Khmer"}, ["kxn"] = {"Kanowit-Tanjong Melanau"}, ["kxo"] = {"Kanoé"}, ["kxp"] = {"Wadiyara Koli"}, ["kxq"] = {"Smärky Kanum"}, ["kxr"] = {"Koro (Papua New Guinea)"}, ["kxs"] = {"Kangjia"}, ["kxt"] = {"Koiwat"}, ["kxv"] = {"Kuvi"}, ["kxw"] = {"Konai"}, ["kxx"] = {"Likuba"}, ["kxy"] = {"Kayong"}, ["kxz"] = {"Kerewo"}, ["kya"] = {"Kwaya"}, ["kyb"] = {"Butbut Kalinga"}, ["kyc"] = {"Kyaka"}, ["kyd"] = {"Karey"}, ["kye"] = {"Krache"}, ["kyf"] = {"Kouya"}, ["kyg"] = {"Keyagana"}, ["kyh"] = {"Karok"}, ["kyi"] = {"Kiput"}, ["kyj"] = {"Karao"}, ["kyk"] = {"Kamayo"}, ["kyl"] = {"Kalapuya"}, ["kym"] = {"Kpatili"}, ["kyn"] = {"Northern Binukidnon"}, ["kyo"] = {"Kelon"}, ["kyp"] = {"Kang"}, ["kyq"] = {"Kenga"}, ["kyr"] = {"Kuruáya"}, ["kys"] = {"Baram Kayan"}, ["kyt"] = {"Kayagar"}, ["kyu"] = {"Western Kayah"}, ["kyv"] = {"Kayort"}, ["kyw"] = {"Kudmali"}, ["kyx"] = {"Rapoisi"}, ["kyy"] = {"Kambaira"}, ["kyz"] = {"Kayabí"}, ["kza"] = {"Western Karaboro"}, ["kzb"] = {"Kaibobo"}, ["kzc"] = {"Bondoukou Kulango"}, ["kzd"] = {"Kadai"}, ["kze"] = {"Kosena"}, ["kzf"] = {"Da'a Kaili"}, ["kzg"] = {"Kikai"}, ["kzi"] = {"Kelabit"}, ["kzk"] = {"Kazukuru"}, ["kzl"] = {"Kayeli"}, ["kzm"] = {"Kais"}, ["kzn"] = {"Kokola"}, ["kzo"] = {"Kaningi"}, ["kzp"] = {"Kaidipang"}, ["kzq"] = {"Kaike"}, ["kzr"] = {"Karang"}, ["kzs"] = {"Sugut Dusun"}, ["kzu"] = {"Kayupulau"}, ["kzv"] = {"Komyandaret"}, ["kzw"] = {"Karirí-Xocó"}, ["kzx"] = {"Kamarian"}, ["kzy"] = {"Kango (Tshopo District)"}, ["kzz"] = {"Kalabra"}, ["laa"] = {"Southern Subanen"}, ["lab"] = {"Linear A"}, ["lac"] = {"Lacandon"}, ["lad"] = {"Ladino"}, ["lae"] = {"Pattani"}, ["laf"] = {"Lafofa"}, ["lag"] = {"Langi"}, ["lah"] = {"Lahnda"}, ["lai"] = {"Lambya"}, ["laj"] = {"Lango (Uganda)"}, ["lak"] = {"Laka (Nigeria)"}, ["lal"] = {"Lalia"}, ["lam"] = {"Lamba"}, ["lan"] = {"Laru"}, ["lap"] = {"Laka (Chad)"}, ["laq"] = {"Qabiao"}, ["lar"] = {"Larteh"}, ["las"] = {"Lama (Togo)"}, ["lau"] = {"Laba"}, ["law"] = {"Lauje"}, ["lax"] = {"Tiwa"}, ["lay"] = {"Lama Bai"}, ["laz"] = {"Aribwatsa"}, ["lbb"] = {"Label"}, ["lbc"] = {"Lakkia"}, ["lbe"] = {"Lak"}, ["lbf"] = {"Tinani"}, ["lbg"] = {"Laopang"}, ["lbi"] = {"La'bi"}, ["lbj"] = {"Ladakhi"}, ["lbk"] = {"Central Bontok"}, ["lbl"] = {"Libon Bikol"}, ["lbm"] = {"Lodhi"}, ["lbn"] = {"Rmeet"}, ["lbo"] = {"Laven"}, ["lbq"] = {"Wampar"}, ["lbr"] = {"Lohorung"}, ["lbs"] = {"Libyan Sign Language"}, ["lbt"] = {"Lachi"}, ["lbu"] = {"Labu"}, ["lbv"] = {"Lavatbura-Lamusong"}, ["lbw"] = {"Tolaki"}, ["lbx"] = {"Lawangan"}, ["lby"] = {"Lamalama", "Lamu-Lamu"}, ["lbz"] = {"Lardil"}, ["lcc"] = {"Legenyem"}, ["lcd"] = {"Lola"}, ["lce"] = {"Loncong", "Sekak"}, ["lcf"] = {"Lubu"}, ["lch"] = {"Luchazi"}, ["lcl"] = {"Lisela"}, ["lcm"] = {"Tungag"}, ["lcp"] = {"Western Lawa"}, ["lcq"] = {"Luhu"}, ["lcs"] = {"Lisabata-Nuniali"}, ["lda"] = {"Kla-Dan"}, ["ldb"] = {"Dũya"}, ["ldd"] = {"Luri"}, ["ldg"] = {"Lenyima"}, ["ldh"] = {"Lamja-Dengsa-Tola"}, ["ldi"] = {"Laari"}, ["ldj"] = {"Lemoro"}, ["ldk"] = {"Leelau"}, ["ldl"] = {"Kaan"}, ["ldm"] = {"Landoma"}, ["ldn"] = {"Láadan"}, ["ldo"] = {"Loo"}, ["ldp"] = {"Tso"}, ["ldq"] = {"Lufu"}, ["lea"] = {"Lega-Shabunda"}, ["leb"] = {"Lala-Bisa"}, ["lec"] = {"Leco"}, ["led"] = {"Lendu"}, ["lee"] = {"Lyélé"}, ["lef"] = {"Lelemi"}, ["leh"] = {"Lenje"}, ["lei"] = {"Lemio"}, ["lej"] = {"Lengola"}, ["lek"] = {"Leipon"}, ["lel"] = {"Lele (Democratic Republic of Congo)"}, ["lem"] = {"Nomaande"}, ["len"] = {"Lenca"}, ["leo"] = {"Leti (Cameroon)"}, ["lep"] = {"Lepcha"}, ["leq"] = {"Lembena"}, ["ler"] = {"Lenkau"}, ["les"] = {"Lese"}, ["let"] = {"Lesing-Gelimi", "Amio-Gelimi"}, ["leu"] = {"Kara (Papua New Guinea)"}, ["lev"] = {"Lamma"}, ["lew"] = {"Ledo Kaili"}, ["lex"] = {"Luang"}, ["ley"] = {"Lemolang"}, ["lez"] = {"Lezghian"}, ["lfa"] = {"Lefa"}, ["lfn"] = {"Lingua Franca Nova"}, ["lga"] = {"Lungga"}, ["lgb"] = {"Laghu"}, ["lgg"] = {"Lugbara"}, ["lgh"] = {"Laghuu"}, ["lgi"] = {"Lengilu"}, ["lgk"] = {"Lingarak", "Neverver"}, ["lgl"] = {"Wala"}, ["lgm"] = {"Lega-Mwenga"}, ["lgn"] = {"T'apo", "Opuuo"}, ["lgq"] = {"Logba"}, ["lgr"] = {"Lengo"}, ["lgt"] = {"Pahi"}, ["lgu"] = {"Longgu"}, ["lgz"] = {"Ligenza"}, ["lha"] = {"Laha (Viet Nam)"}, ["lhh"] = {"Laha (Indonesia)"}, ["lhi"] = {"Lahu Shi"}, ["lhl"] = {"Lahul Lohar"}, ["lhm"] = {"Lhomi"}, ["lhn"] = {"Lahanan"}, ["lhp"] = {"Lhokpu"}, ["lhs"] = {"Mlahsö"}, ["lht"] = {"Lo-Toga"}, ["lhu"] = {"Lahu"}, ["lia"] = {"West-Central Limba"}, ["lib"] = {"Likum"}, ["lic"] = {"Hlai"}, ["lid"] = {"Nyindrou"}, ["lie"] = {"Likila"}, ["lif"] = {"Limbu"}, ["lig"] = {"Ligbi"}, ["lih"] = {"Lihir"}, ["lij"] = {"Ligurian"}, ["lik"] = {"Lika"}, ["lil"] = {"Lillooet"}, ["lio"] = {"Liki"}, ["lip"] = {"Sekpele"}, ["liq"] = {"Libido"}, ["lir"] = {"Liberian English"}, ["lis"] = {"Lisu"}, ["liu"] = {"Logorik"}, ["liv"] = {"Liv"}, ["liw"] = {"Col"}, ["lix"] = {"Liabuku"}, ["liy"] = {"Banda-Bambari"}, ["liz"] = {"Libinza"}, ["lja"] = {"Golpa"}, ["lje"] = {"Rampi"}, ["lji"] = {"Laiyolo"}, ["ljl"] = {"Li'o"}, ["ljp"] = {"Lampung Api"}, ["ljw"] = {"Yirandali"}, ["ljx"] = {"Yuru"}, ["lka"] = {"Lakalei"}, ["lkb"] = {"Kabras", "Lukabaras"}, ["lkc"] = {"Kucong"}, ["lkd"] = {"Lakondê"}, ["lke"] = {"Kenyi"}, ["lkh"] = {"Lakha"}, ["lki"] = {"Laki"}, ["lkj"] = {"Remun"}, ["lkl"] = {"Laeko-Libuat"}, ["lkm"] = {"Kalaamaya"}, ["lkn"] = {"Lakon", "Vure"}, ["lko"] = {"Khayo", "Olukhayo"}, ["lkr"] = {"Päri"}, ["lks"] = {"Kisa", "Olushisa"}, ["lkt"] = {"Lakota"}, ["lku"] = {"Kungkari"}, ["lky"] = {"Lokoya"}, ["lla"] = {"Lala-Roba"}, ["llb"] = {"Lolo"}, ["llc"] = {"Lele (Guinea)"}, ["lld"] = {"Ladin"}, ["lle"] = {"Lele (Papua New Guinea)"}, ["llf"] = {"Hermit"}, ["llg"] = {"Lole"}, ["llh"] = {"Lamu"}, ["lli"] = {"Teke-Laali"}, ["llj"] = {"Ladji Ladji"}, ["llk"] = {"Lelak"}, ["lll"] = {"Lilau"}, ["llm"] = {"Lasalimu"}, ["lln"] = {"Lele (Chad)"}, ["llp"] = {"North Efate"}, ["llq"] = {"Lolak"}, ["lls"] = {"Lithuanian Sign Language"}, ["llu"] = {"Lau"}, ["llx"] = {"Lauan"}, ["lma"] = {"East Limba"}, ["lmb"] = {"Merei"}, ["lmc"] = {"Limilngan"}, ["lmd"] = {"Lumun"}, ["lme"] = {"Pévé"}, ["lmf"] = {"South Lembata"}, ["lmg"] = {"Lamogai"}, ["lmh"] = {"Lambichhong"}, ["lmi"] = {"Lombi"}, ["lmj"] = {"West Lembata"}, ["lmk"] = {"Lamkang"}, ["lml"] = {"Hano"}, ["lmn"] = {"Lambadi"}, ["lmo"] = {"Lombard"}, ["lmp"] = {"Limbum"}, ["lmq"] = {"Lamatuka"}, ["lmr"] = {"Lamalera"}, ["lmu"] = {"Lamenu"}, ["lmv"] = {"Lomaiviti"}, ["lmw"] = {"Lake Miwok"}, ["lmx"] = {"Laimbue"}, ["lmy"] = {"Lamboya"}, ["lna"] = {"Langbashe"}, ["lnb"] = {"Mbalanhu"}, ["lnd"] = {"Lundayeh", "Lun Bawang"}, ["lng"] = {"Langobardic"}, ["lnh"] = {"Lanoh"}, ["lni"] = {"Daantanai'"}, ["lnj"] = {"Leningitij"}, ["lnl"] = {"South Central Banda"}, ["lnm"] = {"Langam"}, ["lnn"] = {"Lorediakarkar"}, ["lno"] = {"Lango (South Sudan)"}, ["lns"] = {"Lamnso'"}, ["lnu"] = {"Longuda"}, ["lnw"] = {"Lanima"}, ["lnz"] = {"Lonzo"}, ["loa"] = {"Loloda"}, ["lob"] = {"Lobi"}, ["loc"] = {"Inonhan"}, ["loe"] = {"Saluan"}, ["lof"] = {"Logol"}, ["log"] = {"Logo"}, ["loh"] = {"Narim"}, ["loi"] = {"Loma (Côte d'Ivoire)"}, ["loj"] = {"Lou"}, ["lok"] = {"Loko"}, ["lol"] = {"Mongo"}, ["lom"] = {"Loma (Liberia)"}, ["lon"] = {"Malawi Lomwe"}, ["loo"] = {"Lombo"}, ["lop"] = {"Lopa"}, ["loq"] = {"Lobala"}, ["lor"] = {"Téén"}, ["los"] = {"Loniu"}, ["lot"] = {"Otuho"}, ["lou"] = {"Louisiana Creole"}, ["lov"] = {"Lopi"}, ["low"] = {"Tampias Lobu"}, ["lox"] = {"Loun"}, ["loy"] = {"Loke"}, ["loz"] = {"Lozi"}, ["lpa"] = {"Lelepa"}, ["lpe"] = {"Lepki"}, ["lpn"] = {"Long Phuri Naga"}, ["lpo"] = {"Lipo"}, ["lpx"] = {"Lopit"}, ["lra"] = {"Rara Bakati'"}, ["lrc"] = {"Northern Luri"}, ["lre"] = {"Laurentian"}, ["lrg"] = {"Laragia"}, ["lri"] = {"Marachi", "Olumarachi"}, ["lrk"] = {"Loarki"}, ["lrl"] = {"Lari"}, ["lrm"] = {"Marama", "Olumarama"}, ["lrn"] = {"Lorang"}, ["lro"] = {"Laro"}, ["lrr"] = {"Southern Yamphu"}, ["lrt"] = {"Larantuka Malay"}, ["lrv"] = {"Larevat"}, ["lrz"] = {"Lemerig"}, ["lsa"] = {"Lasgerdi"}, ["lsd"] = {"Lishana Deni"}, ["lse"] = {"Lusengo"}, ["lsh"] = {"Lish"}, ["lsi"] = {"Lashi"}, ["lsl"] = {"Latvian Sign Language"}, ["lsm"] = {"Saamia", "Olusamia"}, ["lsn"] = {"Tibetan Sign Language"}, ["lso"] = {"Laos Sign Language"}, ["lsp"] = {"Panamanian Sign Language", "Lengua de Señas Panameñas"}, ["lsr"] = {"Aruop"}, ["lss"] = {"Lasi"}, ["lst"] = {"Trinidad and Tobago Sign Language"}, ["lsv"] = {"Sivia Sign Language"}, ["lsy"] = {"Mauritian Sign Language"}, ["ltc"] = {"Late Middle Chinese"}, ["ltg"] = {"Latgalian"}, ["lth"] = {"Thur"}, ["lti"] = {"Leti (Indonesia)"}, ["ltn"] = {"Latundê"}, ["lto"] = {"Tsotso", "Olutsotso"}, ["lts"] = {"Tachoni", "Lutachoni"}, ["ltu"] = {"Latu"}, ["lua"] = {"Luba-Lulua"}, ["luc"] = {"Aringa"}, ["lud"] = {"Ludian"}, ["lue"] = {"Luvale"}, ["luf"] = {"Laua"}, ["lui"] = {"Luiseno"}, ["luj"] = {"Luna"}, ["luk"] = {"Lunanakha"}, ["lul"] = {"Olu'bo"}, ["lum"] = {"Luimbi"}, ["lun"] = {"Lunda"}, ["luo"] = {"Luo (Kenya and Tanzania)", "Dholuo"}, ["lup"] = {"Lumbu"}, ["luq"] = {"Lucumi"}, ["lur"] = {"Laura"}, ["lus"] = {"Lushai"}, ["lut"] = {"Lushootseed"}, ["luu"] = {"Lumba-Yakkha"}, ["luv"] = {"Luwati"}, ["luw"] = {"Luo (Cameroon)"}, ["luy"] = {"Luyia", "Oluluyia"}, ["luz"] = {"Southern Luri"}, ["lva"] = {"Maku'a"}, ["lvi"] = {"Lavi"}, ["lvk"] = {"Lavukaleve"}, ["lvs"] = {"Standard Latvian"}, ["lvu"] = {"Levuka"}, ["lwa"] = {"Lwalu"}, ["lwe"] = {"Lewo Eleng"}, ["lwg"] = {"Wanga", "Oluwanga"}, ["lwh"] = {"White Lachi"}, ["lwl"] = {"Eastern Lawa"}, ["lwm"] = {"Laomian"}, ["lwo"] = {"Luwo"}, ["lws"] = {"Malawian Sign Language"}, ["lwt"] = {"Lewotobi"}, ["lwu"] = {"Lawu"}, ["lww"] = {"Lewo"}, ["lya"] = {"Layakha"}, ["lyg"] = {"Lyngngam"}, ["lyn"] = {"Luyana"}, ["lzh"] = {"Literary Chinese"}, ["lzl"] = {"Litzlitz"}, ["lzn"] = {"Leinong Naga"}, ["lzz"] = {"Laz"}, ["maa"] = {"San Jerónimo Tecóatl Mazatec"}, ["mab"] = {"Yutanduchi Mixtec"}, ["mad"] = {"Madurese"}, ["mae"] = {"Bo-Rukul"}, ["maf"] = {"Mafa"}, ["mag"] = {"Magahi"}, ["mai"] = {"Maithili"}, ["maj"] = {"Jalapa De Díaz Mazatec"}, ["mak"] = {"Makasar"}, ["mam"] = {"Mam"}, ["man"] = {"Mandingo", "Manding"}, ["map"] = {"Austronesian languages"}, ["maq"] = {"Chiquihuitlán Mazatec"}, ["mas"] = {"Masai"}, ["mat"] = {"San Francisco Matlatzinca"}, ["mau"] = {"Huautla Mazatec"}, ["mav"] = {"Sateré-Mawé"}, ["maw"] = {"Mampruli"}, ["max"] = {"North Moluccan Malay"}, ["maz"] = {"Central Mazahua"}, ["mba"] = {"Higaonon"}, ["mbb"] = {"Western Bukidnon Manobo"}, ["mbc"] = {"Macushi"}, ["mbd"] = {"Dibabawon Manobo"}, ["mbe"] = {"Molale"}, ["mbf"] = {"Baba Malay"}, ["mbh"] = {"Mangseng"}, ["mbi"] = {"Ilianen Manobo"}, ["mbj"] = {"Nadëb"}, ["mbk"] = {"Malol"}, ["mbl"] = {"Maxakalí"}, ["mbm"] = {"Ombamba"}, ["mbn"] = {"Macaguán"}, ["mbo"] = {"Mbo (Cameroon)"}, ["mbp"] = {"Malayo"}, ["mbq"] = {"Maisin"}, ["mbr"] = {"Nukak Makú"}, ["mbs"] = {"Sarangani Manobo"}, ["mbt"] = {"Matigsalug Manobo"}, ["mbu"] = {"Mbula-Bwazza"}, ["mbv"] = {"Mbulungish"}, ["mbw"] = {"Maring"}, ["mbx"] = {"Mari (East Sepik Province)"}, ["mby"] = {"Memoni"}, ["mbz"] = {"Amoltepec Mixtec"}, ["mca"] = {"Maca"}, ["mcb"] = {"Machiguenga"}, ["mcc"] = {"Bitur"}, ["mcd"] = {"Sharanahua"}, ["mce"] = {"Itundujia Mixtec"}, ["mcf"] = {"Matsés"}, ["mcg"] = {"Mapoyo"}, ["mch"] = {"Maquiritari"}, ["mci"] = {"Mese"}, ["mcj"] = {"Mvanip"}, ["mck"] = {"Mbunda"}, ["mcl"] = {"Macaguaje"}, ["mcm"] = {"Malaccan Creole Portuguese"}, ["mcn"] = {"Masana"}, ["mco"] = {"Coatlán Mixe"}, ["mcp"] = {"Makaa"}, ["mcq"] = {"Ese"}, ["mcr"] = {"Menya"}, ["mcs"] = {"Mambai"}, ["mct"] = {"Mengisa"}, ["mcu"] = {"Cameroon Mambila"}, ["mcv"] = {"Minanibai"}, ["mcw"] = {"Mawa (Chad)"}, ["mcx"] = {"Mpiemo"}, ["mcy"] = {"South Watut"}, ["mcz"] = {"Mawan"}, ["mda"] = {"Mada (Nigeria)"}, ["mdb"] = {"Morigi"}, ["mdc"] = {"Male (Papua New Guinea)"}, ["mdd"] = {"Mbum"}, ["mde"] = {"Maba (Chad)"}, ["mdf"] = {"Moksha"}, ["mdg"] = {"Massalat"}, ["mdh"] = {"Maguindanaon"}, ["mdi"] = {"Mamvu"}, ["mdj"] = {"Mangbetu"}, ["mdk"] = {"Mangbutu"}, ["mdl"] = {"Maltese Sign Language"}, ["mdm"] = {"Mayogo"}, ["mdn"] = {"Mbati"}, ["mdp"] = {"Mbala"}, ["mdq"] = {"Mbole"}, ["mdr"] = {"Mandar"}, ["mds"] = {"Maria (Papua New Guinea)"}, ["mdt"] = {"Mbere"}, ["mdu"] = {"Mboko"}, ["mdv"] = {"Santa Lucía Monteverde Mixtec"}, ["mdw"] = {"Mbosi"}, ["mdx"] = {"Dizin"}, ["mdy"] = {"Male (Ethiopia)"}, ["mdz"] = {"Suruí Do Pará"}, ["mea"] = {"Menka"}, ["meb"] = {"Ikobi"}, ["mec"] = {"Marra"}, ["med"] = {"Melpa"}, ["mee"] = {"Mengen"}, ["mef"] = {"Megam"}, ["meh"] = {"Southwestern Tlaxiaco Mixtec"}, ["mei"] = {"Midob"}, ["mej"] = {"Meyah"}, ["mek"] = {"Mekeo"}, ["mel"] = {"Central Melanau"}, ["mem"] = {"Mangala"}, ["men"] = {"Mende (Sierra Leone)"}, ["meo"] = {"Kedah Malay"}, ["mep"] = {"Miriwoong"}, ["meq"] = {"Merey"}, ["mer"] = {"Meru"}, ["mes"] = {"Masmaje"}, ["met"] = {"Mato"}, ["meu"] = {"Motu"}, ["mev"] = {"Mano"}, ["mew"] = {"Maaka"}, ["mey"] = {"Hassaniyya"}, ["mez"] = {"Menominee"}, ["mfa"] = {"Pattani Malay"}, ["mfb"] = {"Bangka"}, ["mfc"] = {"Mba"}, ["mfd"] = {"Mendankwe-Nkwen"}, ["mfe"] = {"Morisyen"}, ["mff"] = {"Naki"}, ["mfg"] = {"Mogofin"}, ["mfh"] = {"Matal"}, ["mfi"] = {"Wandala"}, ["mfj"] = {"Mefele"}, ["mfk"] = {"North Mofu"}, ["mfl"] = {"Putai"}, ["mfm"] = {"Marghi South"}, ["mfn"] = {"Cross River Mbembe"}, ["mfo"] = {"Mbe"}, ["mfp"] = {"Makassar Malay"}, ["mfq"] = {"Moba"}, ["mfr"] = {"Marrithiyel"}, ["mfs"] = {"Mexican Sign Language"}, ["mft"] = {"Mokerang"}, ["mfu"] = {"Mbwela"}, ["mfv"] = {"Mandjak"}, ["mfw"] = {"Mulaha"}, ["mfx"] = {"Melo"}, ["mfy"] = {"Mayo"}, ["mfz"] = {"Mabaan"}, ["mga"] = {"Middle Irish (900-1200)"}, ["mgb"] = {"Mararit"}, ["mgc"] = {"Morokodo"}, ["mgd"] = {"Moru"}, ["mge"] = {"Mango"}, ["mgf"] = {"Maklew"}, ["mgg"] = {"Mpumpong"}, ["mgh"] = {"Makhuwa-Meetto"}, ["mgi"] = {"Lijili"}, ["mgj"] = {"Abureni"}, ["mgk"] = {"Mawes"}, ["mgl"] = {"Maleu-Kilenge"}, ["mgm"] = {"Mambae"}, ["mgn"] = {"Mbangi"}, ["mgo"] = {"Meta'"}, ["mgp"] = {"Eastern Magar"}, ["mgq"] = {"Malila"}, ["mgr"] = {"Mambwe-Lungu"}, ["mgs"] = {"Manda (Tanzania)"}, ["mgt"] = {"Mongol"}, ["mgu"] = {"Mailu"}, ["mgv"] = {"Matengo"}, ["mgw"] = {"Matumbi"}, ["mgy"] = {"Mbunga"}, ["mgz"] = {"Mbugwe"}, ["mha"] = {"Manda (India)"}, ["mhb"] = {"Mahongwe"}, ["mhc"] = {"Mocho"}, ["mhd"] = {"Mbugu"}, ["mhe"] = {"Besisi", "Mah Meri"}, ["mhf"] = {"Mamaa"}, ["mhg"] = {"Margu"}, ["mhi"] = {"Ma'di"}, ["mhj"] = {"Mogholi"}, ["mhk"] = {"Mungaka"}, ["mhl"] = {"Mauwake"}, ["mhm"] = {"Makhuwa-Moniga"}, ["mhn"] = {"Mócheno"}, ["mho"] = {"Mashi (Zambia)"}, ["mhp"] = {"Balinese Malay"}, ["mhq"] = {"Mandan"}, ["mhr"] = {"Eastern Mari"}, ["mhs"] = {"Buru (Indonesia)"}, ["mht"] = {"Mandahuaca"}, ["mhu"] = {"Digaro-Mishmi", "Darang Deng"}, ["mhw"] = {"Mbukushu"}, ["mhx"] = {"Maru", "Lhaovo"}, ["mhy"] = {"Ma'anyan"}, ["mhz"] = {"Mor (Mor Islands)"}, ["mia"] = {"Miami"}, ["mib"] = {"Atatláhuca Mixtec"}, ["mic"] = {"Mi'kmaq", "Micmac"}, ["mid"] = {"Mandaic"}, ["mie"] = {"Ocotepec Mixtec"}, ["mif"] = {"Mofu-Gudur"}, ["mig"] = {"San Miguel El Grande Mixtec"}, ["mih"] = {"Chayuco Mixtec"}, ["mii"] = {"Chigmecatitlán Mixtec"}, ["mij"] = {"Abar", "Mungbam"}, ["mik"] = {"Mikasuki"}, ["mil"] = {"Peñoles Mixtec"}, ["mim"] = {"Alacatlatzala Mixtec"}, ["min"] = {"Minangkabau"}, ["mio"] = {"Pinotepa Nacional Mixtec"}, ["mip"] = {"Apasco-Apoala Mixtec"}, ["miq"] = {"Mískito"}, ["mir"] = {"Isthmus Mixe"}, ["mis"] = {"Uncoded languages"}, ["mit"] = {"Southern Puebla Mixtec"}, ["miu"] = {"Cacaloxtepec Mixtec"}, ["miw"] = {"Akoye"}, ["mix"] = {"Mixtepec Mixtec"}, ["miy"] = {"Ayutla Mixtec"}, ["miz"] = {"Coatzospan Mixtec"}, ["mjb"] = {"Makalero"}, ["mjc"] = {"San Juan Colorado Mixtec"}, ["mjd"] = {"Northwest Maidu"}, ["mje"] = {"Muskum"}, ["mjg"] = {"Tu"}, ["mjh"] = {"Mwera (Nyasa)"}, ["mji"] = {"Kim Mun"}, ["mjj"] = {"Mawak"}, ["mjk"] = {"Matukar"}, ["mjl"] = {"Mandeali"}, ["mjm"] = {"Medebur"}, ["mjn"] = {"Ma (Papua New Guinea)"}, ["mjo"] = {"Malankuravan"}, ["mjp"] = {"Malapandaram"}, ["mjq"] = {"Malaryan"}, ["mjr"] = {"Malavedan"}, ["mjs"] = {"Miship"}, ["mjt"] = {"Sauria Paharia"}, ["mju"] = {"Manna-Dora"}, ["mjv"] = {"Mannan"}, ["mjw"] = {"Karbi"}, ["mjx"] = {"Mahali"}, ["mjy"] = {"Mahican"}, ["mjz"] = {"Majhi"}, ["mka"] = {"Mbre"}, ["mkb"] = {"Mal Paharia"}, ["mkc"] = {"Siliput"}, ["mke"] = {"Mawchi"}, ["mkf"] = {"Miya"}, ["mkg"] = {"Mak (China)"}, ["mkh"] = {"Mon-Khmer languages"}, ["mki"] = {"Dhatki"}, ["mkj"] = {"Mokilese"}, ["mkk"] = {"Byep"}, ["mkl"] = {"Mokole"}, ["mkm"] = {"Moklen"}, ["mkn"] = {"Kupang Malay"}, ["mko"] = {"Mingang Doso"}, ["mkp"] = {"Moikodi"}, ["mkq"] = {"Bay Miwok"}, ["mkr"] = {"Malas"}, ["mks"] = {"Silacayoapan Mixtec"}, ["mkt"] = {"Vamale"}, ["mku"] = {"Konyanka Maninka"}, ["mkv"] = {"Mafea"}, ["mkw"] = {"Kituba (Congo)"}, ["mkx"] = {"Kinamiging Manobo"}, ["mky"] = {"East Makian"}, ["mkz"] = {"Makasae"}, ["mla"] = {"Malo"}, ["mlb"] = {"Mbule"}, ["mlc"] = {"Cao Lan"}, ["mle"] = {"Manambu"}, ["mlf"] = {"Mal"}, ["mlh"] = {"Mape"}, ["mli"] = {"Malimpung"}, ["mlj"] = {"Miltu"}, ["mlk"] = {"Ilwana", "Kiwilwana"}, ["mll"] = {"Malua Bay"}, ["mlm"] = {"Mulam"}, ["mln"] = {"Malango"}, ["mlo"] = {"Mlomp"}, ["mlp"] = {"Bargam"}, ["mlq"] = {"Western Maninkakan"}, ["mlr"] = {"Vame"}, ["mls"] = {"Masalit"}, ["mlu"] = {"To'abaita"}, ["mlv"] = {"Motlav", "Mwotlap"}, ["mlw"] = {"Moloko"}, ["mlx"] = {"Malfaxal", "Naha'ai"}, ["mlz"] = {"Malaynon"}, ["mma"] = {"Mama"}, ["mmb"] = {"Momina"}, ["mmc"] = {"Michoacán Mazahua"}, ["mmd"] = {"Maonan"}, ["mme"] = {"Mae"}, ["mmf"] = {"Mundat"}, ["mmg"] = {"North Ambrym"}, ["mmh"] = {"Mehináku"}, ["mmi"] = {"Musar"}, ["mmj"] = {"Majhwar"}, ["mmk"] = {"Mukha-Dora"}, ["mml"] = {"Man Met"}, ["mmm"] = {"Maii"}, ["mmn"] = {"Mamanwa"}, ["mmo"] = {"Mangga Buang"}, ["mmp"] = {"Siawi"}, ["mmq"] = {"Musak"}, ["mmr"] = {"Western Xiangxi Miao"}, ["mmt"] = {"Malalamai"}, ["mmu"] = {"Mmaala"}, ["mmv"] = {"Miriti"}, ["mmw"] = {"Emae"}, ["mmx"] = {"Madak"}, ["mmy"] = {"Migaama"}, ["mmz"] = {"Mabaale"}, ["mna"] = {"Mbula"}, ["mnb"] = {"Muna"}, ["mnc"] = {"Manchu"}, ["mnd"] = {"Mondé"}, ["mne"] = {"Naba"}, ["mnf"] = {"Mundani"}, ["mng"] = {"Eastern Mnong"}, ["mnh"] = {"Mono (Democratic Republic of Congo)"}, ["mni"] = {"Manipuri"}, ["mnj"] = {"Munji"}, ["mnk"] = {"Mandinka"}, ["mnl"] = {"Tiale"}, ["mnm"] = {"Mapena"}, ["mnn"] = {"Southern Mnong"}, ["mno"] = {"Manobo languages"}, ["mnp"] = {"Min Bei Chinese"}, ["mnq"] = {"Minriq"}, ["mnr"] = {"Mono (USA)"}, ["mns"] = {"Mansi"}, ["mnu"] = {"Mer"}, ["mnv"] = {"Rennell-Bellona"}, ["mnw"] = {"Mon"}, ["mnx"] = {"Manikion"}, ["mny"] = {"Manyawa"}, ["mnz"] = {"Moni"}, ["moa"] = {"Mwan"}, ["moc"] = {"Mocoví"}, ["mod"] = {"Mobilian"}, ["moe"] = {"Innu", "Montagnais"}, ["mog"] = {"Mongondow"}, ["moh"] = {"Mohawk"}, ["moi"] = {"Mboi"}, ["moj"] = {"Monzombo"}, ["mok"] = {"Morori"}, ["mom"] = {"Mangue"}, ["moo"] = {"Monom"}, ["mop"] = {"Mopán Maya"}, ["moq"] = {"Mor (Bomberai Peninsula)"}, ["mor"] = {"Moro"}, ["mos"] = {"Mossi"}, ["mot"] = {"Barí"}, ["mou"] = {"Mogum"}, ["mov"] = {"Mohave"}, ["mow"] = {"Moi (Congo)"}, ["mox"] = {"Molima"}, ["moy"] = {"Shekkacho"}, ["moz"] = {"Mukulu", "Gergiko"}, ["mpa"] = {"Mpoto"}, ["mpb"] = {"Malak Malak", "Mullukmulluk"}, ["mpc"] = {"Mangarrayi"}, ["mpd"] = {"Machinere"}, ["mpe"] = {"Majang"}, ["mpg"] = {"Marba"}, ["mph"] = {"Maung"}, ["mpi"] = {"Mpade"}, ["mpj"] = {"Martu Wangka", "Wangkajunga"}, ["mpk"] = {"Mbara (Chad)"}, ["mpl"] = {"Middle Watut"}, ["mpm"] = {"Yosondúa Mixtec"}, ["mpn"] = {"Mindiri"}, ["mpo"] = {"Miu"}, ["mpp"] = {"Migabac"}, ["mpq"] = {"Matís"}, ["mpr"] = {"Vangunu"}, ["mps"] = {"Dadibi"}, ["mpt"] = {"Mian"}, ["mpu"] = {"Makuráp"}, ["mpv"] = {"Mungkip"}, ["mpw"] = {"Mapidian"}, ["mpx"] = {"Misima-Panaeati"}, ["mpy"] = {"Mapia"}, ["mpz"] = {"Mpi"}, ["mqa"] = {"Maba (Indonesia)"}, ["mqb"] = {"Mbuko"}, ["mqc"] = {"Mangole"}, ["mqe"] = {"Matepi"}, ["mqf"] = {"Momuna"}, ["mqg"] = {"Kota Bangun Kutai Malay"}, ["mqh"] = {"Tlazoyaltepec Mixtec"}, ["mqi"] = {"Mariri"}, ["mqj"] = {"Mamasa"}, ["mqk"] = {"Rajah Kabunsuwan Manobo"}, ["mql"] = {"Mbelime"}, ["mqm"] = {"South Marquesan"}, ["mqn"] = {"Moronene"}, ["mqo"] = {"Modole"}, ["mqp"] = {"Manipa"}, ["mqq"] = {"Minokok"}, ["mqr"] = {"Mander"}, ["mqs"] = {"West Makian"}, ["mqt"] = {"Mok"}, ["mqu"] = {"Mandari"}, ["mqv"] = {"Mosimo"}, ["mqw"] = {"Murupi"}, ["mqx"] = {"Mamuju"}, ["mqy"] = {"Manggarai"}, ["mqz"] = {"Pano"}, ["mra"] = {"Mlabri"}, ["mrb"] = {"Marino"}, ["mrc"] = {"Maricopa"}, ["mrd"] = {"Western Magar"}, ["mre"] = {"Martha's Vineyard Sign Language"}, ["mrf"] = {"Elseng"}, ["mrg"] = {"Mising"}, ["mrh"] = {"Mara Chin"}, ["mrj"] = {"Western Mari"}, ["mrk"] = {"Hmwaveke"}, ["mrl"] = {"Mortlockese"}, ["mrm"] = {"Merlav", "Mwerlap"}, ["mrn"] = {"Cheke Holo"}, ["mro"] = {"Mru"}, ["mrp"] = {"Morouas"}, ["mrq"] = {"North Marquesan"}, ["mrr"] = {"Maria (India)"}, ["mrs"] = {"Maragus"}, ["mrt"] = {"Marghi Central"}, ["mru"] = {"Mono (Cameroon)"}, ["mrv"] = {"Mangareva"}, ["mrw"] = {"Maranao"}, ["mrx"] = {"Maremgi", "Dineor"}, ["mry"] = {"Mandaya"}, ["mrz"] = {"Marind"}, ["msb"] = {"Masbatenyo"}, ["msc"] = {"Sankaran Maninka"}, ["msd"] = {"Yucatec Maya Sign Language"}, ["mse"] = {"Musey"}, ["msf"] = {"Mekwei"}, ["msg"] = {"Moraid"}, ["msh"] = {"Masikoro Malagasy"}, ["msi"] = {"Sabah Malay"}, ["msj"] = {"Ma (Democratic Republic of Congo)"}, ["msk"] = {"Mansaka"}, ["msl"] = {"Molof", "Poule"}, ["msm"] = {"Agusan Manobo"}, ["msn"] = {"Vurës"}, ["mso"] = {"Mombum"}, ["msp"] = {"Maritsauá"}, ["msq"] = {"Caac"}, ["msr"] = {"Mongolian Sign Language"}, ["mss"] = {"West Masela"}, ["msu"] = {"Musom"}, ["msv"] = {"Maslam"}, ["msw"] = {"Mansoanka"}, ["msx"] = {"Moresada"}, ["msy"] = {"Aruamu"}, ["msz"] = {"Momare"}, ["mta"] = {"Cotabato Manobo"}, ["mtb"] = {"Anyin Morofo"}, ["mtc"] = {"Munit"}, ["mtd"] = {"Mualang"}, ["mte"] = {"Mono (Solomon Islands)"}, ["mtf"] = {"Murik (Papua New Guinea)"}, ["mtg"] = {"Una"}, ["mth"] = {"Munggui"}, ["mti"] = {"Maiwa (Papua New Guinea)"}, ["mtj"] = {"Moskona"}, ["mtk"] = {"Mbe'"}, ["mtl"] = {"Montol"}, ["mtm"] = {"Mator"}, ["mtn"] = {"Matagalpa"}, ["mto"] = {"Totontepec Mixe"}, ["mtp"] = {"Wichí Lhamtés Nocten"}, ["mtq"] = {"Muong"}, ["mtr"] = {"Mewari"}, ["mts"] = {"Yora"}, ["mtt"] = {"Mota"}, ["mtu"] = {"Tututepec Mixtec"}, ["mtv"] = {"Asaro'o"}, ["mtw"] = {"Southern Binukidnon"}, ["mtx"] = {"Tidaá Mixtec"}, ["mty"] = {"Nabi"}, ["mua"] = {"Mundang"}, ["mub"] = {"Mubi"}, ["muc"] = {"Ajumbu"}, ["mud"] = {"Mednyj Aleut"}, ["mue"] = {"Media Lengua"}, ["mug"] = {"Musgu"}, ["muh"] = {"Mündü"}, ["mui"] = {"Musi"}, ["muj"] = {"Mabire"}, ["muk"] = {"Mugom"}, ["mul"] = {"Multiple languages"}, ["mum"] = {"Maiwala"}, ["mun"] = {"Munda languages"}, ["muo"] = {"Nyong"}, ["mup"] = {"Malvi"}, ["muq"] = {"Eastern Xiangxi Miao"}, ["mur"] = {"Murle"}, ["mus"] = {"Creek"}, ["mut"] = {"Western Muria"}, ["muu"] = {"Yaaku"}, ["muv"] = {"Muthuvan"}, ["mux"] = {"Bo-Ung"}, ["muy"] = {"Muyang"}, ["muz"] = {"Mursi"}, ["mva"] = {"Manam"}, ["mvb"] = {"Mattole"}, ["mvd"] = {"Mamboru"}, ["mve"] = {"Marwari (Pakistan)"}, ["mvf"] = {"Peripheral Mongolian"}, ["mvg"] = {"Yucuañe Mixtec"}, ["mvh"] = {"Mulgi"}, ["mvi"] = {"Miyako"}, ["mvk"] = {"Mekmek"}, ["mvl"] = {"Mbara (Australia)"}, ["mvm"] = {"Muya"}, ["mvn"] = {"Minaveha"}, ["mvo"] = {"Marovo"}, ["mvp"] = {"Duri"}, ["mvq"] = {"Moere"}, ["mvr"] = {"Marau"}, ["mvs"] = {"Massep"}, ["mvt"] = {"Mpotovoro"}, ["mvu"] = {"Marfa"}, ["mvv"] = {"Tagal Murut"}, ["mvw"] = {"Machinga"}, ["mvx"] = {"Meoswar"}, ["mvy"] = {"Indus Kohistani"}, ["mvz"] = {"Mesqan"}, ["mwa"] = {"Mwatebu"}, ["mwb"] = {"Juwal"}, ["mwc"] = {"Are"}, ["mwe"] = {"Mwera (Chimwera)"}, ["mwf"] = {"Murrinh-Patha"}, ["mwg"] = {"Aiklep"}, ["mwh"] = {"Mouk-Aria"}, ["mwi"] = {"Labo", "Ninde"}, ["mwk"] = {"Kita Maninkakan"}, ["mwl"] = {"Mirandese"}, ["mwm"] = {"Sar"}, ["mwn"] = {"Nyamwanga"}, ["mwo"] = {"Central Maewo"}, ["mwp"] = {"Kala Lagaw Ya"}, ["mwq"] = {"Mün Chin"}, ["mwr"] = {"Marwari"}, ["mws"] = {"Mwimbi-Muthambi"}, ["mwt"] = {"Moken"}, ["mwu"] = {"Mittu"}, ["mwv"] = {"Mentawai"}, ["mww"] = {"Hmong Daw"}, ["mwz"] = {"Moingi"}, ["mxa"] = {"Northwest Oaxaca Mixtec"}, ["mxb"] = {"Tezoatlán Mixtec"}, ["mxc"] = {"Manyika"}, ["mxd"] = {"Modang"}, ["mxe"] = {"Mele-Fila"}, ["mxf"] = {"Malgbe"}, ["mxg"] = {"Mbangala"}, ["mxh"] = {"Mvuba"}, ["mxi"] = {"Mozarabic"}, ["mxj"] = {"Miju-Mishmi", "Geman Deng"}, ["mxk"] = {"Monumbo"}, ["mxl"] = {"Maxi Gbe"}, ["mxm"] = {"Meramera"}, ["mxn"] = {"Moi (Indonesia)"}, ["mxo"] = {"Mbowe"}, ["mxp"] = {"Tlahuitoltepec Mixe"}, ["mxq"] = {"Juquila Mixe"}, ["mxr"] = {"Murik (Malaysia)"}, ["mxs"] = {"Huitepec Mixtec"}, ["mxt"] = {"Jamiltepec Mixtec"}, ["mxu"] = {"Mada (Cameroon)"}, ["mxv"] = {"Metlatónoc Mixtec"}, ["mxw"] = {"Namo"}, ["mxx"] = {"Mahou", "Mawukakan"}, ["mxy"] = {"Southeastern Nochixtlán Mixtec"}, ["mxz"] = {"Central Masela"}, ["myb"] = {"Mbay"}, ["myc"] = {"Mayeka"}, ["mye"] = {"Myene"}, ["myf"] = {"Bambassi"}, ["myg"] = {"Manta"}, ["myh"] = {"Makah"}, ["myj"] = {"Mangayat"}, ["myk"] = {"Mamara Senoufo"}, ["myl"] = {"Moma"}, ["mym"] = {"Me'en"}, ["myn"] = {"Mayan languages"}, ["myo"] = {"Anfillo"}, ["myp"] = {"Pirahã"}, ["myr"] = {"Muniche"}, ["mys"] = {"Mesmes"}, ["myu"] = {"Mundurukú"}, ["myv"] = {"Erzya"}, ["myw"] = {"Muyuw"}, ["myx"] = {"Masaaba"}, ["myy"] = {"Macuna"}, ["myz"] = {"Classical Mandaic"}, ["mza"] = {"Santa María Zacatepec Mixtec"}, ["mzb"] = {"Tumzabt"}, ["mzc"] = {"Madagascar Sign Language"}, ["mzd"] = {"Malimba"}, ["mze"] = {"Morawa"}, ["mzg"] = {"Monastic Sign Language"}, ["mzh"] = {"Wichí Lhamtés Güisnay"}, ["mzi"] = {"Ixcatlán Mazatec"}, ["mzj"] = {"Manya"}, ["mzk"] = {"Nigeria Mambila"}, ["mzl"] = {"Mazatlán Mixe"}, ["mzm"] = {"Mumuye"}, ["mzn"] = {"Mazanderani"}, ["mzo"] = {"Matipuhy"}, ["mzp"] = {"Movima"}, ["mzq"] = {"Mori Atas"}, ["mzr"] = {"Marúbo"}, ["mzs"] = {"Macanese"}, ["mzt"] = {"Mintil"}, ["mzu"] = {"Inapang"}, ["mzv"] = {"Manza"}, ["mzw"] = {"Deg"}, ["mzx"] = {"Mawayana"}, ["mzy"] = {"Mozambican Sign Language"}, ["mzz"] = {"Maiadomu"}, ["naa"] = {"Namla"}, ["nab"] = {"Southern Nambikuára"}, ["nac"] = {"Narak"}, ["nae"] = {"Naka'ela"}, ["naf"] = {"Nabak"}, ["nag"] = {"Naga Pidgin"}, ["nah"] = {"Nahuatl languages"}, ["nai"] = {"North American Indian languages"}, ["naj"] = {"Nalu"}, ["nak"] = {"Nakanai"}, ["nal"] = {"Nalik"}, ["nam"] = {"Ngan'gityemerri"}, ["nan"] = {"Min Nan Chinese"}, ["nao"] = {"Naaba"}, ["nap"] = {"Neapolitan"}, ["naq"] = {"Khoekhoe", "Nama (Namibia)"}, ["nar"] = {"Iguta"}, ["nas"] = {"Naasioi"}, ["nat"] = {"Ca̱hungwa̱rya̱", "Hungworo"}, ["naw"] = {"Nawuri"}, ["nax"] = {"Nakwi"}, ["nay"] = {"Ngarrindjeri"}, ["naz"] = {"Coatepec Nahuatl"}, ["nba"] = {"Nyemba"}, ["nbb"] = {"Ndoe"}, ["nbc"] = {"Chang Naga"}, ["nbd"] = {"Ngbinda"}, ["nbe"] = {"Konyak Naga"}, ["nbg"] = {"Nagarchal"}, ["nbh"] = {"Ngamo"}, ["nbi"] = {"Mao Naga"}, ["nbj"] = {"Ngarinyman"}, ["nbk"] = {"Nake"}, ["nbm"] = {"Ngbaka Ma'bo"}, ["nbn"] = {"Kuri"}, ["nbo"] = {"Nkukoli"}, ["nbp"] = {"Nnam"}, ["nbq"] = {"Nggem"}, ["nbr"] = {"Numana"}, ["nbs"] = {"Namibian Sign Language"}, ["nbt"] = {"Na"}, ["nbu"] = {"Rongmei Naga"}, ["nbv"] = {"Ngamambo"}, ["nbw"] = {"Southern Ngbandi"}, ["nby"] = {"Ningera"}, ["nca"] = {"Iyo"}, ["ncb"] = {"Central Nicobarese"}, ["ncc"] = {"Ponam"}, ["ncd"] = {"Nachering"}, ["nce"] = {"Yale"}, ["ncf"] = {"Notsi"}, ["ncg"] = {"Nisga'a"}, ["nch"] = {"Central Huasteca Nahuatl"}, ["nci"] = {"Classical Nahuatl"}, ["ncj"] = {"Northern Puebla Nahuatl"}, ["nck"] = {"Na-kara"}, ["ncl"] = {"Michoacán Nahuatl"}, ["ncm"] = {"Nambo"}, ["ncn"] = {"Nauna"}, ["nco"] = {"Sibe"}, ["ncq"] = {"Northern Katang"}, ["ncr"] = {"Ncane"}, ["ncs"] = {"Nicaraguan Sign Language"}, ["nct"] = {"Chothe Naga"}, ["ncu"] = {"Chumburung"}, ["ncx"] = {"Central Puebla Nahuatl"}, ["ncz"] = {"Natchez"}, ["nda"] = {"Ndasa"}, ["ndb"] = {"Kenswei Nsei"}, ["ndc"] = {"Ndau"}, ["ndd"] = {"Nde-Nsele-Nta"}, ["ndf"] = {"Nadruvian"}, ["ndg"] = {"Ndengereko"}, ["ndh"] = {"Ndali"}, ["ndi"] = {"Samba Leko"}, ["ndj"] = {"Ndamba"}, ["ndk"] = {"Ndaka"}, ["ndl"] = {"Ndolo"}, ["ndm"] = {"Ndam"}, ["ndn"] = {"Ngundi"}, ["ndp"] = {"Ndo"}, ["ndq"] = {"Ndombe"}, ["ndr"] = {"Ndoola"}, ["nds"] = {"Low German", "Low Saxon"}, ["ndt"] = {"Ndunga"}, ["ndu"] = {"Dugun"}, ["ndv"] = {"Ndut"}, ["ndw"] = {"Ndobo"}, ["ndx"] = {"Nduga"}, ["ndy"] = {"Lutos"}, ["ndz"] = {"Ndogo"}, ["nea"] = {"Eastern Ngad'a"}, ["neb"] = {"Toura (Côte d'Ivoire)"}, ["nec"] = {"Nedebang"}, ["ned"] = {"Nde-Gbite"}, ["nee"] = {"Nêlêmwa-Nixumwak"}, ["nef"] = {"Nefamese"}, ["neg"] = {"Negidal"}, ["neh"] = {"Nyenkha"}, ["nei"] = {"Neo-Hittite"}, ["nej"] = {"Neko"}, ["nek"] = {"Neku"}, ["nem"] = {"Nemi"}, ["nen"] = {"Nengone"}, ["neo"] = {"Ná-Meo"}, ["neq"] = {"North Central Mixe"}, ["ner"] = {"Yahadian"}, ["nes"] = {"Bhoti Kinnauri"}, ["net"] = {"Nete"}, ["neu"] = {"Neo"}, ["nev"] = {"Nyaheun"}, ["new"] = {"Newari", "Nepal Bhasa"}, ["nex"] = {"Neme"}, ["ney"] = {"Neyo"}, ["nez"] = {"Nez Perce"}, ["nfa"] = {"Dhao"}, ["nfd"] = {"Ahwai"}, ["nfl"] = {"Ayiwo", "Äiwoo"}, ["nfr"] = {"Nafaanra"}, ["nfu"] = {"Mfumte"}, ["nga"] = {"Ngbaka"}, ["ngb"] = {"Northern Ngbandi"}, ["ngc"] = {"Ngombe (Democratic Republic of Congo)"}, ["ngd"] = {"Ngando (Central African Republic)"}, ["nge"] = {"Ngemba"}, ["ngf"] = {"Trans-New Guinea languages"}, ["ngg"] = {"Ngbaka Manza"}, ["ngh"] = {"Nǁng"}, ["ngi"] = {"Ngizim"}, ["ngj"] = {"Ngie"}, ["ngk"] = {"Dalabon"}, ["ngl"] = {"Lomwe"}, ["ngm"] = {"Ngatik Men's Creole"}, ["ngn"] = {"Ngwo"}, ["ngo"] = {"Ngoni"}, ["ngp"] = {"Ngulu"}, ["ngq"] = {"Ngurimi", "Ngoreme"}, ["ngr"] = {"Engdewu"}, ["ngs"] = {"Gvoko"}, ["ngt"] = {"Kriang", "Ngeq"}, ["ngu"] = {"Guerrero Nahuatl"}, ["ngv"] = {"Nagumi"}, ["ngw"] = {"Ngwaba"}, ["ngx"] = {"Nggwahyi"}, ["ngy"] = {"Tibea"}, ["ngz"] = {"Ngungwel"}, ["nha"] = {"Nhanda"}, ["nhb"] = {"Beng"}, ["nhc"] = {"Tabasco Nahuatl"}, ["nhd"] = {"Chiripá", "Ava Guaraní"}, ["nhe"] = {"Eastern Huasteca Nahuatl"}, ["nhf"] = {"Nhuwala"}, ["nhg"] = {"Tetelcingo Nahuatl"}, ["nhh"] = {"Nahari"}, ["nhi"] = {"Zacatlán-Ahuacatlán-Tepetzintla Nahuatl"}, ["nhk"] = {"Isthmus-Cosoleacaque Nahuatl"}, ["nhm"] = {"Morelos Nahuatl"}, ["nhn"] = {"Central Nahuatl"}, ["nho"] = {"Takuu"}, ["nhp"] = {"Isthmus-Pajapan Nahuatl"}, ["nhq"] = {"Huaxcaleca Nahuatl"}, ["nhr"] = {"Naro"}, ["nht"] = {"Ometepec Nahuatl"}, ["nhu"] = {"Noone"}, ["nhv"] = {"Temascaltepec Nahuatl"}, ["nhw"] = {"Western Huasteca Nahuatl"}, ["nhx"] = {"Isthmus-Mecayapan Nahuatl"}, ["nhy"] = {"Northern Oaxaca Nahuatl"}, ["nhz"] = {"Santa María La Alta Nahuatl"}, ["nia"] = {"Nias"}, ["nib"] = {"Nakame"}, ["nic"] = {"Niger-Kordofanian languages"}, ["nid"] = {"Ngandi"}, ["nie"] = {"Niellim"}, ["nif"] = {"Nek"}, ["nig"] = {"Ngalakgan"}, ["nih"] = {"Nyiha (Tanzania)"}, ["nii"] = {"Nii"}, ["nij"] = {"Ngaju"}, ["nik"] = {"Southern Nicobarese"}, ["nil"] = {"Nila"}, ["nim"] = {"Nilamba"}, ["nin"] = {"Ninzo"}, ["nio"] = {"Nganasan"}, ["niq"] = {"Nandi"}, ["nir"] = {"Nimboran"}, ["nis"] = {"Nimi"}, ["nit"] = {"Southeastern Kolami"}, ["niu"] = {"Niuean"}, ["niv"] = {"Gilyak"}, ["niw"] = {"Nimo"}, ["nix"] = {"Hema"}, ["niy"] = {"Ngiti"}, ["niz"] = {"Ningil"}, ["nja"] = {"Nzanyi"}, ["njb"] = {"Nocte Naga"}, ["njd"] = {"Ndonde Hamba"}, ["njh"] = {"Lotha Naga"}, ["nji"] = {"Gudanji"}, ["njj"] = {"Njen"}, ["njl"] = {"Njalgulgule"}, ["njm"] = {"Angami Naga"}, ["njn"] = {"Liangmai Naga"}, ["njo"] = {"Ao Naga"}, ["njr"] = {"Njerep"}, ["njs"] = {"Nisa"}, ["njt"] = {"Ndyuka-Trio Pidgin"}, ["nju"] = {"Ngadjunmaya"}, ["njx"] = {"Kunyi"}, ["njy"] = {"Njyem"}, ["njz"] = {"Nyishi"}, ["nka"] = {"Nkoya"}, ["nkb"] = {"Khoibu Naga"}, ["nkc"] = {"Nkongho"}, ["nkd"] = {"Koireng"}, ["nke"] = {"Duke"}, ["nkf"] = {"Inpui Naga"}, ["nkg"] = {"Nekgini"}, ["nkh"] = {"Khezha Naga"}, ["nki"] = {"Thangal Naga"}, ["nkj"] = {"Nakai"}, ["nkk"] = {"Nokuku"}, ["nkm"] = {"Namat"}, ["nkn"] = {"Nkangala"}, ["nko"] = {"Nkonya"}, ["nkp"] = {"Niuatoputapu"}, ["nkq"] = {"Nkami"}, ["nkr"] = {"Nukuoro"}, ["nks"] = {"North Asmat"}, ["nkt"] = {"Nyika (Tanzania)"}, ["nku"] = {"Bouna Kulango"}, ["nkv"] = {"Nyika (Malawi and Zambia)"}, ["nkw"] = {"Nkutu"}, ["nkx"] = {"Nkoroo"}, ["nkz"] = {"Nkari"}, ["nla"] = {"Ngombale"}, ["nlc"] = {"Nalca"}, ["nle"] = {"East Nyala"}, ["nlg"] = {"Gela"}, ["nli"] = {"Grangali"}, ["nlj"] = {"Nyali"}, ["nlk"] = {"Ninia Yali"}, ["nll"] = {"Nihali"}, ["nlm"] = {"Mankiyali"}, ["nlo"] = {"Ngul"}, ["nlq"] = {"Lao Naga"}, ["nlu"] = {"Nchumbulu"}, ["nlv"] = {"Orizaba Nahuatl"}, ["nlw"] = {"Walangama"}, ["nlx"] = {"Nahali"}, ["nly"] = {"Nyamal"}, ["nlz"] = {"Nalögo"}, ["nma"] = {"Maram Naga"}, ["nmb"] = {"Big Nambas", "V'ënen Taut"}, ["nmc"] = {"Ngam"}, ["nmd"] = {"Ndumu"}, ["nme"] = {"Mzieme Naga"}, ["nmf"] = {"Tangkhul Naga (India)"}, ["nmg"] = {"Kwasio"}, ["nmh"] = {"Monsang Naga"}, ["nmi"] = {"Nyam"}, ["nmj"] = {"Ngombe (Central African Republic)"}, ["nmk"] = {"Namakura"}, ["nml"] = {"Ndemli"}, ["nmm"] = {"Manangba"}, ["nmn"] = {"ǃXóõ"}, ["nmo"] = {"Moyon Naga"}, ["nmp"] = {"Nimanbur"}, ["nmq"] = {"Nambya"}, ["nmr"] = {"Nimbari"}, ["nms"] = {"Letemboi"}, ["nmt"] = {"Namonuito"}, ["nmu"] = {"Northeast Maidu"}, ["nmv"] = {"Ngamini"}, ["nmw"] = {"Nimoa", "Rifao"}, ["nmx"] = {"Nama (Papua New Guinea)"}, ["nmy"] = {"Namuyi"}, ["nmz"] = {"Nawdm"}, ["nna"] = {"Nyangumarta"}, ["nnb"] = {"Nande"}, ["nnc"] = {"Nancere"}, ["nnd"] = {"West Ambae"}, ["nne"] = {"Ngandyera"}, ["nnf"] = {"Ngaing"}, ["nng"] = {"Maring Naga"}, ["nnh"] = {"Ngiemboon"}, ["nni"] = {"North Nuaulu"}, ["nnj"] = {"Nyangatom"}, ["nnk"] = {"Nankina"}, ["nnl"] = {"Northern Rengma Naga"}, ["nnm"] = {"Namia"}, ["nnn"] = {"Ngete"}, ["nnp"] = {"Wancho Naga"}, ["nnq"] = {"Ngindo"}, ["nnr"] = {"Narungga"}, ["nnt"] = {"Nanticoke"}, ["nnu"] = {"Dwang"}, ["nnv"] = {"Nugunu (Australia)"}, ["nnw"] = {"Southern Nuni"}, ["nny"] = {"Nyangga"}, ["nnz"] = {"Nda'nda'"}, ["noa"] = {"Woun Meu"}, ["noc"] = {"Nuk"}, ["nod"] = {"Northern Thai"}, ["noe"] = {"Nimadi"}, ["nof"] = {"Nomane"}, ["nog"] = {"Nogai"}, ["noh"] = {"Nomu"}, ["noi"] = {"Noiri"}, ["noj"] = {"Nonuya"}, ["nok"] = {"Nooksack"}, ["nol"] = {"Nomlaki"}, ["nom"] = {"Nocamán"}, ["non"] = {"Old Norse"}, ["nop"] = {"Numanggang"}, ["noq"] = {"Ngongo"}, ["nos"] = {"Eastern Nisu"}, ["not"] = {"Nomatsiguenga"}, ["nou"] = {"Ewage-Notu"}, ["nov"] = {"Novial"}, ["now"] = {"Nyambo"}, ["noy"] = {"Noy"}, ["noz"] = {"Nayi"}, ["npa"] = {"Nar Phu"}, ["npb"] = {"Nupbikha"}, ["npg"] = {"Ponyo-Gongwang Naga"}, ["nph"] = {"Phom Naga"}, ["npi"] = {"Nepali (individual language)"}, ["npl"] = {"Southeastern Puebla Nahuatl"}, ["npn"] = {"Mondropolon"}, ["npo"] = {"Pochuri Naga"}, ["nps"] = {"Nipsan"}, ["npu"] = {"Puimei Naga"}, ["npx"] = {"Noipx"}, ["npy"] = {"Napu"}, ["nqg"] = {"Southern Nago"}, ["nqk"] = {"Kura Ede Nago"}, ["nql"] = {"Ngendelengo"}, ["nqm"] = {"Ndom"}, ["nqn"] = {"Nen"}, ["nqo"] = {"N'Ko", "N’Ko"}, ["nqq"] = {"Kyan-Karyaw Naga"}, ["nqy"] = {"Akyaung Ari Naga"}, ["nra"] = {"Ngom"}, ["nrb"] = {"Nara"}, ["nrc"] = {"Noric"}, ["nre"] = {"Southern Rengma Naga"}, ["nrf"] = {"Jèrriais", "Guernésiais"}, ["nrg"] = {"Narango"}, ["nri"] = {"Chokri Naga"}, ["nrk"] = {"Ngarla"}, ["nrl"] = {"Ngarluma"}, ["nrm"] = {"Narom"}, ["nrn"] = {"Norn"}, ["nrp"] = {"North Picene"}, ["nrr"] = {"Norra", "Nora"}, ["nrt"] = {"Northern Kalapuya"}, ["nru"] = {"Narua"}, ["nrx"] = {"Ngurmbur"}, ["nrz"] = {"Lala"}, ["nsa"] = {"Sangtam Naga"}, ["nsb"] = {"Lower Nossob"}, ["nsc"] = {"Nshi"}, ["nsd"] = {"Southern Nisu"}, ["nse"] = {"Nsenga"}, ["nsf"] = {"Northwestern Nisu"}, ["nsg"] = {"Ngasa"}, ["nsh"] = {"Ngoshie"}, ["nsi"] = {"Nigerian Sign Language"}, ["nsk"] = {"Naskapi"}, ["nsl"] = {"Norwegian Sign Language"}, ["nsm"] = {"Sumi Naga"}, ["nsn"] = {"Nehan"}, ["nso"] = {"Pedi", "Northern Sotho", "Sepedi"}, ["nsp"] = {"Nepalese Sign Language"}, ["nsq"] = {"Northern Sierra Miwok"}, ["nsr"] = {"Maritime Sign Language"}, ["nss"] = {"Nali"}, ["nst"] = {"Tase Naga"}, ["nsu"] = {"Sierra Negra Nahuatl"}, ["nsv"] = {"Southwestern Nisu"}, ["nsw"] = {"Navut"}, ["nsx"] = {"Nsongo"}, ["nsy"] = {"Nasal"}, ["nsz"] = {"Nisenan"}, ["ntd"] = {"Northern Tidung"}, ["nte"] = {"Nathembo"}, ["ntg"] = {"Ngantangarra"}, ["nti"] = {"Natioro"}, ["ntj"] = {"Ngaanyatjarra"}, ["ntk"] = {"Ikoma-Nata-Isenye"}, ["ntm"] = {"Nateni"}, ["nto"] = {"Ntomba"}, ["ntp"] = {"Northern Tepehuan"}, ["ntr"] = {"Delo"}, ["ntu"] = {"Natügu"}, ["ntw"] = {"Nottoway"}, ["ntx"] = {"Tangkhul Naga (Myanmar)"}, ["nty"] = {"Mantsi"}, ["ntz"] = {"Natanzi"}, ["nua"] = {"Yuanga"}, ["nub"] = {"Nubian languages"}, ["nuc"] = {"Nukuini"}, ["nud"] = {"Ngala"}, ["nue"] = {"Ngundu"}, ["nuf"] = {"Nusu"}, ["nug"] = {"Nungali"}, ["nuh"] = {"Ndunda"}, ["nui"] = {"Ngumbi"}, ["nuj"] = {"Nyole"}, ["nuk"] = {"Nuu-chah-nulth", "Nuuchahnulth"}, ["nul"] = {"Nusa Laut"}, ["num"] = {"Niuafo'ou"}, ["nun"] = {"Anong"}, ["nuo"] = {"Nguôn"}, ["nup"] = {"Nupe-Nupe-Tako"}, ["nuq"] = {"Nukumanu"}, ["nur"] = {"Nukuria"}, ["nus"] = {"Nuer"}, ["nut"] = {"Nung (Viet Nam)"}, ["nuu"] = {"Ngbundu"}, ["nuv"] = {"Northern Nuni"}, ["nuw"] = {"Nguluwan"}, ["nux"] = {"Mehek"}, ["nuy"] = {"Nunggubuyu"}, ["nuz"] = {"Tlamacazapa Nahuatl"}, ["nvh"] = {"Nasarian"}, ["nvm"] = {"Namiae"}, ["nvo"] = {"Nyokon"}, ["nwa"] = {"Nawathinehena"}, ["nwb"] = {"Nyabwa"}, ["nwc"] = {"Classical Newari", "Classical Nepal Bhasa", "Old Newari"}, ["nwe"] = {"Ngwe"}, ["nwg"] = {"Ngayawung"}, ["nwi"] = {"Southwest Tanna"}, ["nwm"] = {"Nyamusa-Molo"}, ["nwo"] = {"Nauo"}, ["nwr"] = {"Nawaru"}, ["nwx"] = {"Middle Newar"}, ["nwy"] = {"Nottoway-Meherrin"}, ["nxa"] = {"Nauete"}, ["nxd"] = {"Ngando (Democratic Republic of Congo)"}, ["nxe"] = {"Nage"}, ["nxg"] = {"Ngad'a"}, ["nxi"] = {"Nindi"}, ["nxk"] = {"Koki Naga"}, ["nxl"] = {"South Nuaulu"}, ["nxm"] = {"Numidian"}, ["nxn"] = {"Ngawun"}, ["nxo"] = {"Ndambomo"}, ["nxq"] = {"Naxi"}, ["nxr"] = {"Ninggerum"}, ["nxx"] = {"Nafri"}, ["nyb"] = {"Nyangbo"}, ["nyc"] = {"Nyanga-li"}, ["nyd"] = {"Nyore", "Olunyole"}, ["nye"] = {"Nyengo"}, ["nyf"] = {"Giryama", "Kigiryama"}, ["nyg"] = {"Nyindu"}, ["nyh"] = {"Nyikina"}, ["nyi"] = {"Ama (Sudan)"}, ["nyj"] = {"Nyanga"}, ["nyk"] = {"Nyaneka"}, ["nyl"] = {"Nyeu"}, ["nym"] = {"Nyamwezi"}, ["nyn"] = {"Nyankole"}, ["nyo"] = {"Nyoro"}, ["nyp"] = {"Nyang'i"}, ["nyq"] = {"Nayini"}, ["nyr"] = {"Nyiha (Malawi)"}, ["nys"] = {"Nyungar"}, ["nyt"] = {"Nyawaygi"}, ["nyu"] = {"Nyungwe"}, ["nyv"] = {"Nyulnyul"}, ["nyw"] = {"Nyaw"}, ["nyx"] = {"Nganyaywana"}, ["nyy"] = {"Nyakyusa-Ngonde"}, ["nza"] = {"Tigon Mbembe"}, ["nzb"] = {"Njebi"}, ["nzd"] = {"Nzadi"}, ["nzi"] = {"Nzima"}, ["nzk"] = {"Nzakara"}, ["nzm"] = {"Zeme Naga"}, ["nzs"] = {"New Zealand Sign Language"}, ["nzu"] = {"Teke-Nzikou"}, ["nzy"] = {"Nzakambay"}, ["nzz"] = {"Nanga Dama Dogon"}, ["oaa"] = {"Orok"}, ["oac"] = {"Oroch"}, ["oar"] = {"Old Aramaic (up to 700 BCE)", "Ancient Aramaic (up to 700 BCE)"}, ["oav"] = {"Old Avar"}, ["obi"] = {"Obispeño"}, ["obk"] = {"Southern Bontok"}, ["obl"] = {"Oblo"}, ["obm"] = {"Moabite"}, ["obo"] = {"Obo Manobo"}, ["obr"] = {"Old Burmese"}, ["obt"] = {"Old Breton"}, ["obu"] = {"Obulom"}, ["oca"] = {"Ocaina"}, ["och"] = {"Old Chinese"}, ["oco"] = {"Old Cornish"}, ["ocu"] = {"Atzingo Matlatzinca"}, ["oda"] = {"Odut"}, ["odk"] = {"Od"}, ["odt"] = {"Old Dutch"}, ["odu"] = {"Odual"}, ["ofo"] = {"Ofo"}, ["ofs"] = {"Old Frisian"}, ["ofu"] = {"Efutop"}, ["ogb"] = {"Ogbia"}, ["ogc"] = {"Ogbah"}, ["oge"] = {"Old Georgian"}, ["ogg"] = {"Ogbogolo"}, ["ogo"] = {"Khana"}, ["ogu"] = {"Ogbronuagum"}, ["oht"] = {"Old Hittite"}, ["ohu"] = {"Old Hungarian"}, ["oia"] = {"Oirata"}, ["oin"] = {"Inebu One"}, ["ojb"] = {"Northwestern Ojibwa"}, ["ojc"] = {"Central Ojibwa"}, ["ojg"] = {"Eastern Ojibwa"}, ["ojp"] = {"Old Japanese"}, ["ojs"] = {"Severn Ojibwa"}, ["ojv"] = {"Ontong Java"}, ["ojw"] = {"Western Ojibwa"}, ["oka"] = {"Okanagan"}, ["okb"] = {"Okobo"}, ["okd"] = {"Okodia"}, ["oke"] = {"Okpe (Southwestern Edo)"}, ["okg"] = {"Koko Babangk"}, ["okh"] = {"Koresh-e Rostam"}, ["oki"] = {"Okiek"}, ["okj"] = {"Oko-Juwoi"}, ["okk"] = {"Kwamtim One"}, ["okl"] = {"Old Kentish Sign Language"}, ["okm"] = {"Middle Korean (10th-16th cent.)"}, ["okn"] = {"Oki-No-Erabu"}, ["oko"] = {"Old Korean (3rd-9th cent.)"}, ["okr"] = {"Kirike"}, ["oks"] = {"Oko-Eni-Osayen"}, ["oku"] = {"Oku"}, ["okv"] = {"Orokaiva"}, ["okx"] = {"Okpe (Northwestern Edo)"}, ["ola"] = {"Walungge"}, ["old"] = {"Mochi"}, ["ole"] = {"Olekha"}, ["olk"] = {"Olkol"}, ["olm"] = {"Oloma"}, ["olo"] = {"Livvi"}, ["olr"] = {"Olrat"}, ["olt"] = {"Old Lithuanian"}, ["olu"] = {"Kuvale"}, ["oma"] = {"Omaha-Ponca"}, ["omb"] = {"East Ambae"}, ["omc"] = {"Mochica"}, ["omg"] = {"Omagua"}, ["omi"] = {"Omi"}, ["omk"] = {"Omok"}, ["oml"] = {"Ombo"}, ["omn"] = {"Minoan"}, ["omo"] = {"Utarmbung"}, ["omp"] = {"Old Manipuri"}, ["omq"] = {"Oto-Manguean languages"}, ["omr"] = {"Old Marathi"}, ["omt"] = {"Omotik"}, ["omu"] = {"Omurano"}, ["omv"] = {"Omotic languages"}, ["omw"] = {"South Tairora"}, ["omx"] = {"Old Mon"}, ["ona"] = {"Ona"}, ["onb"] = {"Lingao"}, ["one"] = {"Oneida"}, ["ong"] = {"Olo"}, ["oni"] = {"Onin"}, ["onj"] = {"Onjob"}, ["onk"] = {"Kabore One"}, ["onn"] = {"Onobasulu"}, ["ono"] = {"Onondaga"}, ["onp"] = {"Sartang"}, ["onr"] = {"Northern One"}, ["ons"] = {"Ono"}, ["ont"] = {"Ontenu"}, ["onu"] = {"Unua"}, ["onw"] = {"Old Nubian"}, ["onx"] = {"Onin Based Pidgin"}, ["ood"] = {"Tohono O'odham"}, ["oog"] = {"Ong"}, ["oon"] = {"Önge"}, ["oor"] = {"Oorlams"}, ["oos"] = {"Old Ossetic"}, ["opa"] = {"Okpamheri"}, ["opk"] = {"Kopkaka"}, ["opm"] = {"Oksapmin"}, ["opo"] = {"Opao"}, ["opt"] = {"Opata"}, ["opy"] = {"Ofayé"}, ["ora"] = {"Oroha"}, ["orc"] = {"Orma"}, ["ore"] = {"Orejón"}, ["org"] = {"Oring"}, ["orh"] = {"Oroqen"}, ["orn"] = {"Orang Kanaq"}, ["oro"] = {"Orokolo"}, ["orr"] = {"Oruma"}, ["ors"] = {"Orang Seletar"}, ["ort"] = {"Adivasi Oriya"}, ["oru"] = {"Ormuri"}, ["orv"] = {"Old Russian"}, ["orw"] = {"Oro Win"}, ["orx"] = {"Oro"}, ["ory"] = {"Odia (individual language)", "Oriya (individual language)"}, ["orz"] = {"Ormu"}, ["osa"] = {"Osage"}, ["osc"] = {"Oscan"}, ["osi"] = {"Osing"}, ["oso"] = {"Ososo"}, ["osp"] = {"Old Spanish"}, ["ost"] = {"Osatu"}, ["osu"] = {"Southern One"}, ["osx"] = {"Old Saxon"}, ["ota"] = {"Ottoman Turkish (1500-1928)"}, ["otb"] = {"Old Tibetan"}, ["otd"] = {"Ot Danum"}, ["ote"] = {"Mezquital Otomi"}, ["oti"] = {"Oti"}, ["otk"] = {"Old Turkish"}, ["otl"] = {"Tilapa Otomi"}, ["otm"] = {"Eastern Highland Otomi"}, ["otn"] = {"Tenango Otomi"}, ["oto"] = {"Otomian languages"}, ["otq"] = {"Querétaro Otomi"}, ["otr"] = {"Otoro"}, ["ots"] = {"Estado de México Otomi"}, ["ott"] = {"Temoaya Otomi"}, ["otu"] = {"Otuke"}, ["otw"] = {"Ottawa"}, ["otx"] = {"Texcatepec Otomi"}, ["oty"] = {"Old Tamil"}, ["otz"] = {"Ixtenco Otomi"}, ["oua"] = {"Tagargrent"}, ["oub"] = {"Glio-Oubi"}, ["oue"] = {"Oune"}, ["oui"] = {"Old Uighur"}, ["oum"] = {"Ouma"}, ["ovd"] = {"Elfdalian", "Övdalian"}, ["owi"] = {"Owiniga"}, ["owl"] = {"Old Welsh"}, ["oyb"] = {"Oy"}, ["oyd"] = {"Oyda"}, ["oym"] = {"Wayampi"}, ["oyy"] = {"Oya'oya"}, ["ozm"] = {"Koonzime"}, ["paa"] = {"Papuan languages"}, ["pab"] = {"Parecís"}, ["pac"] = {"Pacoh"}, ["pad"] = {"Paumarí"}, ["pae"] = {"Pagibete"}, ["paf"] = {"Paranawát"}, ["pag"] = {"Pangasinan"}, ["pah"] = {"Tenharim"}, ["pai"] = {"Pe"}, ["pak"] = {"Parakanã"}, ["pal"] = {"Pahlavi"}, ["pam"] = {"Pampanga", "Kapampangan"}, ["pao"] = {"Northern Paiute"}, ["pap"] = {"Papiamento"}, ["paq"] = {"Parya"}, ["par"] = {"Panamint", "Timbisha"}, ["pas"] = {"Papasena"}, ["pat"] = {"Papitalai"}, ["pau"] = {"Palauan"}, ["pav"] = {"Pakaásnovos"}, ["paw"] = {"Pawnee"}, ["pax"] = {"Pankararé"}, ["pay"] = {"Pech"}, ["paz"] = {"Pankararú"}, ["pbb"] = {"Páez"}, ["pbc"] = {"Patamona"}, ["pbe"] = {"Mezontla Popoloca"}, ["pbf"] = {"Coyotepec Popoloca"}, ["pbg"] = {"Paraujano"}, ["pbh"] = {"E'ñapa Woromaipu"}, ["pbi"] = {"Parkwa"}, ["pbl"] = {"Mak (Nigeria)"}, ["pbm"] = {"Puebla Mazatec"}, ["pbn"] = {"Kpasam"}, ["pbo"] = {"Papel"}, ["pbp"] = {"Badyara"}, ["pbr"] = {"Pangwa"}, ["pbs"] = {"Central Pame"}, ["pbt"] = {"Southern Pashto"}, ["pbu"] = {"Northern Pashto"}, ["pbv"] = {"Pnar"}, ["pby"] = {"Pyu (Papua New Guinea)"}, ["pca"] = {"Santa Inés Ahuatempan Popoloca"}, ["pcb"] = {"Pear"}, ["pcc"] = {"Bouyei"}, ["pcd"] = {"Picard"}, ["pce"] = {"Ruching Palaung"}, ["pcf"] = {"Paliyan"}, ["pcg"] = {"Paniya"}, ["pch"] = {"Pardhan"}, ["pci"] = {"Duruwa"}, ["pcj"] = {"Parenga"}, ["pck"] = {"Paite Chin"}, ["pcl"] = {"Pardhi"}, ["pcm"] = {"Nigerian Pidgin"}, ["pcn"] = {"Piti"}, ["pcp"] = {"Pacahuara"}, ["pcw"] = {"Pyapun"}, ["pda"] = {"Anam"}, ["pdc"] = {"Pennsylvania German"}, ["pdi"] = {"Pa Di"}, ["pdn"] = {"Podena", "Fedan"}, ["pdo"] = {"Padoe"}, ["pdt"] = {"Plautdietsch"}, ["pdu"] = {"Kayan"}, ["pea"] = {"Peranakan Indonesian"}, ["peb"] = {"Eastern Pomo"}, ["ped"] = {"Mala (Papua New Guinea)"}, ["pee"] = {"Taje"}, ["pef"] = {"Northeastern Pomo"}, ["peg"] = {"Pengo"}, ["peh"] = {"Bonan"}, ["pei"] = {"Chichimeca-Jonaz"}, ["pej"] = {"Northern Pomo"}, ["pek"] = {"Penchal"}, ["pel"] = {"Pekal"}, ["pem"] = {"Phende"}, ["peo"] = {"Old Persian (ca. 600-400 B.C.)"}, ["pep"] = {"Kunja"}, ["peq"] = {"Southern Pomo"}, ["pes"] = {"Iranian Persian"}, ["pev"] = {"Pémono"}, ["pex"] = {"Petats"}, ["pey"] = {"Petjo"}, ["pez"] = {"Eastern Penan"}, ["pfa"] = {"Pááfang"}, ["pfe"] = {"Pere"}, ["pfl"] = {"Pfaelzisch"}, ["pga"] = {"Sudanese Creole Arabic"}, ["pgd"] = {"Gāndhārī"}, ["pgg"] = {"Pangwali"}, ["pgi"] = {"Pagi"}, ["pgk"] = {"Rerep"}, ["pgl"] = {"Primitive Irish"}, ["pgn"] = {"Paelignian"}, ["pgs"] = {"Pangseng"}, ["pgu"] = {"Pagu"}, ["pgz"] = {"Papua New Guinean Sign Language"}, ["pha"] = {"Pa-Hng"}, ["phd"] = {"Phudagi"}, ["phg"] = {"Phuong"}, ["phh"] = {"Phukha"}, ["phi"] = {"Philippine languages"}, ["phk"] = {"Phake"}, ["phl"] = {"Phalura", "Palula"}, ["phm"] = {"Phimbi"}, ["phn"] = {"Phoenician"}, ["pho"] = {"Phunoi"}, ["phq"] = {"Phana'"}, ["phr"] = {"Pahari-Potwari"}, ["pht"] = {"Phu Thai"}, ["phu"] = {"Phuan"}, ["phv"] = {"Pahlavani"}, ["phw"] = {"Phangduwali"}, ["pia"] = {"Pima Bajo"}, ["pib"] = {"Yine"}, ["pic"] = {"Pinji"}, ["pid"] = {"Piaroa"}, ["pie"] = {"Piro"}, ["pif"] = {"Pingelapese"}, ["pig"] = {"Pisabo"}, ["pih"] = {"Pitcairn-Norfolk"}, ["pii"] = {"Pini"}, ["pij"] = {"Pijao"}, ["pil"] = {"Yom"}, ["pim"] = {"Powhatan"}, ["pin"] = {"Piame"}, ["pio"] = {"Piapoco"}, ["pip"] = {"Pero"}, ["pir"] = {"Piratapuyo"}, ["pis"] = {"Pijin"}, ["pit"] = {"Pitta Pitta"}, ["piu"] = {"Pintupi-Luritja"}, ["piv"] = {"Pileni", "Vaeakau-Taumako"}, ["piw"] = {"Pimbwe"}, ["pix"] = {"Piu"}, ["piy"] = {"Piya-Kwonci"}, ["piz"] = {"Pije"}, ["pjt"] = {"Pitjantjatjara"}, ["pka"] = {"Ardhamāgadhī Prākrit"}, ["pkb"] = {"Pokomo", "Kipfokomo"}, ["pkc"] = {"Paekche"}, ["pkg"] = {"Pak-Tong"}, ["pkh"] = {"Pankhu"}, ["pkn"] = {"Pakanha"}, ["pko"] = {"Pökoot"}, ["pkp"] = {"Pukapuka"}, ["pkr"] = {"Attapady Kurumba"}, ["pks"] = {"Pakistan Sign Language"}, ["pkt"] = {"Maleng"}, ["pku"] = {"Paku"}, ["pla"] = {"Miani"}, ["plb"] = {"Polonombauk"}, ["plc"] = {"Central Palawano"}, ["pld"] = {"Polari"}, ["ple"] = {"Palu'e"}, ["plf"] = {"Central Malayo-Polynesian languages"}, ["plg"] = {"Pilagá"}, ["plh"] = {"Paulohi"}, ["plj"] = {"Polci"}, ["plk"] = {"Kohistani Shina"}, ["pll"] = {"Shwe Palaung"}, ["pln"] = {"Palenquero"}, ["plo"] = {"Oluta Popoluca"}, ["plq"] = {"Palaic"}, ["plr"] = {"Palaka Senoufo"}, ["pls"] = {"San Marcos Tlacoyalco Popoloca", "San Marcos Tlalcoyalco Popoloca"}, ["plt"] = {"Plateau Malagasy"}, ["plu"] = {"Palikúr"}, ["plv"] = {"Southwest Palawano"}, ["plw"] = {"Brooke's Point Palawano"}, ["ply"] = {"Bolyu"}, ["plz"] = {"Paluan"}, ["pma"] = {"Paama"}, ["pmb"] = {"Pambia"}, ["pmd"] = {"Pallanganmiddang"}, ["pme"] = {"Pwaamei"}, ["pmf"] = {"Pamona"}, ["pmh"] = {"Māhārāṣṭri Prākrit"}, ["pmi"] = {"Northern Pumi"}, ["pmj"] = {"Southern Pumi"}, ["pmk"] = {"Pamlico"}, ["pml"] = {"Lingua Franca"}, ["pmm"] = {"Pomo"}, ["pmn"] = {"Pam"}, ["pmo"] = {"Pom"}, ["pmq"] = {"Northern Pame"}, ["pmr"] = {"Paynamar"}, ["pms"] = {"Piemontese"}, ["pmt"] = {"Tuamotuan"}, ["pmw"] = {"Plains Miwok"}, ["pmx"] = {"Poumei Naga"}, ["pmy"] = {"Papuan Malay"}, ["pmz"] = {"Southern Pame"}, ["pna"] = {"Punan Bah-Biau"}, ["pnb"] = {"Western Panjabi"}, ["pnc"] = {"Pannei"}, ["pnd"] = {"Mpinda"}, ["pne"] = {"Western Penan"}, ["png"] = {"Pongu"}, ["pnh"] = {"Penrhyn"}, ["pni"] = {"Aoheng"}, ["pnj"] = {"Pinjarup"}, ["pnk"] = {"Paunaka"}, ["pnl"] = {"Paleni"}, ["pnm"] = {"Punan Batu 1"}, ["pnn"] = {"Pinai-Hagahai"}, ["pno"] = {"Panobo"}, ["pnp"] = {"Pancana"}, ["pnq"] = {"Pana (Burkina Faso)"}, ["pnr"] = {"Panim"}, ["pns"] = {"Ponosakan"}, ["pnt"] = {"Pontic"}, ["pnu"] = {"Jiongnai Bunu"}, ["pnv"] = {"Pinigura"}, ["pnw"] = {"Banyjima", "Panytyima"}, ["pnx"] = {"Phong-Kniang"}, ["pny"] = {"Pinyin"}, ["pnz"] = {"Pana (Central African Republic)"}, ["poc"] = {"Poqomam"}, ["poe"] = {"San Juan Atzingo Popoloca"}, ["pof"] = {"Poke"}, ["pog"] = {"Potiguára"}, ["poh"] = {"Poqomchi'"}, ["poi"] = {"Highland Popoluca"}, ["pok"] = {"Pokangá"}, ["pom"] = {"Southeastern Pomo"}, ["pon"] = {"Pohnpeian"}, ["poo"] = {"Central Pomo"}, ["pop"] = {"Pwapwâ"}, ["poq"] = {"Texistepec Popoluca"}, ["pos"] = {"Sayula Popoluca"}, ["pot"] = {"Potawatomi"}, ["pov"] = {"Upper Guinea Crioulo"}, ["pow"] = {"San Felipe Otlaltepec Popoloca"}, ["pox"] = {"Polabian"}, ["poy"] = {"Pogolo"}, ["poz"] = {"Malayo-Polynesian languages"}, ["ppe"] = {"Papi"}, ["ppi"] = {"Paipai"}, ["ppk"] = {"Uma"}, ["ppl"] = {"Pipil", "Nicarao"}, ["ppm"] = {"Papuma"}, ["ppn"] = {"Papapana"}, ["ppo"] = {"Folopa"}, ["ppp"] = {"Pelende"}, ["ppq"] = {"Pei"}, ["pps"] = {"San Luís Temalacayuca Popoloca"}, ["ppt"] = {"Pare"}, ["ppu"] = {"Papora"}, ["pqa"] = {"Pa'a"}, ["pqe"] = {"Eastern Malayo-Polynesian languages"}, ["pqm"] = {"Malecite-Passamaquoddy"}, ["pqw"] = {"Western Malayo-Polynesian languages"}, ["pra"] = {"Prakrit languages"}, ["prc"] = {"Parachi"}, ["prd"] = {"Parsi-Dari"}, ["pre"] = {"Principense"}, ["prf"] = {"Paranan"}, ["prg"] = {"Prussian"}, ["prh"] = {"Porohanon"}, ["pri"] = {"Paicî"}, ["prk"] = {"Parauk"}, ["prl"] = {"Peruvian Sign Language"}, ["prm"] = {"Kibiri"}, ["prn"] = {"Prasuni"}, ["pro"] = {"Old Provençal (to 1500)", "Old Occitan (to 1500)"}, ["prp"] = {"Parsi"}, ["prq"] = {"Ashéninka Perené"}, ["prr"] = {"Puri"}, ["prs"] = {"Dari", "Afghan Persian"}, ["prt"] = {"Phai"}, ["pru"] = {"Puragi"}, ["prw"] = {"Parawen"}, ["prx"] = {"Purik"}, ["prz"] = {"Providencia Sign Language"}, ["psa"] = {"Asue Awyu"}, ["psc"] = {"Persian Sign Language"}, ["psd"] = {"Plains Indian Sign Language"}, ["pse"] = {"Central Malay"}, ["psg"] = {"Penang Sign Language"}, ["psh"] = {"Southwest Pashai", "Southwest Pashayi"}, ["psi"] = {"Southeast Pashai", "Southeast Pashayi"}, ["psl"] = {"Puerto Rican Sign Language"}, ["psm"] = {"Pauserna"}, ["psn"] = {"Panasuan"}, ["pso"] = {"Polish Sign Language"}, ["psp"] = {"Philippine Sign Language"}, ["psq"] = {"Pasi"}, ["psr"] = {"Portuguese Sign Language"}, ["pss"] = {"Kaulong"}, ["pst"] = {"Central Pashto"}, ["psu"] = {"Sauraseni Prākrit"}, ["psw"] = {"Port Sandwich"}, ["psy"] = {"Piscataway"}, ["pta"] = {"Pai Tavytera"}, ["pth"] = {"Pataxó Hã-Ha-Hãe"}, ["pti"] = {"Pindiini", "Wangkatha"}, ["ptn"] = {"Patani"}, ["pto"] = {"Zo'é"}, ["ptp"] = {"Patep"}, ["ptq"] = {"Pattapu"}, ["ptr"] = {"Piamatsina"}, ["ptt"] = {"Enrekang"}, ["ptu"] = {"Bambam"}, ["ptv"] = {"Port Vato"}, ["ptw"] = {"Pentlatch"}, ["pty"] = {"Pathiya"}, ["pua"] = {"Western Highland Purepecha"}, ["pub"] = {"Purum"}, ["puc"] = {"Punan Merap"}, ["pud"] = {"Punan Aput"}, ["pue"] = {"Puelche"}, ["puf"] = {"Punan Merah"}, ["pug"] = {"Phuie"}, ["pui"] = {"Puinave"}, ["puj"] = {"Punan Tubu"}, ["pum"] = {"Puma"}, ["puo"] = {"Puoc"}, ["pup"] = {"Pulabu"}, ["puq"] = {"Puquina"}, ["pur"] = {"Puruborá"}, ["put"] = {"Putoh"}, ["puu"] = {"Punu"}, ["puw"] = {"Puluwatese"}, ["pux"] = {"Puare"}, ["puy"] = {"Purisimeño"}, ["pwa"] = {"Pawaia"}, ["pwb"] = {"Panawa"}, ["pwg"] = {"Gapapaiwa"}, ["pwi"] = {"Patwin"}, ["pwm"] = {"Molbog"}, ["pwn"] = {"Paiwan"}, ["pwo"] = {"Pwo Western Karen"}, ["pwr"] = {"Powari"}, ["pww"] = {"Pwo Northern Karen"}, ["pxm"] = {"Quetzaltepec Mixe"}, ["pye"] = {"Pye Krumen"}, ["pym"] = {"Fyam"}, ["pyn"] = {"Poyanáwa"}, ["pys"] = {"Paraguayan Sign Language", "Lengua de Señas del Paraguay"}, ["pyu"] = {"Puyuma"}, ["pyx"] = {"Pyu (Myanmar)"}, ["pyy"] = {"Pyen"}, ["pzn"] = {"Para Naga"}, ["qua"] = {"Quapaw"}, ["qub"] = {"Huallaga Huánuco Quechua"}, ["quc"] = {"K'iche'", "Quiché"}, ["qud"] = {"Calderón Highland Quichua"}, ["quf"] = {"Lambayeque Quechua"}, ["qug"] = {"Chimborazo Highland Quichua"}, ["quh"] = {"South Bolivian Quechua"}, ["qui"] = {"Quileute"}, ["quk"] = {"Chachapoyas Quechua"}, ["qul"] = {"North Bolivian Quechua"}, ["qum"] = {"Sipacapense"}, ["qun"] = {"Quinault"}, ["qup"] = {"Southern Pastaza Quechua"}, ["quq"] = {"Quinqui"}, ["qur"] = {"Yanahuanca Pasco Quechua"}, ["qus"] = {"Santiago del Estero Quichua"}, ["quv"] = {"Sacapulteco"}, ["quw"] = {"Tena Lowland Quichua"}, ["qux"] = {"Yauyos Quechua"}, ["quy"] = {"Ayacucho Quechua"}, ["quz"] = {"Cusco Quechua"}, ["qva"] = {"Ambo-Pasco Quechua"}, ["qvc"] = {"Cajamarca Quechua"}, ["qve"] = {"Eastern Apurímac Quechua"}, ["qvh"] = {"Huamalíes-Dos de Mayo Huánuco Quechua"}, ["qvi"] = {"Imbabura Highland Quichua"}, ["qvj"] = {"Loja Highland Quichua"}, ["qvl"] = {"Cajatambo North Lima Quechua"}, ["qvm"] = {"Margos-Yarowilca-Lauricocha Quechua"}, ["qvn"] = {"North Junín Quechua"}, ["qvo"] = {"Napo Lowland Quechua"}, ["qvp"] = {"Pacaraos Quechua"}, ["qvs"] = {"San Martín Quechua"}, ["qvw"] = {"Huaylla Wanca Quechua"}, ["qvy"] = {"Queyu"}, ["qvz"] = {"Northern Pastaza Quichua"}, ["qwa"] = {"Corongo Ancash Quechua"}, ["qwc"] = {"Classical Quechua"}, ["qwe"] = {"Quechuan (family)"}, ["qwh"] = {"Huaylas Ancash Quechua"}, ["qwm"] = {"Kuman (Russia)"}, ["qws"] = {"Sihuas Ancash Quechua"}, ["qwt"] = {"Kwalhioqua-Tlatskanai"}, ["qxa"] = {"Chiquián Ancash Quechua"}, ["qxc"] = {"Chincha Quechua"}, ["qxh"] = {"Panao Huánuco Quechua"}, ["qxl"] = {"Salasaca Highland Quichua"}, ["qxn"] = {"Northern Conchucos Ancash Quechua"}, ["qxo"] = {"Southern Conchucos Ancash Quechua"}, ["qxp"] = {"Puno Quechua"}, ["qxq"] = {"Qashqa'i"}, ["qxr"] = {"Cañar Highland Quichua"}, ["qxs"] = {"Southern Qiang"}, ["qxt"] = {"Santa Ana de Tusi Pasco Quechua"}, ["qxu"] = {"Arequipa-La Unión Quechua"}, ["qxw"] = {"Jauja Wanca Quechua"}, ["qya"] = {"Quenya"}, ["qyp"] = {"Quiripi"}, ["raa"] = {"Dungmali"}, ["rab"] = {"Camling"}, ["rac"] = {"Rasawa"}, ["rad"] = {"Rade"}, ["raf"] = {"Western Meohang"}, ["rag"] = {"Logooli", "Lulogooli"}, ["rah"] = {"Rabha"}, ["rai"] = {"Ramoaaina"}, ["raj"] = {"Rajasthani"}, ["rak"] = {"Tulu-Bohuai"}, ["ral"] = {"Ralte"}, ["ram"] = {"Canela"}, ["ran"] = {"Riantana"}, ["rao"] = {"Rao"}, ["rap"] = {"Rapanui"}, ["raq"] = {"Saam"}, ["rar"] = {"Rarotongan", "Cook Islands Maori"}, ["ras"] = {"Tegali"}, ["rat"] = {"Razajerdi"}, ["rau"] = {"Raute"}, ["rav"] = {"Sampang"}, ["raw"] = {"Rawang"}, ["rax"] = {"Rang"}, ["ray"] = {"Rapa"}, ["raz"] = {"Rahambuu"}, ["rbb"] = {"Rumai Palaung"}, ["rbk"] = {"Northern Bontok"}, ["rbl"] = {"Miraya Bikol"}, ["rbp"] = {"Barababaraba"}, ["rcf"] = {"Réunion Creole French"}, ["rdb"] = {"Rudbari"}, ["rea"] = {"Rerau"}, ["reb"] = {"Rembong"}, ["ree"] = {"Rejang Kayan"}, ["reg"] = {"Kara (Tanzania)"}, ["rei"] = {"Reli"}, ["rej"] = {"Rejang"}, ["rel"] = {"Rendille"}, ["rem"] = {"Remo"}, ["ren"] = {"Rengao"}, ["rer"] = {"Rer Bare"}, ["res"] = {"Reshe"}, ["ret"] = {"Retta"}, ["rey"] = {"Reyesano"}, ["rga"] = {"Roria"}, ["rge"] = {"Romano-Greek"}, ["rgk"] = {"Rangkas"}, ["rgn"] = {"Romagnol"}, ["rgr"] = {"Resígaro"}, ["rgs"] = {"Southern Roglai"}, ["rgu"] = {"Ringgou"}, ["rhg"] = {"Rohingya"}, ["rhp"] = {"Yahang"}, ["ria"] = {"Riang (India)"}, ["rif"] = {"Tarifit"}, ["ril"] = {"Riang Lang", "Riang (Myanmar)"}, ["rim"] = {"Nyaturu"}, ["rin"] = {"Nungu"}, ["rir"] = {"Ribun"}, ["rit"] = {"Ritharrngu"}, ["riu"] = {"Riung"}, ["rjg"] = {"Rajong"}, ["rji"] = {"Raji"}, ["rjs"] = {"Rajbanshi"}, ["rka"] = {"Kraol"}, ["rkb"] = {"Rikbaktsa"}, ["rkh"] = {"Rakahanga-Manihiki"}, ["rki"] = {"Rakhine"}, ["rkm"] = {"Marka"}, ["rkt"] = {"Rangpuri", "Kamta"}, ["rkw"] = {"Arakwal"}, ["rma"] = {"Rama"}, ["rmb"] = {"Rembarrnga"}, ["rmc"] = {"Carpathian Romani"}, ["rmd"] = {"Traveller Danish"}, ["rme"] = {"Angloromani"}, ["rmf"] = {"Kalo Finnish Romani"}, ["rmg"] = {"Traveller Norwegian"}, ["rmh"] = {"Murkim"}, ["rmi"] = {"Lomavren"}, ["rmk"] = {"Romkun"}, ["rml"] = {"Baltic Romani"}, ["rmm"] = {"Roma"}, ["rmn"] = {"Balkan Romani"}, ["rmo"] = {"Sinte Romani"}, ["rmp"] = {"Rempi"}, ["rmq"] = {"Caló"}, ["rms"] = {"Romanian Sign Language"}, ["rmt"] = {"Domari"}, ["rmu"] = {"Tavringer Romani"}, ["rmv"] = {"Romanova"}, ["rmw"] = {"Welsh Romani"}, ["rmx"] = {"Romam"}, ["rmy"] = {"Vlax Romani"}, ["rmz"] = {"Marma"}, ["rnd"] = {"Ruund"}, ["rng"] = {"Ronga"}, ["rnl"] = {"Ranglong"}, ["rnn"] = {"Roon"}, ["rnp"] = {"Rongpo"}, ["rnr"] = {"Nari Nari"}, ["rnw"] = {"Rungwa"}, ["roa"] = {"Romance languages"}, ["rob"] = {"Tae'"}, ["roc"] = {"Cacgia Roglai"}, ["rod"] = {"Rogo"}, ["roe"] = {"Ronji"}, ["rof"] = {"Rombo"}, ["rog"] = {"Northern Roglai"}, ["rol"] = {"Romblomanon"}, ["rom"] = {"Romany"}, ["roo"] = {"Rotokas"}, ["rop"] = {"Kriol"}, ["ror"] = {"Rongga"}, ["rou"] = {"Runga"}, ["row"] = {"Dela-Oenale"}, ["rpn"] = {"Repanbitip"}, ["rpt"] = {"Rapting"}, ["rri"] = {"Ririo"}, ["rro"] = {"Waima"}, ["rrt"] = {"Arritinngithigh"}, ["rsb"] = {"Romano-Serbian"}, ["rsl"] = {"Russian Sign Language"}, ["rsm"] = {"Miriwoong Sign Language"}, ["rtc"] = {"Rungtu Chin"}, ["rth"] = {"Ratahan"}, ["rtm"] = {"Rotuman"}, ["rts"] = {"Yurats"}, ["rtw"] = {"Rathawi"}, ["rub"] = {"Gungu"}, ["ruc"] = {"Ruuli"}, ["rue"] = {"Rusyn"}, ["ruf"] = {"Luguru"}, ["rug"] = {"Roviana"}, ["ruh"] = {"Ruga"}, ["rui"] = {"Rufiji"}, ["ruk"] = {"Che"}, ["ruo"] = {"Istro Romanian"}, ["rup"] = {"Macedo-Romanian", "Aromanian", "Arumanian"}, ["ruq"] = {"Megleno Romanian"}, ["rut"] = {"Rutul"}, ["ruu"] = {"Lanas Lobu"}, ["ruy"] = {"Mala (Nigeria)"}, ["ruz"] = {"Ruma"}, ["rwa"] = {"Rawo"}, ["rwk"] = {"Rwa"}, ["rwm"] = {"Amba (Uganda)"}, ["rwo"] = {"Rawa"}, ["rwr"] = {"Marwari (India)"}, ["rxd"] = {"Ngardi"}, ["rxw"] = {"Karuwali", "Garuwali"}, ["ryn"] = {"Northern Amami-Oshima"}, ["rys"] = {"Yaeyama"}, ["ryu"] = {"Central Okinawan"}, ["rzh"] = {"Rāziḥī"}, ["saa"] = {"Saba"}, ["sab"] = {"Buglere"}, ["sac"] = {"Meskwaki"}, ["sad"] = {"Sandawe"}, ["sae"] = {"Sabanê"}, ["saf"] = {"Safaliba"}, ["sah"] = {"Yakut"}, ["sai"] = {"South American Indian languages"}, ["saj"] = {"Sahu"}, ["sak"] = {"Sake"}, ["sal"] = {"Salishan languages"}, ["sam"] = {"Samaritan Aramaic"}, ["sao"] = {"Sause"}, ["saq"] = {"Samburu"}, ["sar"] = {"Saraveca"}, ["sas"] = {"Sasak"}, ["sat"] = {"Santali"}, ["sau"] = {"Saleman"}, ["sav"] = {"Saafi-Saafi"}, ["saw"] = {"Sawi"}, ["sax"] = {"Sa"}, ["say"] = {"Saya"}, ["saz"] = {"Saurashtra"}, ["sba"] = {"Ngambay"}, ["sbb"] = {"Simbo"}, ["sbc"] = {"Kele (Papua New Guinea)"}, ["sbd"] = {"Southern Samo"}, ["sbe"] = {"Saliba"}, ["sbf"] = {"Chabu", "Shabo"}, ["sbg"] = {"Seget"}, ["sbh"] = {"Sori-Harengan"}, ["sbi"] = {"Seti"}, ["sbj"] = {"Surbakhal"}, ["sbk"] = {"Safwa"}, ["sbl"] = {"Botolan Sambal"}, ["sbm"] = {"Sagala"}, ["sbn"] = {"Sindhi Bhil"}, ["sbo"] = {"Sabüm"}, ["sbp"] = {"Sangu (Tanzania)"}, ["sbq"] = {"Sileibi"}, ["sbr"] = {"Sembakung Murut"}, ["sbs"] = {"Subiya"}, ["sbt"] = {"Kimki"}, ["sbu"] = {"Stod Bhoti"}, ["sbv"] = {"Sabine"}, ["sbw"] = {"Simba"}, ["sbx"] = {"Seberuang"}, ["sby"] = {"Soli"}, ["sbz"] = {"Sara Kaba"}, ["scb"] = {"Chut"}, ["sce"] = {"Dongxiang"}, ["scf"] = {"San Miguel Creole French"}, ["scg"] = {"Sanggau"}, ["sch"] = {"Sakachep"}, ["sci"] = {"Sri Lankan Creole Malay"}, ["sck"] = {"Sadri"}, ["scl"] = {"Shina"}, ["scn"] = {"Sicilian"}, ["sco"] = {"Scots"}, ["scp"] = {"Hyolmo", "Helambu Sherpa"}, ["scq"] = {"Sa'och"}, ["scs"] = {"North Slavey"}, ["sct"] = {"Southern Katang"}, ["scu"] = {"Shumcho"}, ["scv"] = {"Sheni"}, ["scw"] = {"Sha"}, ["scx"] = {"Sicel"}, ["sda"] = {"Toraja-Sa'dan"}, ["sdb"] = {"Shabak"}, ["sdc"] = {"Sassarese Sardinian"}, ["sde"] = {"Surubu"}, ["sdf"] = {"Sarli"}, ["sdg"] = {"Savi"}, ["sdh"] = {"Southern Kurdish"}, ["sdj"] = {"Suundi"}, ["sdk"] = {"Sos Kundi"}, ["sdl"] = {"Saudi Arabian Sign Language"}, ["sdn"] = {"Gallurese Sardinian"}, ["sdo"] = {"Bukar-Sadung Bidayuh"}, ["sdp"] = {"Sherdukpen"}, ["sdq"] = {"Semandang"}, ["sdr"] = {"Oraon Sadri"}, ["sds"] = {"Sened"}, ["sdt"] = {"Shuadit"}, ["sdu"] = {"Sarudu"}, ["sdv"] = {"Eastern Sudanic languages"}, ["sdx"] = {"Sibu Melanau"}, ["sdz"] = {"Sallands"}, ["sea"] = {"Semai"}, ["seb"] = {"Shempire Senoufo"}, ["sec"] = {"Sechelt"}, ["sed"] = {"Sedang"}, ["see"] = {"Seneca"}, ["sef"] = {"Cebaara Senoufo"}, ["seg"] = {"Segeju"}, ["seh"] = {"Sena"}, ["sei"] = {"Seri"}, ["sej"] = {"Sene"}, ["sek"] = {"Sekani"}, ["sel"] = {"Selkup"}, ["sem"] = {"Semitic languages"}, ["sen"] = {"Nanerigé Sénoufo"}, ["seo"] = {"Suarmin"}, ["sep"] = {"Sìcìté Sénoufo"}, ["seq"] = {"Senara Sénoufo"}, ["ser"] = {"Serrano"}, ["ses"] = {"Koyraboro Senni Songhai"}, ["set"] = {"Sentani"}, ["seu"] = {"Serui-Laut"}, ["sev"] = {"Nyarafolo Senoufo"}, ["sew"] = {"Sewa Bay"}, ["sey"] = {"Secoya"}, ["sez"] = {"Senthang Chin"}, ["sfb"] = {"Langue des signes de Belgique Francophone", "French Belgian Sign Language"}, ["sfe"] = {"Eastern Subanen"}, ["sfm"] = {"Small Flowery Miao"}, ["sfs"] = {"South African Sign Language"}, ["sfw"] = {"Sehwi"}, ["sga"] = {"Old Irish (to 900)"}, ["sgb"] = {"Mag-antsi Ayta"}, ["sgc"] = {"Kipsigis"}, ["sgd"] = {"Surigaonon"}, ["sge"] = {"Segai"}, ["sgg"] = {"Swiss-German Sign Language"}, ["sgh"] = {"Shughni"}, ["sgi"] = {"Suga"}, ["sgj"] = {"Surgujia"}, ["sgk"] = {"Sangkong"}, ["sgm"] = {"Singa"}, ["sgn"] = {"Sign languages"}, ["sgp"] = {"Singpho"}, ["sgr"] = {"Sangisari"}, ["sgs"] = {"Samogitian"}, ["sgt"] = {"Brokpake"}, ["sgu"] = {"Salas"}, ["sgw"] = {"Sebat Bet Gurage"}, ["sgx"] = {"Sierra Leone Sign Language"}, ["sgy"] = {"Sanglechi"}, ["sgz"] = {"Sursurunga"}, ["sha"] = {"Shall-Zwall"}, ["shb"] = {"Ninam"}, ["shc"] = {"Sonde"}, ["shd"] = {"Kundal Shahi"}, ["she"] = {"Sheko"}, ["shg"] = {"Shua"}, ["shh"] = {"Shoshoni"}, ["shi"] = {"Tachelhit"}, ["shj"] = {"Shatt"}, ["shk"] = {"Shilluk"}, ["shl"] = {"Shendu"}, ["shm"] = {"Shahrudi"}, ["shn"] = {"Shan"}, ["sho"] = {"Shanga"}, ["shp"] = {"Shipibo-Conibo"}, ["shq"] = {"Sala"}, ["shr"] = {"Shi"}, ["shs"] = {"Shuswap"}, ["sht"] = {"Shasta"}, ["shu"] = {"Chadian Arabic"}, ["shv"] = {"Shehri"}, ["shw"] = {"Shwai"}, ["shx"] = {"She"}, ["shy"] = {"Tachawit"}, ["shz"] = {"Syenara Senoufo"}, ["sia"] = {"Akkala Sami"}, ["sib"] = {"Sebop"}, ["sid"] = {"Sidamo"}, ["sie"] = {"Simaa"}, ["sif"] = {"Siamou"}, ["sig"] = {"Paasaal"}, ["sih"] = {"Zire", "Sîshëë"}, ["sii"] = {"Shom Peng"}, ["sij"] = {"Numbami"}, ["sik"] = {"Sikiana"}, ["sil"] = {"Tumulung Sisaala"}, ["sim"] = {"Mende (Papua New Guinea)"}, ["sio"] = {"Siouan languages"}, ["sip"] = {"Sikkimese"}, ["siq"] = {"Sonia"}, ["sir"] = {"Siri"}, ["sis"] = {"Siuslaw"}, ["sit"] = {"Sino-Tibetan languages"}, ["siu"] = {"Sinagen"}, ["siv"] = {"Sumariup"}, ["siw"] = {"Siwai"}, ["six"] = {"Sumau"}, ["siy"] = {"Sivandi"}, ["siz"] = {"Siwi"}, ["sja"] = {"Epena"}, ["sjb"] = {"Sajau Basap"}, ["sjd"] = {"Kildin Sami"}, ["sje"] = {"Pite Sami"}, ["sjg"] = {"Assangori"}, ["sjk"] = {"Kemi Sami"}, ["sjl"] = {"Sajalong", "Miji"}, ["sjm"] = {"Mapun"}, ["sjn"] = {"Sindarin"}, ["sjo"] = {"Xibe"}, ["sjp"] = {"Surjapuri"}, ["sjr"] = {"Siar-Lak"}, ["sjs"] = {"Senhaja De Srair"}, ["sjt"] = {"Ter Sami"}, ["sju"] = {"Ume Sami"}, ["sjw"] = {"Shawnee"}, ["ska"] = {"Skagit"}, ["skb"] = {"Saek"}, ["skc"] = {"Ma Manda"}, ["skd"] = {"Southern Sierra Miwok"}, ["ske"] = {"Seke (Vanuatu)"}, ["skf"] = {"Sakirabiá"}, ["skg"] = {"Sakalava Malagasy"}, ["skh"] = {"Sikule"}, ["ski"] = {"Sika"}, ["skj"] = {"Seke (Nepal)"}, ["skm"] = {"Kutong"}, ["skn"] = {"Kolibugan Subanon"}, ["sko"] = {"Seko Tengah"}, ["skp"] = {"Sekapan"}, ["skq"] = {"Sininkere"}, ["skr"] = {"Saraiki", "Seraiki"}, ["sks"] = {"Maia"}, ["skt"] = {"Sakata"}, ["sku"] = {"Sakao"}, ["skv"] = {"Skou"}, ["skw"] = {"Skepi Creole Dutch"}, ["skx"] = {"Seko Padang"}, ["sky"] = {"Sikaiana"}, ["skz"] = {"Sekar"}, ["sla"] = {"Slavic languages"}, ["slc"] = {"Sáliba"}, ["sld"] = {"Sissala"}, ["sle"] = {"Sholaga"}, ["slf"] = {"Swiss-Italian Sign Language"}, ["slg"] = {"Selungai Murut"}, ["slh"] = {"Southern Puget Sound Salish"}, ["sli"] = {"Lower Silesian"}, ["slj"] = {"Salumá"}, ["sll"] = {"Salt-Yui"}, ["slm"] = {"Pangutaran Sama"}, ["sln"] = {"Salinan"}, ["slp"] = {"Lamaholot"}, ["slq"] = {"Salchuq"}, ["slr"] = {"Salar"}, ["sls"] = {"Singapore Sign Language"}, ["slt"] = {"Sila"}, ["slu"] = {"Selaru"}, ["slw"] = {"Sialum"}, ["slx"] = {"Salampasu"}, ["sly"] = {"Selayar"}, ["slz"] = {"Ma'ya"}, ["sma"] = {"Southern Sami"}, ["smb"] = {"Simbari"}, ["smc"] = {"Som"}, ["smd"] = {"Sama"}, ["smf"] = {"Auwe"}, ["smg"] = {"Simbali"}, ["smh"] = {"Samei"}, ["smi"] = {"Sami languages"}, ["smj"] = {"Lule Sami"}, ["smk"] = {"Bolinao"}, ["sml"] = {"Central Sama"}, ["smm"] = {"Musasa"}, ["smn"] = {"Inari Sami"}, ["smp"] = {"Samaritan"}, ["smq"] = {"Samo"}, ["smr"] = {"Simeulue"}, ["sms"] = {"Skolt Sami"}, ["smt"] = {"Simte"}, ["smu"] = {"Somray"}, ["smv"] = {"Samvedi"}, ["smw"] = {"Sumbawa"}, ["smx"] = {"Samba"}, ["smy"] = {"Semnani"}, ["smz"] = {"Simeku"}, ["snb"] = {"Sebuyau"}, ["snc"] = {"Sinaugoro"}, ["sne"] = {"Bau Bidayuh"}, ["snf"] = {"Noon"}, ["sng"] = {"Sanga (Democratic Republic of Congo)"}, ["sni"] = {"Sensi"}, ["snj"] = {"Riverain Sango"}, ["snk"] = {"Soninke"}, ["snl"] = {"Sangil"}, ["snm"] = {"Southern Ma'di"}, ["snn"] = {"Siona"}, ["sno"] = {"Snohomish"}, ["snp"] = {"Siane"}, ["snq"] = {"Sangu (Gabon)"}, ["snr"] = {"Sihan"}, ["sns"] = {"South West Bay", "Nahavaq"}, ["snu"] = {"Senggi", "Viid"}, ["snv"] = {"Sa'ban"}, ["snw"] = {"Selee"}, ["snx"] = {"Sam"}, ["sny"] = {"Saniyo-Hiyewe"}, ["snz"] = {"Kou"}, ["soa"] = {"Thai Song"}, ["sob"] = {"Sobei"}, ["soc"] = {"So (Democratic Republic of Congo)"}, ["sod"] = {"Songoora"}, ["soe"] = {"Songomeno"}, ["sog"] = {"Sogdian"}, ["soh"] = {"Aka"}, ["soi"] = {"Sonha"}, ["soj"] = {"Soi"}, ["sok"] = {"Sokoro"}, ["sol"] = {"Solos"}, ["son"] = {"Songhai languages"}, ["soo"] = {"Songo"}, ["sop"] = {"Songe"}, ["soq"] = {"Kanasi"}, ["sor"] = {"Somrai"}, ["sos"] = {"Seeku"}, ["sou"] = {"Southern Thai"}, ["sov"] = {"Sonsorol"}, ["sow"] = {"Sowanda"}, ["sox"] = {"Swo"}, ["soy"] = {"Miyobe"}, ["soz"] = {"Temi"}, ["spb"] = {"Sepa (Indonesia)"}, ["spc"] = {"Sapé"}, ["spd"] = {"Saep"}, ["spe"] = {"Sepa (Papua New Guinea)"}, ["spg"] = {"Sian"}, ["spi"] = {"Saponi"}, ["spk"] = {"Sengo"}, ["spl"] = {"Selepet"}, ["spm"] = {"Akukem"}, ["spn"] = {"Sanapaná"}, ["spo"] = {"Spokane"}, ["spp"] = {"Supyire Senoufo"}, ["spq"] = {"Loreto-Ucayali Spanish"}, ["spr"] = {"Saparua"}, ["sps"] = {"Saposa"}, ["spt"] = {"Spiti Bhoti"}, ["spu"] = {"Sapuan"}, ["spv"] = {"Sambalpuri", "Kosli"}, ["spx"] = {"South Picene"}, ["spy"] = {"Sabaot"}, ["sqa"] = {"Shama-Sambuga"}, ["sqh"] = {"Shau"}, ["sqj"] = {"Albanian languages"}, ["sqk"] = {"Albanian Sign Language"}, ["sqm"] = {"Suma"}, ["sqn"] = {"Susquehannock"}, ["sqo"] = {"Sorkhei"}, ["sqq"] = {"Sou"}, ["sqr"] = {"Siculo Arabic"}, ["sqs"] = {"Sri Lankan Sign Language"}, ["sqt"] = {"Soqotri"}, ["squ"] = {"Squamish"}, ["sra"] = {"Saruga"}, ["srb"] = {"Sora"}, ["src"] = {"Logudorese Sardinian"}, ["sre"] = {"Sara"}, ["srf"] = {"Nafi"}, ["srg"] = {"Sulod"}, ["srh"] = {"Sarikoli"}, ["sri"] = {"Siriano"}, ["srk"] = {"Serudung Murut"}, ["srl"] = {"Isirawa"}, ["srm"] = {"Saramaccan"}, ["srn"] = {"Sranan Tongo"}, ["sro"] = {"Campidanese Sardinian"}, ["srq"] = {"Sirionó"}, ["srr"] = {"Serer"}, ["srs"] = {"Sarsi"}, ["srt"] = {"Sauri"}, ["sru"] = {"Suruí"}, ["srv"] = {"Southern Sorsoganon"}, ["srw"] = {"Serua"}, ["srx"] = {"Sirmauri"}, ["sry"] = {"Sera"}, ["srz"] = {"Shahmirzadi"}, ["ssa"] = {"Nilo-Saharan languages"}, ["ssb"] = {"Southern Sama"}, ["ssc"] = {"Suba-Simbiti"}, ["ssd"] = {"Siroi"}, ["sse"] = {"Balangingi", "Bangingih Sama"}, ["ssf"] = {"Thao"}, ["ssg"] = {"Seimat"}, ["ssh"] = {"Shihhi Arabic"}, ["ssi"] = {"Sansi"}, ["ssj"] = {"Sausi"}, ["ssk"] = {"Sunam"}, ["ssl"] = {"Western Sisaala"}, ["ssm"] = {"Semnam"}, ["ssn"] = {"Waata"}, ["sso"] = {"Sissano"}, ["ssp"] = {"Spanish Sign Language"}, ["ssq"] = {"So'a"}, ["ssr"] = {"Swiss-French Sign Language"}, ["sss"] = {"Sô"}, ["sst"] = {"Sinasina"}, ["ssu"] = {"Susuami"}, ["ssv"] = {"Shark Bay"}, ["ssx"] = {"Samberigi"}, ["ssy"] = {"Saho"}, ["ssz"] = {"Sengseng"}, ["sta"] = {"Settla"}, ["stb"] = {"Northern Subanen"}, ["std"] = {"Sentinel"}, ["ste"] = {"Liana-Seti"}, ["stf"] = {"Seta"}, ["stg"] = {"Trieng"}, ["sth"] = {"Shelta"}, ["sti"] = {"Bulo Stieng"}, ["stj"] = {"Matya Samo"}, ["stk"] = {"Arammba"}, ["stl"] = {"Stellingwerfs"}, ["stm"] = {"Setaman"}, ["stn"] = {"Owa"}, ["sto"] = {"Stoney"}, ["stp"] = {"Southeastern Tepehuan"}, ["stq"] = {"Saterfriesisch"}, ["str"] = {"Straits Salish"}, ["sts"] = {"Shumashti"}, ["stt"] = {"Budeh Stieng"}, ["stu"] = {"Samtao"}, ["stv"] = {"Silt'e"}, ["stw"] = {"Satawalese"}, ["sty"] = {"Siberian Tatar"}, ["sua"] = {"Sulka"}, ["sub"] = {"Suku"}, ["suc"] = {"Western Subanon"}, ["sue"] = {"Suena"}, ["sug"] = {"Suganga"}, ["sui"] = {"Suki"}, ["suj"] = {"Shubi"}, ["suk"] = {"Sukuma"}, ["suq"] = {"Suri"}, ["sur"] = {"Mwaghavul"}, ["sus"] = {"Susu"}, ["sut"] = {"Subtiaba"}, ["suv"] = {"Puroik"}, ["suw"] = {"Sumbwa"}, ["sux"] = {"Sumerian"}, ["suy"] = {"Suyá"}, ["suz"] = {"Sunwar"}, ["sva"] = {"Svan"}, ["svb"] = {"Ulau-Suain"}, ["svc"] = {"Vincentian Creole English"}, ["sve"] = {"Serili"}, ["svk"] = {"Slovakian Sign Language"}, ["svm"] = {"Slavomolisano"}, ["svs"] = {"Savosavo"}, ["svx"] = {"Skalvian"}, ["swb"] = {"Maore Comorian"}, ["swc"] = {"Congo Swahili"}, ["swf"] = {"Sere"}, ["swg"] = {"Swabian"}, ["swh"] = {"Swahili (individual language)", "Kiswahili"}, ["swi"] = {"Sui"}, ["swj"] = {"Sira"}, ["swk"] = {"Malawi Sena"}, ["swl"] = {"Swedish Sign Language"}, ["swm"] = {"Samosa"}, ["swn"] = {"Sawknah"}, ["swo"] = {"Shanenawa"}, ["swp"] = {"Suau"}, ["swq"] = {"Sharwa"}, ["swr"] = {"Saweru"}, ["sws"] = {"Seluwasan"}, ["swt"] = {"Sawila"}, ["swu"] = {"Suwawa"}, ["swv"] = {"Shekhawati"}, ["sww"] = {"Sowa"}, ["swx"] = {"Suruahá"}, ["swy"] = {"Sarua"}, ["sxb"] = {"Suba"}, ["sxc"] = {"Sicanian"}, ["sxe"] = {"Sighu"}, ["sxg"] = {"Shuhi", "Shixing"}, ["sxk"] = {"Southern Kalapuya"}, ["sxl"] = {"Selian"}, ["sxm"] = {"Samre"}, ["sxn"] = {"Sangir"}, ["sxo"] = {"Sorothaptic"}, ["sxr"] = {"Saaroa"}, ["sxs"] = {"Sasaru"}, ["sxu"] = {"Upper Saxon"}, ["sxw"] = {"Saxwe Gbe"}, ["sya"] = {"Siang"}, ["syb"] = {"Central Subanen"}, ["syc"] = {"Classical Syriac"}, ["syd"] = {"Samoyedic languages"}, ["syi"] = {"Seki"}, ["syk"] = {"Sukur"}, ["syl"] = {"Sylheti"}, ["sym"] = {"Maya Samo"}, ["syn"] = {"Senaya"}, ["syo"] = {"Suoy"}, ["syr"] = {"Syriac"}, ["sys"] = {"Sinyar"}, ["syw"] = {"Kagate"}, ["syx"] = {"Samay"}, ["syy"] = {"Al-Sayyid Bedouin Sign Language"}, ["sza"] = {"Semelai"}, ["szb"] = {"Ngalum"}, ["szc"] = {"Semaq Beri"}, ["szd"] = {"Seru"}, ["sze"] = {"Seze"}, ["szg"] = {"Sengele"}, ["szl"] = {"Silesian"}, ["szn"] = {"Sula"}, ["szp"] = {"Suabo"}, ["szs"] = {"Solomon Islands Sign Language"}, ["szv"] = {"Isu (Fako Division)"}, ["szw"] = {"Sawai"}, ["szy"] = {"Sakizaya"}, ["taa"] = {"Lower Tanana"}, ["tab"] = {"Tabassaran"}, ["tac"] = {"Lowland Tarahumara"}, ["tad"] = {"Tause"}, ["tae"] = {"Tariana"}, ["taf"] = {"Tapirapé"}, ["tag"] = {"Tagoi"}, ["tai"] = {"Tai languages"}, ["taj"] = {"Eastern Tamang"}, ["tak"] = {"Tala"}, ["tal"] = {"Tal"}, ["tan"] = {"Tangale"}, ["tao"] = {"Yami"}, ["tap"] = {"Taabwa"}, ["taq"] = {"Tamasheq"}, ["tar"] = {"Central Tarahumara"}, ["tas"] = {"Tay Boi"}, ["tau"] = {"Upper Tanana"}, ["tav"] = {"Tatuyo"}, ["taw"] = {"Tai"}, ["tax"] = {"Tamki"}, ["tay"] = {"Atayal"}, ["taz"] = {"Tocho"}, ["tba"] = {"Aikanã"}, ["tbc"] = {"Takia"}, ["tbd"] = {"Kaki Ae"}, ["tbe"] = {"Tanimbili"}, ["tbf"] = {"Mandara"}, ["tbg"] = {"North Tairora"}, ["tbh"] = {"Dharawal", "Thurawal"}, ["tbi"] = {"Gaam"}, ["tbj"] = {"Tiang"}, ["tbk"] = {"Calamian Tagbanwa"}, ["tbl"] = {"Tboli"}, ["tbm"] = {"Tagbu"}, ["tbn"] = {"Barro Negro Tunebo"}, ["tbo"] = {"Tawala"}, ["tbp"] = {"Taworta", "Diebroud"}, ["tbq"] = {"Tibeto-Burman languages"}, ["tbr"] = {"Tumtum"}, ["tbs"] = {"Tanguat"}, ["tbt"] = {"Tembo (Kitembo)"}, ["tbu"] = {"Tubar"}, ["tbv"] = {"Tobo"}, ["tbw"] = {"Tagbanwa"}, ["tbx"] = {"Kapin"}, ["tby"] = {"Tabaru"}, ["tbz"] = {"Ditammari"}, ["tca"] = {"Ticuna"}, ["tcb"] = {"Tanacross"}, ["tcc"] = {"Datooga"}, ["tcd"] = {"Tafi"}, ["tce"] = {"Southern Tutchone"}, ["tcf"] = {"Malinaltepec Me'phaa", "Malinaltepec Tlapanec"}, ["tcg"] = {"Tamagario"}, ["tch"] = {"Turks And Caicos Creole English"}, ["tci"] = {"Wára"}, ["tck"] = {"Tchitchege"}, ["tcl"] = {"Taman (Myanmar)"}, ["tcm"] = {"Tanahmerah"}, ["tcn"] = {"Tichurong"}, ["tco"] = {"Taungyo"}, ["tcp"] = {"Tawr Chin"}, ["tcq"] = {"Kaiy"}, ["tcs"] = {"Torres Strait Creole", "Yumplatok"}, ["tct"] = {"T'en"}, ["tcu"] = {"Southeastern Tarahumara"}, ["tcw"] = {"Tecpatlán Totonac"}, ["tcx"] = {"Toda"}, ["tcy"] = {"Tulu"}, ["tcz"] = {"Thado Chin"}, ["tda"] = {"Tagdal"}, ["tdb"] = {"Panchpargania"}, ["tdc"] = {"Emberá-Tadó"}, ["tdd"] = {"Tai Nüa"}, ["tde"] = {"Tiranige Diga Dogon"}, ["tdf"] = {"Talieng"}, ["tdg"] = {"Western Tamang"}, ["tdh"] = {"Thulung"}, ["tdi"] = {"Tomadino"}, ["tdj"] = {"Tajio"}, ["tdk"] = {"Tambas"}, ["tdl"] = {"Sur"}, ["tdm"] = {"Taruma"}, ["tdn"] = {"Tondano"}, ["tdo"] = {"Teme"}, ["tdq"] = {"Tita"}, ["tdr"] = {"Todrah"}, ["tds"] = {"Doutai"}, ["tdt"] = {"Tetun Dili"}, ["tdv"] = {"Toro"}, ["tdx"] = {"Tandroy-Mahafaly Malagasy"}, ["tdy"] = {"Tadyawan"}, ["tea"] = {"Temiar"}, ["teb"] = {"Tetete"}, ["tec"] = {"Terik"}, ["ted"] = {"Tepo Krumen"}, ["tee"] = {"Huehuetla Tepehua"}, ["tef"] = {"Teressa"}, ["teg"] = {"Teke-Tege"}, ["teh"] = {"Tehuelche"}, ["tei"] = {"Torricelli"}, ["tek"] = {"Ibali Teke"}, ["tem"] = {"Timne"}, ["ten"] = {"Tama (Colombia)"}, ["teo"] = {"Teso"}, ["tep"] = {"Tepecano"}, ["teq"] = {"Temein"}, ["ter"] = {"Tereno"}, ["tes"] = {"Tengger"}, ["tet"] = {"Tetum"}, ["teu"] = {"Soo"}, ["tev"] = {"Teor"}, ["tew"] = {"Tewa (USA)"}, ["tex"] = {"Tennet"}, ["tey"] = {"Tulishi"}, ["tez"] = {"Tetserret"}, ["tfi"] = {"Tofin Gbe"}, ["tfn"] = {"Tanaina"}, ["tfo"] = {"Tefaro"}, ["tfr"] = {"Teribe"}, ["tft"] = {"Ternate"}, ["tga"] = {"Sagalla"}, ["tgb"] = {"Tobilung"}, ["tgc"] = {"Tigak"}, ["tgd"] = {"Ciwogai"}, ["tge"] = {"Eastern Gorkha Tamang"}, ["tgf"] = {"Chalikha"}, ["tgh"] = {"Tobagonian Creole English"}, ["tgi"] = {"Lawunuia"}, ["tgj"] = {"Tagin"}, ["tgn"] = {"Tandaganon"}, ["tgo"] = {"Sudest"}, ["tgp"] = {"Tangoa"}, ["tgq"] = {"Tring"}, ["tgr"] = {"Tareng"}, ["tgs"] = {"Nume"}, ["tgt"] = {"Central Tagbanwa"}, ["tgu"] = {"Tanggu"}, ["tgv"] = {"Tingui-Boto"}, ["tgw"] = {"Tagwana Senoufo"}, ["tgx"] = {"Tagish"}, ["tgy"] = {"Togoyo"}, ["tgz"] = {"Tagalaka"}, ["thd"] = {"Kuuk Thaayorre", "Thayore"}, ["the"] = {"Chitwania Tharu"}, ["thf"] = {"Thangmi"}, ["thh"] = {"Northern Tarahumara"}, ["thi"] = {"Tai Long"}, ["thk"] = {"Tharaka", "Kitharaka"}, ["thl"] = {"Dangaura Tharu"}, ["thm"] = {"Aheu"}, ["thn"] = {"Thachanadan"}, ["thp"] = {"Thompson"}, ["thq"] = {"Kochila Tharu"}, ["thr"] = {"Rana Tharu"}, ["ths"] = {"Thakali"}, ["tht"] = {"Tahltan"}, ["thu"] = {"Thuri"}, ["thv"] = {"Tahaggart Tamahaq"}, ["thy"] = {"Tha"}, ["thz"] = {"Tayart Tamajeq"}, ["tia"] = {"Tidikelt Tamazight"}, ["tic"] = {"Tira"}, ["tif"] = {"Tifal"}, ["tig"] = {"Tigre"}, ["tih"] = {"Timugon Murut"}, ["tii"] = {"Tiene"}, ["tij"] = {"Tilung"}, ["tik"] = {"Tikar"}, ["til"] = {"Tillamook"}, ["tim"] = {"Timbe"}, ["tin"] = {"Tindi"}, ["tio"] = {"Teop"}, ["tip"] = {"Trimuris"}, ["tiq"] = {"Tiéfo"}, ["tis"] = {"Masadiit Itneg"}, ["tit"] = {"Tinigua"}, ["tiu"] = {"Adasen"}, ["tiv"] = {"Tiv"}, ["tiw"] = {"Tiwi"}, ["tix"] = {"Southern Tiwa"}, ["tiy"] = {"Tiruray"}, ["tiz"] = {"Tai Hongjin"}, ["tja"] = {"Tajuasohn"}, ["tjg"] = {"Tunjung"}, ["tji"] = {"Northern Tujia"}, ["tjj"] = {"Tjungundji"}, ["tjl"] = {"Tai Laing"}, ["tjm"] = {"Timucua"}, ["tjn"] = {"Tonjon"}, ["tjo"] = {"Temacine Tamazight"}, ["tjp"] = {"Tjupany"}, ["tjs"] = {"Southern Tujia"}, ["tju"] = {"Tjurruru"}, ["tjw"] = {"Djabwurrung"}, ["tka"] = {"Truká"}, ["tkb"] = {"Buksa"}, ["tkd"] = {"Tukudede"}, ["tke"] = {"Takwane"}, ["tkf"] = {"Tukumanféd"}, ["tkg"] = {"Tesaka Malagasy"}, ["tkl"] = {"Tokelau"}, ["tkm"] = {"Takelma"}, ["tkn"] = {"Toku-No-Shima"}, ["tkp"] = {"Tikopia"}, ["tkq"] = {"Tee"}, ["tkr"] = {"Tsakhur"}, ["tks"] = {"Takestani"}, ["tkt"] = {"Kathoriya Tharu"}, ["tku"] = {"Upper Necaxa Totonac"}, ["tkv"] = {"Mur Pano"}, ["tkw"] = {"Teanu"}, ["tkx"] = {"Tangko"}, ["tkz"] = {"Takua"}, ["tla"] = {"Southwestern Tepehuan"}, ["tlb"] = {"Tobelo"}, ["tlc"] = {"Yecuatla Totonac"}, ["tld"] = {"Talaud"}, ["tlf"] = {"Telefol"}, ["tlg"] = {"Tofanma"}, ["tlh"] = {"Klingon", "tlhIngan Hol"}, ["tli"] = {"Tlingit"}, ["tlj"] = {"Talinga-Bwisi"}, ["tlk"] = {"Taloki"}, ["tll"] = {"Tetela"}, ["tlm"] = {"Tolomako"}, ["tln"] = {"Talondo'"}, ["tlo"] = {"Talodi"}, ["tlp"] = {"Filomena Mata-Coahuitlán Totonac"}, ["tlq"] = {"Tai Loi"}, ["tlr"] = {"Talise"}, ["tls"] = {"Tambotalo"}, ["tlt"] = {"Sou Nama", "Teluti"}, ["tlu"] = {"Tulehu"}, ["tlv"] = {"Taliabu"}, ["tlx"] = {"Khehek"}, ["tly"] = {"Talysh"}, ["tma"] = {"Tama (Chad)"}, ["tmb"] = {"Katbol", "Avava"}, ["tmc"] = {"Tumak"}, ["tmd"] = {"Haruai"}, ["tme"] = {"Tremembé"}, ["tmf"] = {"Toba-Maskoy"}, ["tmg"] = {"Ternateño"}, ["tmh"] = {"Tamashek"}, ["tmi"] = {"Tutuba"}, ["tmj"] = {"Samarokena"}, ["tmk"] = {"Northwestern Tamang"}, ["tml"] = {"Tamnim Citak"}, ["tmm"] = {"Tai Thanh"}, ["tmn"] = {"Taman (Indonesia)"}, ["tmo"] = {"Temoq"}, ["tmq"] = {"Tumleo"}, ["tmr"] = {"Jewish Babylonian Aramaic (ca. 200-1200 CE)"}, ["tms"] = {"Tima"}, ["tmt"] = {"Tasmate"}, ["tmu"] = {"Iau"}, ["tmv"] = {"Tembo (Motembo)"}, ["tmw"] = {"Temuan"}, ["tmy"] = {"Tami"}, ["tmz"] = {"Tamanaku"}, ["tna"] = {"Tacana"}, ["tnb"] = {"Western Tunebo"}, ["tnc"] = {"Tanimuca-Retuarã"}, ["tnd"] = {"Angosturas Tunebo"}, ["tng"] = {"Tobanga"}, ["tnh"] = {"Maiani"}, ["tni"] = {"Tandia"}, ["tnk"] = {"Kwamera"}, ["tnl"] = {"Lenakel"}, ["tnm"] = {"Tabla"}, ["tnn"] = {"North Tanna"}, ["tno"] = {"Toromono"}, ["tnp"] = {"Whitesands"}, ["tnq"] = {"Taino"}, ["tnr"] = {"Ménik"}, ["tns"] = {"Tenis"}, ["tnt"] = {"Tontemboan"}, ["tnu"] = {"Tay Khang"}, ["tnv"] = {"Tangchangya"}, ["tnw"] = {"Tonsawang"}, ["tnx"] = {"Tanema"}, ["tny"] = {"Tongwe"}, ["tnz"] = {"Ten'edn"}, ["tob"] = {"Toba"}, ["toc"] = {"Coyutla Totonac"}, ["tod"] = {"Toma"}, ["tof"] = {"Gizrra"}, ["tog"] = {"Tonga (Nyasa)"}, ["toh"] = {"Gitonga"}, ["toi"] = {"Tonga (Zambia)"}, ["toj"] = {"Tojolabal"}, ["tol"] = {"Tolowa"}, ["tom"] = {"Tombulu"}, ["too"] = {"Xicotepec De Juárez Totonac"}, ["top"] = {"Papantla Totonac"}, ["toq"] = {"Toposa"}, ["tor"] = {"Togbo-Vara Banda"}, ["tos"] = {"Highland Totonac"}, ["tou"] = {"Tho"}, ["tov"] = {"Upper Taromi"}, ["tow"] = {"Jemez"}, ["tox"] = {"Tobian"}, ["toy"] = {"Topoiyo"}, ["toz"] = {"To"}, ["tpa"] = {"Taupota"}, ["tpc"] = {"Azoyú Me'phaa", "Azoyú Tlapanec"}, ["tpe"] = {"Tippera"}, ["tpf"] = {"Tarpia"}, ["tpg"] = {"Kula"}, ["tpi"] = {"Tok Pisin"}, ["tpj"] = {"Tapieté"}, ["tpk"] = {"Tupinikin"}, ["tpl"] = {"Tlacoapa Me'phaa", "Tlacoapa Tlapanec"}, ["tpm"] = {"Tampulma"}, ["tpn"] = {"Tupinambá"}, ["tpo"] = {"Tai Pao"}, ["tpp"] = {"Pisaflores Tepehua"}, ["tpq"] = {"Tukpa"}, ["tpr"] = {"Tuparí"}, ["tpt"] = {"Tlachichilco Tepehua"}, ["tpu"] = {"Tampuan"}, ["tpv"] = {"Tanapag"}, ["tpw"] = {"Tupí"}, ["tpx"] = {"Acatepec Me'phaa", "Acatepec Tlapanec"}, ["tpy"] = {"Trumai"}, ["tpz"] = {"Tinputz"}, ["tqb"] = {"Tembé"}, ["tql"] = {"Lehali"}, ["tqm"] = {"Turumsa"}, ["tqn"] = {"Tenino"}, ["tqo"] = {"Toaripi"}, ["tqp"] = {"Tomoip"}, ["tqq"] = {"Tunni"}, ["tqr"] = {"Torona"}, ["tqt"] = {"Western Totonac"}, ["tqu"] = {"Touo"}, ["tqw"] = {"Tonkawa"}, ["tra"] = {"Tirahi"}, ["trb"] = {"Terebu"}, ["trc"] = {"Copala Triqui"}, ["trd"] = {"Turi"}, ["tre"] = {"East Tarangan"}, ["trf"] = {"Trinidadian Creole English"}, ["trg"] = {"Lishán Didán"}, ["trh"] = {"Turaka"}, ["tri"] = {"Trió"}, ["trj"] = {"Toram"}, ["trk"] = {"Turkic languages"}, ["trl"] = {"Traveller Scottish"}, ["trm"] = {"Tregami"}, ["trn"] = {"Trinitario"}, ["tro"] = {"Tarao Naga"}, ["trp"] = {"Kok Borok"}, ["trq"] = {"San Martín Itunyoso Triqui"}, ["trr"] = {"Taushiro"}, ["trs"] = {"Chicahuaxtla Triqui"}, ["trt"] = {"Tunggare"}, ["tru"] = {"Turoyo", "Surayt"}, ["trv"] = {"Taroko"}, ["trw"] = {"Torwali"}, ["trx"] = {"Tringgus-Sembaan Bidayuh"}, ["try"] = {"Turung"}, ["trz"] = {"Torá"}, ["tsa"] = {"Tsaangi"}, ["tsb"] = {"Tsamai"}, ["tsc"] = {"Tswa"}, ["tsd"] = {"Tsakonian"}, ["tse"] = {"Tunisian Sign Language"}, ["tsg"] = {"Tausug"}, ["tsh"] = {"Tsuvan"}, ["tsi"] = {"Tsimshian"}, ["tsj"] = {"Tshangla"}, ["tsk"] = {"Tseku"}, ["tsl"] = {"Ts'ün-Lao"}, ["tsm"] = {"Turkish Sign Language", "Türk İşaret Dili"}, ["tsp"] = {"Northern Toussian"}, ["tsq"] = {"Thai Sign Language"}, ["tsr"] = {"Akei"}, ["tss"] = {"Taiwan Sign Language"}, ["tst"] = {"Tondi Songway Kiini"}, ["tsu"] = {"Tsou"}, ["tsv"] = {"Tsogo"}, ["tsw"] = {"Tsishingini"}, ["tsx"] = {"Mubami"}, ["tsy"] = {"Tebul Sign Language"}, ["tsz"] = {"Purepecha"}, ["tta"] = {"Tutelo"}, ["ttb"] = {"Gaa"}, ["ttc"] = {"Tektiteko"}, ["ttd"] = {"Tauade"}, ["tte"] = {"Bwanabwana"}, ["ttf"] = {"Tuotomb"}, ["ttg"] = {"Tutong"}, ["tth"] = {"Upper Ta'oih"}, ["tti"] = {"Tobati"}, ["ttj"] = {"Tooro"}, ["ttk"] = {"Totoro"}, ["ttl"] = {"Totela"}, ["ttm"] = {"Northern Tutchone"}, ["ttn"] = {"Towei"}, ["tto"] = {"Lower Ta'oih"}, ["ttp"] = {"Tombelala"}, ["ttq"] = {"Tawallammat Tamajaq"}, ["ttr"] = {"Tera"}, ["tts"] = {"Northeastern Thai"}, ["ttt"] = {"Muslim Tat"}, ["ttu"] = {"Torau"}, ["ttv"] = {"Titan"}, ["ttw"] = {"Long Wat"}, ["tty"] = {"Sikaritai"}, ["ttz"] = {"Tsum"}, ["tua"] = {"Wiarumus"}, ["tub"] = {"Tübatulabal"}, ["tuc"] = {"Mutu"}, ["tud"] = {"Tuxá"}, ["tue"] = {"Tuyuca"}, ["tuf"] = {"Central Tunebo"}, ["tug"] = {"Tunia"}, ["tuh"] = {"Taulil"}, ["tui"] = {"Tupuri"}, ["tuj"] = {"Tugutil"}, ["tul"] = {"Tula"}, ["tum"] = {"Tumbuka"}, ["tun"] = {"Tunica"}, ["tuo"] = {"Tucano"}, ["tup"] = {"Tupi languages"}, ["tuq"] = {"Tedaga"}, ["tus"] = {"Tuscarora"}, ["tut"] = {"Altaic languages"}, ["tuu"] = {"Tututni"}, ["tuv"] = {"Turkana"}, ["tuw"] = {"Tungus languages"}, ["tux"] = {"Tuxináwa"}, ["tuy"] = {"Tugen"}, ["tuz"] = {"Turka"}, ["tva"] = {"Vaghua"}, ["tvd"] = {"Tsuvadi"}, ["tve"] = {"Te'un"}, ["tvk"] = {"Southeast Ambrym"}, ["tvl"] = {"Tuvalu"}, ["tvm"] = {"Tela-Masbuar"}, ["tvn"] = {"Tavoyan"}, ["tvo"] = {"Tidore"}, ["tvs"] = {"Taveta"}, ["tvt"] = {"Tutsa Naga"}, ["tvu"] = {"Tunen"}, ["tvw"] = {"Sedoa"}, ["tvx"] = {"Taivoan"}, ["tvy"] = {"Timor Pidgin"}, ["twa"] = {"Twana"}, ["twb"] = {"Western Tawbuid"}, ["twc"] = {"Teshenawa"}, ["twd"] = {"Twents"}, ["twe"] = {"Tewa (Indonesia)"}, ["twf"] = {"Northern Tiwa"}, ["twg"] = {"Tereweng"}, ["twh"] = {"Tai Dón"}, ["twl"] = {"Tawara"}, ["twm"] = {"Tawang Monpa"}, ["twn"] = {"Twendi"}, ["two"] = {"Tswapong"}, ["twp"] = {"Ere"}, ["twq"] = {"Tasawaq"}, ["twr"] = {"Southwestern Tarahumara"}, ["twt"] = {"Turiwára"}, ["twu"] = {"Termanu"}, ["tww"] = {"Tuwari"}, ["twx"] = {"Tewe"}, ["twy"] = {"Tawoyan"}, ["txa"] = {"Tombonuo"}, ["txb"] = {"Tokharian B"}, ["txc"] = {"Tsetsaut"}, ["txe"] = {"Totoli"}, ["txg"] = {"Tangut"}, ["txh"] = {"Thracian"}, ["txi"] = {"Ikpeng"}, ["txj"] = {"Tarjumo"}, ["txm"] = {"Tomini"}, ["txn"] = {"West Tarangan"}, ["txo"] = {"Toto"}, ["txq"] = {"Tii"}, ["txr"] = {"Tartessian"}, ["txs"] = {"Tonsea"}, ["txt"] = {"Citak"}, ["txu"] = {"Kayapó"}, ["txx"] = {"Tatana"}, ["txy"] = {"Tanosy Malagasy"}, ["tya"] = {"Tauya"}, ["tye"] = {"Kyanga"}, ["tyh"] = {"O'du"}, ["tyi"] = {"Teke-Tsaayi"}, ["tyj"] = {"Tai Do", "Tai Yo"}, ["tyl"] = {"Thu Lao"}, ["tyn"] = {"Kombai"}, ["typ"] = {"Thaypan"}, ["tyr"] = {"Tai Daeng"}, ["tys"] = {"Tày Sa Pa"}, ["tyt"] = {"Tày Tac"}, ["tyu"] = {"Kua"}, ["tyv"] = {"Tuvinian"}, ["tyx"] = {"Teke-Tyee"}, ["tyz"] = {"Tày"}, ["tza"] = {"Tanzanian Sign Language"}, ["tzh"] = {"Tzeltal"}, ["tzj"] = {"Tz'utujil"}, ["tzl"] = {"Talossan"}, ["tzm"] = {"Central Atlas Tamazight"}, ["tzn"] = {"Tugun"}, ["tzo"] = {"Tzotzil"}, ["tzx"] = {"Tabriak"}, ["uam"] = {"Uamué"}, ["uan"] = {"Kuan"}, ["uar"] = {"Tairuma"}, ["uba"] = {"Ubang"}, ["ubi"] = {"Ubi"}, ["ubl"] = {"Buhi'non Bikol"}, ["ubr"] = {"Ubir"}, ["ubu"] = {"Umbu-Ungu"}, ["uby"] = {"Ubykh"}, ["uda"] = {"Uda"}, ["ude"] = {"Udihe"}, ["udg"] = {"Muduga"}, ["udi"] = {"Udi"}, ["udj"] = {"Ujir"}, ["udl"] = {"Wuzlam"}, ["udm"] = {"Udmurt"}, ["udu"] = {"Uduk"}, ["ues"] = {"Kioko"}, ["ufi"] = {"Ufim"}, ["uga"] = {"Ugaritic"}, ["ugb"] = {"Kuku-Ugbanh"}, ["uge"] = {"Ughele"}, ["ugn"] = {"Ugandan Sign Language"}, ["ugo"] = {"Ugong"}, ["ugy"] = {"Uruguayan Sign Language"}, ["uha"] = {"Uhami"}, ["uhn"] = {"Damal"}, ["uis"] = {"Uisai"}, ["uiv"] = {"Iyive"}, ["uji"] = {"Tanjijili"}, ["uka"] = {"Kaburi"}, ["ukg"] = {"Ukuriguma"}, ["ukh"] = {"Ukhwejo"}, ["uki"] = {"Kui (India)"}, ["ukk"] = {"Muak Sa-aak"}, ["ukl"] = {"Ukrainian Sign Language"}, ["ukp"] = {"Ukpe-Bayobiri"}, ["ukq"] = {"Ukwa"}, ["uks"] = {"Urubú-Kaapor Sign Language", "Kaapor Sign Language"}, ["uku"] = {"Ukue"}, ["ukv"] = {"Kuku"}, ["ukw"] = {"Ukwuani-Aboh-Ndoni"}, ["uky"] = {"Kuuk-Yak"}, ["ula"] = {"Fungwa"}, ["ulb"] = {"Ulukwumi"}, ["ulc"] = {"Ulch"}, ["ule"] = {"Lule"}, ["ulf"] = {"Usku", "Afra"}, ["uli"] = {"Ulithian"}, ["ulk"] = {"Meriam Mir"}, ["ull"] = {"Ullatan"}, ["ulm"] = {"Ulumanda'"}, ["uln"] = {"Unserdeutsch"}, ["ulu"] = {"Uma' Lung"}, ["ulw"] = {"Ulwa"}, ["uma"] = {"Umatilla"}, ["umb"] = {"Umbundu"}, ["umc"] = {"Marrucinian"}, ["umd"] = {"Umbindhamu"}, ["umg"] = {"Morrobalama", "Umbuygamu"}, ["umi"] = {"Ukit"}, ["umm"] = {"Umon"}, ["umn"] = {"Makyan Naga"}, ["umo"] = {"Umotína"}, ["ump"] = {"Umpila"}, ["umr"] = {"Umbugarla"}, ["ums"] = {"Pendau"}, ["umu"] = {"Munsee"}, ["una"] = {"North Watut"}, ["und"] = {"Undetermined"}, ["une"] = {"Uneme"}, ["ung"] = {"Ngarinyin"}, ["unk"] = {"Enawené-Nawé"}, ["unm"] = {"Unami"}, ["unn"] = {"Kurnai"}, ["unr"] = {"Mundari"}, ["unu"] = {"Unubahe"}, ["unx"] = {"Munda"}, ["unz"] = {"Unde Kaili"}, ["upi"] = {"Umeda"}, ["upv"] = {"Uripiv-Wala-Rano-Atchin"}, ["ura"] = {"Urarina"}, ["urb"] = {"Urubú-Kaapor", "Kaapor"}, ["urc"] = {"Urningangg"}, ["ure"] = {"Uru"}, ["urf"] = {"Uradhi"}, ["urg"] = {"Urigina"}, ["urh"] = {"Urhobo"}, ["uri"] = {"Urim"}, ["urj"] = {"Uralic languages"}, ["urk"] = {"Urak Lawoi'"}, ["url"] = {"Urali"}, ["urm"] = {"Urapmin"}, ["urn"] = {"Uruangnirin"}, ["uro"] = {"Ura (Papua New Guinea)"}, ["urp"] = {"Uru-Pa-In"}, ["urr"] = {"Lehalurup", "Löyöp"}, ["urt"] = {"Urat"}, ["uru"] = {"Urumi"}, ["urv"] = {"Uruava"}, ["urw"] = {"Sop"}, ["urx"] = {"Urimo"}, ["ury"] = {"Orya"}, ["urz"] = {"Uru-Eu-Wau-Wau"}, ["usa"] = {"Usarufa"}, ["ush"] = {"Ushojo"}, ["usi"] = {"Usui"}, ["usk"] = {"Usaghade"}, ["usp"] = {"Uspanteco"}, ["uss"] = {"us-Saare"}, ["usu"] = {"Uya"}, ["uta"] = {"Otank"}, ["ute"] = {"Ute-Southern Paiute"}, ["uth"] = {"ut-Hun"}, ["utp"] = {"Amba (Solomon Islands)"}, ["utr"] = {"Etulo"}, ["utu"] = {"Utu"}, ["uum"] = {"Urum"}, ["uun"] = {"Kulon-Pazeh"}, ["uur"] = {"Ura (Vanuatu)"}, ["uuu"] = {"U"}, ["uve"] = {"West Uvean", "Fagauvea"}, ["uvh"] = {"Uri"}, ["uvl"] = {"Lote"}, ["uwa"] = {"Kuku-Uwanh"}, ["uya"] = {"Doko-Uyanga"}, ["uzn"] = {"Northern Uzbek"}, ["uzs"] = {"Southern Uzbek"}, ["vaa"] = {"Vaagri Booli"}, ["vae"] = {"Vale"}, ["vaf"] = {"Vafsi"}, ["vag"] = {"Vagla"}, ["vah"] = {"Varhadi-Nagpuri"}, ["vai"] = {"Vai"}, ["vaj"] = {"Sekele", "Northwestern ǃKung", "Vasekele"}, ["val"] = {"Vehes"}, ["vam"] = {"Vanimo"}, ["van"] = {"Valman"}, ["vao"] = {"Vao"}, ["vap"] = {"Vaiphei"}, ["var"] = {"Huarijio"}, ["vas"] = {"Vasavi"}, ["vau"] = {"Vanuma"}, ["vav"] = {"Varli"}, ["vay"] = {"Wayu"}, ["vbb"] = {"Southeast Babar"}, ["vbk"] = {"Southwestern Bontok"}, ["vec"] = {"Venetian"}, ["ved"] = {"Veddah"}, ["vel"] = {"Veluws"}, ["vem"] = {"Vemgo-Mabas"}, ["veo"] = {"Ventureño"}, ["vep"] = {"Veps"}, ["ver"] = {"Mom Jango"}, ["vgr"] = {"Vaghri"}, ["vgt"] = {"Vlaamse Gebarentaal", "Flemish Sign Language"}, ["vic"] = {"Virgin Islands Creole English"}, ["vid"] = {"Vidunda"}, ["vif"] = {"Vili"}, ["vig"] = {"Viemo"}, ["vil"] = {"Vilela"}, ["vin"] = {"Vinza"}, ["vis"] = {"Vishavan"}, ["vit"] = {"Viti"}, ["viv"] = {"Iduna"}, ["vka"] = {"Kariyarra"}, ["vki"] = {"Ija-Zuba"}, ["vkj"] = {"Kujarge"}, ["vkk"] = {"Kaur"}, ["vkl"] = {"Kulisusu"}, ["vkm"] = {"Kamakan"}, ["vko"] = {"Kodeoha"}, ["vkp"] = {"Korlai Creole Portuguese"}, ["vkt"] = {"Tenggarong Kutai Malay"}, ["vku"] = {"Kurrama"}, ["vlp"] = {"Valpei"}, ["vls"] = {"Vlaams"}, ["vma"] = {"Martuyhunira"}, ["vmb"] = {"Barbaram"}, ["vmc"] = {"Juxtlahuaca Mixtec"}, ["vmd"] = {"Mudu Koraga"}, ["vme"] = {"East Masela"}, ["vmf"] = {"Mainfränkisch"}, ["vmg"] = {"Lungalunga"}, ["vmh"] = {"Maraghei"}, ["vmi"] = {"Miwa"}, ["vmj"] = {"Ixtayutla Mixtec"}, ["vmk"] = {"Makhuwa-Shirima"}, ["vml"] = {"Malgana"}, ["vmm"] = {"Mitlatongo Mixtec"}, ["vmp"] = {"Soyaltepec Mazatec"}, ["vmq"] = {"Soyaltepec Mixtec"}, ["vmr"] = {"Marenje"}, ["vms"] = {"Moksela"}, ["vmu"] = {"Muluridyi"}, ["vmv"] = {"Valley Maidu"}, ["vmw"] = {"Makhuwa"}, ["vmx"] = {"Tamazola Mixtec"}, ["vmy"] = {"Ayautla Mazatec"}, ["vmz"] = {"Mazatlán Mazatec"}, ["vnk"] = {"Vano", "Lovono"}, ["vnm"] = {"Vinmavis", "Neve'ei"}, ["vnp"] = {"Vunapu"}, ["vor"] = {"Voro"}, ["vot"] = {"Votic"}, ["vra"] = {"Vera'a"}, ["vro"] = {"Võro"}, ["vrs"] = {"Varisi"}, ["vrt"] = {"Burmbar", "Banam Bay"}, ["vsi"] = {"Moldova Sign Language"}, ["vsl"] = {"Venezuelan Sign Language"}, ["vsv"] = {"Valencian Sign Language", "Llengua de signes valenciana"}, ["vto"] = {"Vitou"}, ["vum"] = {"Vumbu"}, ["vun"] = {"Vunjo"}, ["vut"] = {"Vute"}, ["vwa"] = {"Awa (China)"}, ["waa"] = {"Walla Walla"}, ["wab"] = {"Wab"}, ["wac"] = {"Wasco-Wishram"}, ["wad"] = {"Wandamen"}, ["wae"] = {"Walser"}, ["waf"] = {"Wakoná"}, ["wag"] = {"Wa'ema"}, ["wah"] = {"Watubela"}, ["wai"] = {"Wares"}, ["waj"] = {"Waffa"}, ["wak"] = {"Wakashan languages"}, ["wal"] = {"Wolaytta", "Wolaitta"}, ["wam"] = {"Wampanoag"}, ["wan"] = {"Wan"}, ["wao"] = {"Wappo"}, ["wap"] = {"Wapishana"}, ["waq"] = {"Wagiman"}, ["war"] = {"Waray (Philippines)"}, ["was"] = {"Washo"}, ["wat"] = {"Kaninuwa"}, ["wau"] = {"Waurá"}, ["wav"] = {"Waka"}, ["waw"] = {"Waiwai"}, ["wax"] = {"Watam", "Marangis"}, ["way"] = {"Wayana"}, ["waz"] = {"Wampur"}, ["wba"] = {"Warao"}, ["wbb"] = {"Wabo"}, ["wbe"] = {"Waritai"}, ["wbf"] = {"Wara"}, ["wbh"] = {"Wanda"}, ["wbi"] = {"Vwanji"}, ["wbj"] = {"Alagwa"}, ["wbk"] = {"Waigali"}, ["wbl"] = {"Wakhi"}, ["wbm"] = {"Wa"}, ["wbp"] = {"Warlpiri"}, ["wbq"] = {"Waddar"}, ["wbr"] = {"Wagdi"}, ["wbs"] = {"West Bengal Sign Language"}, ["wbt"] = {"Warnman"}, ["wbv"] = {"Wajarri"}, ["wbw"] = {"Woi"}, ["wca"] = {"Yanomámi"}, ["wci"] = {"Waci Gbe"}, ["wdd"] = {"Wandji"}, ["wdg"] = {"Wadaginam"}, ["wdj"] = {"Wadjiginy"}, ["wdk"] = {"Wadikali"}, ["wdu"] = {"Wadjigu"}, ["wdy"] = {"Wadjabangayi"}, ["wea"] = {"Wewaw"}, ["wec"] = {"Wè Western"}, ["wed"] = {"Wedau"}, ["weg"] = {"Wergaia"}, ["weh"] = {"Weh"}, ["wei"] = {"Kiunum"}, ["wem"] = {"Weme Gbe"}, ["wen"] = {"Sorbian languages"}, ["weo"] = {"Wemale"}, ["wep"] = {"Westphalien"}, ["wer"] = {"Weri"}, ["wes"] = {"Cameroon Pidgin"}, ["wet"] = {"Perai"}, ["weu"] = {"Rawngtu Chin"}, ["wew"] = {"Wejewa"}, ["wfg"] = {"Yafi", "Zorop"}, ["wga"] = {"Wagaya"}, ["wgb"] = {"Wagawaga"}, ["wgg"] = {"Wangkangurru", "Wangganguru"}, ["wgi"] = {"Wahgi"}, ["wgo"] = {"Waigeo"}, ["wgu"] = {"Wirangu"}, ["wgy"] = {"Warrgamay"}, ["wha"] = {"Sou Upaa", "Manusela"}, ["whg"] = {"North Wahgi"}, ["whk"] = {"Wahau Kenyah"}, ["whu"] = {"Wahau Kayan"}, ["wib"] = {"Southern Toussian"}, ["wic"] = {"Wichita"}, ["wie"] = {"Wik-Epa"}, ["wif"] = {"Wik-Keyangan"}, ["wig"] = {"Wik Ngathan"}, ["wih"] = {"Wik-Me'anha"}, ["wii"] = {"Minidien"}, ["wij"] = {"Wik-Iiyanh"}, ["wik"] = {"Wikalkan"}, ["wil"] = {"Wilawila"}, ["wim"] = {"Wik-Mungkan"}, ["win"] = {"Ho-Chunk"}, ["wir"] = {"Wiraféd"}, ["wiu"] = {"Wiru"}, ["wiv"] = {"Vitu"}, ["wiy"] = {"Wiyot"}, ["wja"] = {"Waja"}, ["wji"] = {"Warji"}, ["wka"] = {"Kw'adza"}, ["wkb"] = {"Kumbaran"}, ["wkd"] = {"Wakde", "Mo"}, ["wkl"] = {"Kalanadi"}, ["wkr"] = {"Keerray-Woorroong"}, ["wku"] = {"Kunduvadi"}, ["wkw"] = {"Wakawaka"}, ["wky"] = {"Wangkayutyuru"}, ["wla"] = {"Walio"}, ["wlc"] = {"Mwali Comorian"}, ["wle"] = {"Wolane"}, ["wlg"] = {"Kunbarlang"}, ["wlh"] = {"Welaun"}, ["wli"] = {"Waioli"}, ["wlk"] = {"Wailaki"}, ["wll"] = {"Wali (Sudan)"}, ["wlm"] = {"Middle Welsh"}, ["wlo"] = {"Wolio"}, ["wlr"] = {"Wailapa"}, ["wls"] = {"Wallisian"}, ["wlu"] = {"Wuliwuli"}, ["wlv"] = {"Wichí Lhamtés Vejoz"}, ["wlw"] = {"Walak"}, ["wlx"] = {"Wali (Ghana)"}, ["wly"] = {"Waling"}, ["wma"] = {"Mawa (Nigeria)"}, ["wmb"] = {"Wambaya"}, ["wmc"] = {"Wamas"}, ["wmd"] = {"Mamaindé"}, ["wme"] = {"Wambule"}, ["wmh"] = {"Waima'a"}, ["wmi"] = {"Wamin"}, ["wmm"] = {"Maiwa (Indonesia)"}, ["wmn"] = {"Waamwang"}, ["wmo"] = {"Wom (Papua New Guinea)"}, ["wms"] = {"Wambon"}, ["wmt"] = {"Walmajarri"}, ["wmw"] = {"Mwani"}, ["wmx"] = {"Womo"}, ["wnb"] = {"Wanambre"}, ["wnc"] = {"Wantoat"}, ["wnd"] = {"Wandarang"}, ["wne"] = {"Waneci"}, ["wng"] = {"Wanggom"}, ["wni"] = {"Ndzwani Comorian"}, ["wnk"] = {"Wanukaka"}, ["wnm"] = {"Wanggamala"}, ["wnn"] = {"Wunumara"}, ["wno"] = {"Wano"}, ["wnp"] = {"Wanap"}, ["wnu"] = {"Usan"}, ["wnw"] = {"Wintu"}, ["wny"] = {"Wanyi", "Waanyi"}, ["woa"] = {"Kuwema", "Tyaraity"}, ["wob"] = {"Wè Northern"}, ["woc"] = {"Wogeo"}, ["wod"] = {"Wolani"}, ["woe"] = {"Woleaian"}, ["wof"] = {"Gambian Wolof"}, ["wog"] = {"Wogamusin"}, ["woi"] = {"Kamang"}, ["wok"] = {"Longto"}, ["wom"] = {"Wom (Nigeria)"}, ["won"] = {"Wongo"}, ["woo"] = {"Manombai"}, ["wor"] = {"Woria"}, ["wos"] = {"Hanga Hundi"}, ["wow"] = {"Wawonii"}, ["woy"] = {"Weyto"}, ["wpc"] = {"Maco"}, ["wra"] = {"Warapu"}, ["wrb"] = {"Waluwarra", "Warluwara"}, ["wrd"] = {"Warduji"}, ["wrg"] = {"Warungu", "Gudjal"}, ["wrh"] = {"Wiradjuri"}, ["wri"] = {"Wariyangga"}, ["wrk"] = {"Garrwa"}, ["wrl"] = {"Warlmanpa"}, ["wrm"] = {"Warumungu"}, ["wrn"] = {"Warnang"}, ["wro"] = {"Worrorra"}, ["wrp"] = {"Waropen"}, ["wrr"] = {"Wardaman"}, ["wrs"] = {"Waris"}, ["wru"] = {"Waru"}, ["wrv"] = {"Waruna"}, ["wrw"] = {"Gugu Warra"}, ["wrx"] = {"Wae Rana"}, ["wry"] = {"Merwari"}, ["wrz"] = {"Waray (Australia)"}, ["wsa"] = {"Warembori"}, ["wsg"] = {"Adilabad Gondi"}, ["wsi"] = {"Wusi"}, ["wsk"] = {"Waskia"}, ["wsr"] = {"Owenia"}, ["wss"] = {"Wasa"}, ["wsu"] = {"Wasu"}, ["wsv"] = {"Wotapuri-Katarqalai"}, ["wtf"] = {"Watiwa"}, ["wth"] = {"Wathawurrung"}, ["wti"] = {"Berta"}, ["wtk"] = {"Watakataui"}, ["wtm"] = {"Mewati"}, ["wtw"] = {"Wotu"}, ["wua"] = {"Wikngenchera"}, ["wub"] = {"Wunambal"}, ["wud"] = {"Wudu"}, ["wuh"] = {"Wutunhua"}, ["wul"] = {"Silimo"}, ["wum"] = {"Wumbvu"}, ["wun"] = {"Bungu"}, ["wur"] = {"Wurrugu"}, ["wut"] = {"Wutung"}, ["wuu"] = {"Wu Chinese"}, ["wuv"] = {"Wuvulu-Aua"}, ["wux"] = {"Wulna"}, ["wuy"] = {"Wauyai"}, ["wwa"] = {"Waama"}, ["wwb"] = {"Wakabunga"}, ["wwo"] = {"Wetamut", "Dorig"}, ["wwr"] = {"Warrwa"}, ["www"] = {"Wawa"}, ["wxa"] = {"Waxianghua"}, ["wxw"] = {"Wardandi"}, ["wya"] = {"Wyandot"}, ["wyb"] = {"Wangaaybuwan-Ngiyambaa"}, ["wyi"] = {"Woiwurrung"}, ["wym"] = {"Wymysorys"}, ["wyr"] = {"Wayoró"}, ["wyy"] = {"Western Fijian"}, ["xaa"] = {"Andalusian Arabic"}, ["xab"] = {"Sambe"}, ["xac"] = {"Kachari"}, ["xad"] = {"Adai"}, ["xae"] = {"Aequian"}, ["xag"] = {"Aghwan"}, ["xai"] = {"Kaimbé"}, ["xaj"] = {"Ararandewára"}, ["xak"] = {"Máku"}, ["xal"] = {"Kalmyk", "Oirat"}, ["xam"] = {"ǀXam"}, ["xan"] = {"Xamtanga"}, ["xao"] = {"Khao"}, ["xap"] = {"Apalachee"}, ["xaq"] = {"Aquitanian"}, ["xar"] = {"Karami"}, ["xas"] = {"Kamas"}, ["xat"] = {"Katawixi"}, ["xau"] = {"Kauwera"}, ["xav"] = {"Xavánte"}, ["xaw"] = {"Kawaiisu"}, ["xay"] = {"Kayan Mahakam"}, ["xbb"] = {"Lower Burdekin"}, ["xbc"] = {"Bactrian"}, ["xbd"] = {"Bindal"}, ["xbe"] = {"Bigambal"}, ["xbg"] = {"Bunganditj"}, ["xbi"] = {"Kombio"}, ["xbj"] = {"Birrpayi"}, ["xbm"] = {"Middle Breton"}, ["xbn"] = {"Kenaboi"}, ["xbo"] = {"Bolgarian"}, ["xbp"] = {"Bibbulman"}, ["xbr"] = {"Kambera"}, ["xbw"] = {"Kambiwá"}, ["xby"] = {"Batjala", "Batyala"}, ["xcb"] = {"Cumbric"}, ["xcc"] = {"Camunic"}, ["xce"] = {"Celtiberian"}, ["xcg"] = {"Cisalpine Gaulish"}, ["xch"] = {"Chemakum", "Chimakum"}, ["xcl"] = {"Classical Armenian"}, ["xcm"] = {"Comecrudo"}, ["xcn"] = {"Cotoname"}, ["xco"] = {"Chorasmian"}, ["xcr"] = {"Carian"}, ["xct"] = {"Classical Tibetan"}, ["xcu"] = {"Curonian"}, ["xcv"] = {"Chuvantsy"}, ["xcw"] = {"Coahuilteco"}, ["xcy"] = {"Cayuse"}, ["xda"] = {"Darkinyung"}, ["xdc"] = {"Dacian"}, ["xdk"] = {"Dharuk"}, ["xdm"] = {"Edomite"}, ["xdo"] = {"Kwandu"}, ["xdy"] = {"Malayic Dayak"}, ["xeb"] = {"Eblan"}, ["xed"] = {"Hdi"}, ["xeg"] = {"ǁXegwi"}, ["xel"] = {"Kelo"}, ["xem"] = {"Kembayan"}, ["xep"] = {"Epi-Olmec"}, ["xer"] = {"Xerénte"}, ["xes"] = {"Kesawai"}, ["xet"] = {"Xetá"}, ["xeu"] = {"Keoru-Ahia"}, ["xfa"] = {"Faliscan"}, ["xga"] = {"Galatian"}, ["xgb"] = {"Gbin"}, ["xgd"] = {"Gudang"}, ["xgf"] = {"Gabrielino-Fernandeño"}, ["xgg"] = {"Goreng"}, ["xgi"] = {"Garingbal"}, ["xgl"] = {"Galindan"}, ["xgm"] = {"Dharumbal", "Guwinmal"}, ["xgn"] = {"Mongolian languages"}, ["xgr"] = {"Garza"}, ["xgu"] = {"Unggumi"}, ["xgw"] = {"Guwa"}, ["xha"] = {"Harami"}, ["xhc"] = {"Hunnic"}, ["xhd"] = {"Hadrami"}, ["xhe"] = {"Khetrani"}, ["xhr"] = {"Hernican"}, ["xht"] = {"Hattic"}, ["xhu"] = {"Hurrian"}, ["xhv"] = {"Khua"}, ["xib"] = {"Iberian"}, ["xii"] = {"Xiri"}, ["xil"] = {"Illyrian"}, ["xin"] = {"Xinca"}, ["xir"] = {"Xiriâna"}, ["xis"] = {"Kisan"}, ["xiv"] = {"Indus Valley Language"}, ["xiy"] = {"Xipaya"}, ["xjb"] = {"Minjungbal"}, ["xjt"] = {"Jaitmatang"}, ["xka"] = {"Kalkoti"}, ["xkb"] = {"Northern Nago"}, ["xkc"] = {"Kho'ini"}, ["xkd"] = {"Mendalam Kayan"}, ["xke"] = {"Kereho"}, ["xkf"] = {"Khengkha"}, ["xkg"] = {"Kagoro"}, ["xki"] = {"Kenyan Sign Language"}, ["xkj"] = {"Kajali"}, ["xkk"] = {"Kaco'"}, ["xkl"] = {"Mainstream Kenyah"}, ["xkn"] = {"Kayan River Kayan"}, ["xko"] = {"Kiorr"}, ["xkp"] = {"Kabatei"}, ["xkq"] = {"Koroni"}, ["xkr"] = {"Xakriabá"}, ["xks"] = {"Kumbewaha"}, ["xkt"] = {"Kantosi"}, ["xku"] = {"Kaamba"}, ["xkv"] = {"Kgalagadi"}, ["xkw"] = {"Kembra"}, ["xkx"] = {"Karore"}, ["xky"] = {"Uma' Lasan"}, ["xkz"] = {"Kurtokha"}, ["xla"] = {"Kamula"}, ["xlb"] = {"Loup B"}, ["xlc"] = {"Lycian"}, ["xld"] = {"Lydian"}, ["xle"] = {"Lemnian"}, ["xlg"] = {"Ligurian (Ancient)"}, ["xli"] = {"Liburnian"}, ["xln"] = {"Alanic"}, ["xlo"] = {"Loup A"}, ["xlp"] = {"Lepontic"}, ["xls"] = {"Lusitanian"}, ["xlu"] = {"Cuneiform Luwian"}, ["xly"] = {"Elymian"}, ["xma"] = {"Mushungulu"}, ["xmb"] = {"Mbonga"}, ["xmc"] = {"Makhuwa-Marrevone"}, ["xmd"] = {"Mbudum"}, ["xme"] = {"Median"}, ["xmf"] = {"Mingrelian"}, ["xmg"] = {"Mengaka"}, ["xmh"] = {"Kugu-Muminh"}, ["xmj"] = {"Majera"}, ["xmk"] = {"Ancient Macedonian"}, ["xml"] = {"Malaysian Sign Language"}, ["xmm"] = {"Manado Malay"}, ["xmn"] = {"Manichaean Middle Persian"}, ["xmo"] = {"Morerebi"}, ["xmp"] = {"Kuku-Mu'inh"}, ["xmq"] = {"Kuku-Mangk"}, ["xmr"] = {"Meroitic"}, ["xms"] = {"Moroccan Sign Language"}, ["xmt"] = {"Matbat"}, ["xmu"] = {"Kamu"}, ["xmv"] = {"Antankarana Malagasy", "Tankarana Malagasy"}, ["xmw"] = {"Tsimihety Malagasy"}, ["xmx"] = {"Maden"}, ["xmy"] = {"Mayaguduna"}, ["xmz"] = {"Mori Bawah"}, ["xna"] = {"Ancient North Arabian"}, ["xnb"] = {"Kanakanabu"}, ["xnd"] = {"Na-Dene languages"}, ["xng"] = {"Middle Mongolian"}, ["xnh"] = {"Kuanhua"}, ["xni"] = {"Ngarigu"}, ["xnk"] = {"Nganakarti"}, ["xnm"] = {"Ngumbarl"}, ["xnn"] = {"Northern Kankanay"}, ["xno"] = {"Anglo-Norman"}, ["xnr"] = {"Kangri"}, ["xns"] = {"Kanashi"}, ["xnt"] = {"Narragansett"}, ["xnu"] = {"Nukunul"}, ["xny"] = {"Nyiyaparli"}, ["xnz"] = {"Kenzi", "Mattoki"}, ["xoc"] = {"O'chi'chi'"}, ["xod"] = {"Kokoda"}, ["xog"] = {"Soga"}, ["xoi"] = {"Kominimung"}, ["xok"] = {"Xokleng"}, ["xom"] = {"Komo (Sudan)"}, ["xon"] = {"Konkomba"}, ["xoo"] = {"Xukurú"}, ["xop"] = {"Kopar"}, ["xor"] = {"Korubo"}, ["xow"] = {"Kowaki"}, ["xpa"] = {"Pirriya"}, ["xpb"] = {"Northeastern Tasmanian", "Pyemmairrener"}, ["xpc"] = {"Pecheneg"}, ["xpd"] = {"Oyster Bay Tasmanian"}, ["xpe"] = {"Liberia Kpelle"}, ["xpf"] = {"Southeast Tasmanian", "Nuenonne"}, ["xpg"] = {"Phrygian"}, ["xph"] = {"North Midlands Tasmanian", "Tyerrenoterpanner"}, ["xpi"] = {"Pictish"}, ["xpj"] = {"Mpalitjanh"}, ["xpk"] = {"Kulina Pano"}, ["xpl"] = {"Port Sorell Tasmanian"}, ["xpm"] = {"Pumpokol"}, ["xpn"] = {"Kapinawá"}, ["xpo"] = {"Pochutec"}, ["xpp"] = {"Puyo-Paekche"}, ["xpq"] = {"Mohegan-Pequot"}, ["xpr"] = {"Parthian"}, ["xps"] = {"Pisidian"}, ["xpt"] = {"Punthamara"}, ["xpu"] = {"Punic"}, ["xpv"] = {"Northern Tasmanian", "Tommeginne"}, ["xpw"] = {"Northwestern Tasmanian", "Peerapper"}, ["xpx"] = {"Southwestern Tasmanian", "Toogee"}, ["xpy"] = {"Puyo"}, ["xpz"] = {"Bruny Island Tasmanian"}, ["xqa"] = {"Karakhanid"}, ["xqt"] = {"Qatabanian"}, ["xra"] = {"Krahô"}, ["xrb"] = {"Eastern Karaboro"}, ["xrd"] = {"Gundungurra"}, ["xre"] = {"Kreye"}, ["xrg"] = {"Minang"}, ["xri"] = {"Krikati-Timbira"}, ["xrm"] = {"Armazic"}, ["xrn"] = {"Arin"}, ["xrr"] = {"Raetic"}, ["xrt"] = {"Aranama-Tamique"}, ["xru"] = {"Marriammu"}, ["xrw"] = {"Karawa"}, ["xsa"] = {"Sabaean"}, ["xsb"] = {"Sambal"}, ["xsc"] = {"Scythian"}, ["xsd"] = {"Sidetic"}, ["xse"] = {"Sempan"}, ["xsh"] = {"Shamang"}, ["xsi"] = {"Sio"}, ["xsj"] = {"Subi"}, ["xsl"] = {"South Slavey"}, ["xsm"] = {"Kasem"}, ["xsn"] = {"Sanga (Nigeria)"}, ["xso"] = {"Solano"}, ["xsp"] = {"Silopi"}, ["xsq"] = {"Makhuwa-Saka"}, ["xsr"] = {"Sherpa"}, ["xss"] = {"Assan"}, ["xsu"] = {"Sanumá"}, ["xsv"] = {"Sudovian"}, ["xsy"] = {"Saisiyat"}, ["xta"] = {"Alcozauca Mixtec"}, ["xtb"] = {"Chazumba Mixtec"}, ["xtc"] = {"Katcha-Kadugli-Miri"}, ["xtd"] = {"Diuxi-Tilantongo Mixtec"}, ["xte"] = {"Ketengban"}, ["xtg"] = {"Transalpine Gaulish"}, ["xth"] = {"Yitha Yitha"}, ["xti"] = {"Sinicahua Mixtec"}, ["xtj"] = {"San Juan Teita Mixtec"}, ["xtl"] = {"Tijaltepec Mixtec"}, ["xtm"] = {"Magdalena Peñasco Mixtec"}, ["xtn"] = {"Northern Tlaxiaco Mixtec"}, ["xto"] = {"Tokharian A"}, ["xtp"] = {"San Miguel Piedras Mixtec"}, ["xtq"] = {"Tumshuqese"}, ["xtr"] = {"Early Tripuri"}, ["xts"] = {"Sindihui Mixtec"}, ["xtt"] = {"Tacahua Mixtec"}, ["xtu"] = {"Cuyamecalco Mixtec"}, ["xtv"] = {"Thawa"}, ["xtw"] = {"Tawandê"}, ["xty"] = {"Yoloxochitl Mixtec"}, ["xua"] = {"Alu Kurumba"}, ["xub"] = {"Betta Kurumba"}, ["xud"] = {"Umiida"}, ["xug"] = {"Kunigami"}, ["xuj"] = {"Jennu Kurumba"}, ["xul"] = {"Ngunawal", "Nunukul"}, ["xum"] = {"Umbrian"}, ["xun"] = {"Unggaranggu"}, ["xuo"] = {"Kuo"}, ["xup"] = {"Upper Umpqua"}, ["xur"] = {"Urartian"}, ["xut"] = {"Kuthant"}, ["xuu"] = {"Kxoe", "Khwedam"}, ["xve"] = {"Venetic"}, ["xvi"] = {"Kamviri"}, ["xvn"] = {"Vandalic"}, ["xvo"] = {"Volscian"}, ["xvs"] = {"Vestinian"}, ["xwa"] = {"Kwaza"}, ["xwc"] = {"Woccon"}, ["xwd"] = {"Wadi Wadi"}, ["xwe"] = {"Xwela Gbe"}, ["xwg"] = {"Kwegu"}, ["xwj"] = {"Wajuk"}, ["xwk"] = {"Wangkumara"}, ["xwl"] = {"Western Xwla Gbe"}, ["xwo"] = {"Written Oirat"}, ["xwr"] = {"Kwerba Mamberamo"}, ["xwt"] = {"Wotjobaluk"}, ["xww"] = {"Wemba Wemba"}, ["xxb"] = {"Boro (Ghana)"}, ["xxk"] = {"Ke'o"}, ["xxm"] = {"Minkin"}, ["xxr"] = {"Koropó"}, ["xxt"] = {"Tambora"}, ["xya"] = {"Yaygir"}, ["xyb"] = {"Yandjibara"}, ["xyj"] = {"Mayi-Yapi"}, ["xyk"] = {"Mayi-Kulan"}, ["xyl"] = {"Yalakalore"}, ["xyt"] = {"Mayi-Thakurti"}, ["xyy"] = {"Yorta Yorta"}, ["xzh"] = {"Zhang-Zhung"}, ["xzm"] = {"Zemgalian"}, ["xzp"] = {"Ancient Zapotec"}, ["yaa"] = {"Yaminahua"}, ["yab"] = {"Yuhup"}, ["yac"] = {"Pass Valley Yali"}, ["yad"] = {"Yagua"}, ["yae"] = {"Pumé"}, ["yaf"] = {"Yaka (Democratic Republic of Congo)"}, ["yag"] = {"Yámana"}, ["yah"] = {"Yazgulyam"}, ["yai"] = {"Yagnobi"}, ["yaj"] = {"Banda-Yangere"}, ["yak"] = {"Yakama"}, ["yal"] = {"Yalunka"}, ["yam"] = {"Yamba"}, ["yan"] = {"Mayangna"}, ["yao"] = {"Yao"}, ["yap"] = {"Yapese"}, ["yaq"] = {"Yaqui"}, ["yar"] = {"Yabarana"}, ["yas"] = {"Nugunu (Cameroon)"}, ["yat"] = {"Yambeta"}, ["yau"] = {"Yuwana"}, ["yav"] = {"Yangben"}, ["yaw"] = {"Yawalapití"}, ["yax"] = {"Yauma"}, ["yay"] = {"Agwagwune"}, ["yaz"] = {"Lokaa"}, ["yba"] = {"Yala"}, ["ybb"] = {"Yemba"}, ["ybe"] = {"West Yugur"}, ["ybh"] = {"Yakha"}, ["ybi"] = {"Yamphu"}, ["ybj"] = {"Hasha"}, ["ybk"] = {"Bokha"}, ["ybl"] = {"Yukuben"}, ["ybm"] = {"Yaben"}, ["ybn"] = {"Yabaâna"}, ["ybo"] = {"Yabong"}, ["ybx"] = {"Yawiyo"}, ["yby"] = {"Yaweyuha"}, ["ych"] = {"Chesu"}, ["ycl"] = {"Lolopo"}, ["ycn"] = {"Yucuna"}, ["ycp"] = {"Chepya"}, ["yda"] = {"Yanda"}, ["ydd"] = {"Eastern Yiddish"}, ["yde"] = {"Yangum Dey"}, ["ydg"] = {"Yidgha"}, ["ydk"] = {"Yoidik"}, ["yea"] = {"Ravula"}, ["yec"] = {"Yeniche"}, ["yee"] = {"Yimas"}, ["yei"] = {"Yeni"}, ["yej"] = {"Yevanic"}, ["yel"] = {"Yela"}, ["yer"] = {"Tarok"}, ["yes"] = {"Nyankpa"}, ["yet"] = {"Yetfa"}, ["yeu"] = {"Yerukula"}, ["yev"] = {"Yapunda"}, ["yey"] = {"Yeyi"}, ["yga"] = {"Malyangapa"}, ["ygi"] = {"Yiningayi"}, ["ygl"] = {"Yangum Gel"}, ["ygm"] = {"Yagomi"}, ["ygp"] = {"Gepo"}, ["ygr"] = {"Yagaria"}, ["ygs"] = {"Yolŋu Sign Language"}, ["ygu"] = {"Yugul"}, ["ygw"] = {"Yagwoia"}, ["yha"] = {"Baha Buyang"}, ["yhd"] = {"Judeo-Iraqi Arabic"}, ["yhl"] = {"Hlepho Phowa"}, ["yhs"] = {"Yan-nhaŋu Sign Language"}, ["yia"] = {"Yinggarda"}, ["yif"] = {"Ache"}, ["yig"] = {"Wusa Nasu"}, ["yih"] = {"Western Yiddish"}, ["yii"] = {"Yidiny"}, ["yij"] = {"Yindjibarndi"}, ["yik"] = {"Dongshanba Lalo"}, ["yil"] = {"Yindjilandji"}, ["yim"] = {"Yimchungru Naga"}, ["yin"] = {"Riang Lai", "Yinchia"}, ["yip"] = {"Pholo"}, ["yiq"] = {"Miqie"}, ["yir"] = {"North Awyu"}, ["yis"] = {"Yis"}, ["yit"] = {"Eastern Lalu"}, ["yiu"] = {"Awu"}, ["yiv"] = {"Northern Nisu"}, ["yix"] = {"Axi Yi"}, ["yiz"] = {"Azhe"}, ["yka"] = {"Yakan"}, ["ykg"] = {"Northern Yukaghir"}, ["yki"] = {"Yoke"}, ["ykk"] = {"Yakaikeke"}, ["ykl"] = {"Khlula"}, ["ykm"] = {"Kap"}, ["ykn"] = {"Kua-nsi"}, ["yko"] = {"Yasa"}, ["ykr"] = {"Yekora"}, ["ykt"] = {"Kathu"}, ["yku"] = {"Kuamasi"}, ["yky"] = {"Yakoma"}, ["yla"] = {"Yaul"}, ["ylb"] = {"Yaleba"}, ["yle"] = {"Yele"}, ["ylg"] = {"Yelogu"}, ["yli"] = {"Angguruk Yali"}, ["yll"] = {"Yil"}, ["ylm"] = {"Limi"}, ["yln"] = {"Langnian Buyang"}, ["ylo"] = {"Naluo Yi"}, ["ylr"] = {"Yalarnnga"}, ["ylu"] = {"Aribwaung"}, ["yly"] = {"Nyâlayu", "Nyelâyu"}, ["ymb"] = {"Yambes"}, ["ymc"] = {"Southern Muji"}, ["ymd"] = {"Muda"}, ["yme"] = {"Yameo"}, ["ymg"] = {"Yamongeri"}, ["ymh"] = {"Mili"}, ["ymi"] = {"Moji"}, ["ymk"] = {"Makwe"}, ["yml"] = {"Iamalele"}, ["ymm"] = {"Maay"}, ["ymn"] = {"Yamna", "Sunum"}, ["ymo"] = {"Yangum Mon"}, ["ymp"] = {"Yamap"}, ["ymq"] = {"Qila Muji"}, ["ymr"] = {"Malasar"}, ["yms"] = {"Mysian"}, ["ymx"] = {"Northern Muji"}, ["ymz"] = {"Muzi"}, ["yna"] = {"Aluo"}, ["ynd"] = {"Yandruwandha"}, ["yne"] = {"Lang'e"}, ["yng"] = {"Yango"}, ["ynk"] = {"Naukan Yupik"}, ["ynl"] = {"Yangulam"}, ["ynn"] = {"Yana"}, ["yno"] = {"Yong"}, ["ynq"] = {"Yendang"}, ["yns"] = {"Yansi"}, ["ynu"] = {"Yahuna"}, ["yob"] = {"Yoba"}, ["yog"] = {"Yogad"}, ["yoi"] = {"Yonaguni"}, ["yok"] = {"Yokuts"}, ["yol"] = {"Yola"}, ["yom"] = {"Yombe"}, ["yon"] = {"Yongkom"}, ["yot"] = {"Yotti"}, ["yox"] = {"Yoron"}, ["yoy"] = {"Yoy"}, ["ypa"] = {"Phala"}, ["ypb"] = {"Labo Phowa"}, ["ypg"] = {"Phola"}, ["yph"] = {"Phupha"}, ["ypk"] = {"Yupik languages"}, ["ypm"] = {"Phuma"}, ["ypn"] = {"Ani Phowa"}, ["ypo"] = {"Alo Phola"}, ["ypp"] = {"Phupa"}, ["ypz"] = {"Phuza"}, ["yra"] = {"Yerakai"}, ["yrb"] = {"Yareba"}, ["yre"] = {"Yaouré"}, ["yrk"] = {"Nenets"}, ["yrl"] = {"Nhengatu"}, ["yrm"] = {"Yirrk-Mel"}, ["yrn"] = {"Yerong"}, ["yro"] = {"Yaroamë"}, ["yrs"] = {"Yarsun"}, ["yrw"] = {"Yarawata"}, ["yry"] = {"Yarluyandi"}, ["ysc"] = {"Yassic"}, ["ysd"] = {"Samatao"}, ["ysg"] = {"Sonaga"}, ["ysl"] = {"Yugoslavian Sign Language"}, ["ysn"] = {"Sani"}, ["yso"] = {"Nisi (China)"}, ["ysp"] = {"Southern Lolopo"}, ["ysr"] = {"Sirenik Yupik"}, ["yss"] = {"Yessan-Mayo"}, ["ysy"] = {"Sanie"}, ["yta"] = {"Talu"}, ["ytl"] = {"Tanglang"}, ["ytp"] = {"Thopho"}, ["ytw"] = {"Yout Wam"}, ["yty"] = {"Yatay"}, ["yua"] = {"Yucateco", "Yucatec Maya"}, ["yub"] = {"Yugambal"}, ["yuc"] = {"Yuchi"}, ["yud"] = {"Judeo-Tripolitanian Arabic"}, ["yue"] = {"Yue Chinese", "Cantonese"}, ["yuf"] = {"Havasupai-Walapai-Yavapai"}, ["yug"] = {"Yug"}, ["yui"] = {"Yurutí"}, ["yuj"] = {"Karkar-Yuri"}, ["yuk"] = {"Yuki"}, ["yul"] = {"Yulu"}, ["yum"] = {"Quechan"}, ["yun"] = {"Bena (Nigeria)"}, ["yup"] = {"Yukpa"}, ["yuq"] = {"Yuqui"}, ["yur"] = {"Yurok"}, ["yut"] = {"Yopno"}, ["yuw"] = {"Yau (Morobe Province)"}, ["yux"] = {"Southern Yukaghir"}, ["yuy"] = {"East Yugur"}, ["yuz"] = {"Yuracare"}, ["yva"] = {"Yawa"}, ["yvt"] = {"Yavitero"}, ["ywa"] = {"Kalou"}, ["ywg"] = {"Yinhawangka"}, ["ywl"] = {"Western Lalu"}, ["ywn"] = {"Yawanawa"}, ["ywq"] = {"Wuding-Luquan Yi"}, ["ywr"] = {"Yawuru"}, ["ywt"] = {"Xishanba Lalo", "Central Lalo"}, ["ywu"] = {"Wumeng Nasu"}, ["yww"] = {"Yawarawarga"}, ["yxa"] = {"Mayawali"}, ["yxg"] = {"Yagara"}, ["yxl"] = {"Yardliyawarra"}, ["yxm"] = {"Yinwum"}, ["yxu"] = {"Yuyu"}, ["yxy"] = {"Yabula Yabula"}, ["yyr"] = {"Yir Yoront"}, ["yyu"] = {"Yau (Sandaun Province)"}, ["yyz"] = {"Ayizi"}, ["yzg"] = {"E'ma Buyang"}, ["yzk"] = {"Zokhuo"}, ["zaa"] = {"Sierra de Juárez Zapotec"}, ["zab"] = {"Western Tlacolula Valley Zapotec", "San Juan Guelavía Zapotec"}, ["zac"] = {"Ocotlán Zapotec"}, ["zad"] = {"Cajonos Zapotec"}, ["zae"] = {"Yareni Zapotec"}, ["zaf"] = {"Ayoquesco Zapotec"}, ["zag"] = {"Zaghawa"}, ["zah"] = {"Zangwal"}, ["zai"] = {"Isthmus Zapotec"}, ["zaj"] = {"Zaramo"}, ["zak"] = {"Zanaki"}, ["zal"] = {"Zauzou"}, ["zam"] = {"Miahuatlán Zapotec"}, ["zao"] = {"Ozolotepec Zapotec"}, ["zap"] = {"Zapotec"}, ["zaq"] = {"Aloápam Zapotec"}, ["zar"] = {"Rincón Zapotec"}, ["zas"] = {"Santo Domingo Albarradas Zapotec"}, ["zat"] = {"Tabaa Zapotec"}, ["zau"] = {"Zangskari"}, ["zav"] = {"Yatzachi Zapotec"}, ["zaw"] = {"Mitla Zapotec"}, ["zax"] = {"Xadani Zapotec"}, ["zay"] = {"Zayse-Zergulla", "Zaysete"}, ["zaz"] = {"Zari"}, ["zba"] = {"Balaibalan"}, ["zbc"] = {"Central Berawan"}, ["zbe"] = {"East Berawan"}, ["zbl"] = {"Blissymbols", "Bliss", "Blissymbolics"}, ["zbt"] = {"Batui"}, ["zbw"] = {"West Berawan"}, ["zca"] = {"Coatecas Altas Zapotec"}, ["zch"] = {"Central Hongshuihe Zhuang"}, ["zdj"] = {"Ngazidja Comorian"}, ["zea"] = {"Zeeuws"}, ["zeg"] = {"Zenag"}, ["zeh"] = {"Eastern Hongshuihe Zhuang"}, ["zen"] = {"Zenaga"}, ["zga"] = {"Kinga"}, ["zgb"] = {"Guibei Zhuang"}, ["zgh"] = {"Standard Moroccan Tamazight"}, ["zgm"] = {"Minz Zhuang"}, ["zgn"] = {"Guibian Zhuang"}, ["zgr"] = {"Magori"}, ["zhb"] = {"Zhaba"}, ["zhd"] = {"Dai Zhuang"}, ["zhi"] = {"Zhire"}, ["zhn"] = {"Nong Zhuang"}, ["zhw"] = {"Zhoa"}, ["zhx"] = {"Chinese (family)"}, ["zia"] = {"Zia"}, ["zib"] = {"Zimbabwe Sign Language"}, ["zik"] = {"Zimakani"}, ["zil"] = {"Zialo"}, ["zim"] = {"Mesme"}, ["zin"] = {"Zinza"}, ["ziw"] = {"Zigula"}, ["ziz"] = {"Zizilivakan"}, ["zka"] = {"Kaimbulawa"}, ["zkb"] = {"Koibal"}, ["zkd"] = {"Kadu"}, ["zkg"] = {"Koguryo"}, ["zkh"] = {"Khorezmian"}, ["zkk"] = {"Karankawa"}, ["zkn"] = {"Kanan"}, ["zko"] = {"Kott"}, ["zkp"] = {"São Paulo Kaingáng"}, ["zkr"] = {"Zakhring"}, ["zkt"] = {"Kitan"}, ["zku"] = {"Kaurna"}, ["zkv"] = {"Krevinian"}, ["zkz"] = {"Khazar"}, ["zle"] = {"East Slavic languages"}, ["zlj"] = {"Liujiang Zhuang"}, ["zlm"] = {"Malay (individual language)"}, ["zln"] = {"Lianshan Zhuang"}, ["zlq"] = {"Liuqian Zhuang"}, ["zls"] = {"South Slavic languages"}, ["zlw"] = {"West Slavic languages"}, ["zma"] = {"Manda (Australia)"}, ["zmb"] = {"Zimba"}, ["zmc"] = {"Margany"}, ["zmd"] = {"Maridan"}, ["zme"] = {"Mangerr"}, ["zmf"] = {"Mfinu"}, ["zmg"] = {"Marti Ke"}, ["zmh"] = {"Makolkol"}, ["zmi"] = {"Negeri Sembilan Malay"}, ["zmj"] = {"Maridjabin"}, ["zmk"] = {"Mandandanyi"}, ["zml"] = {"Matngala"}, ["zmm"] = {"Marimanindji", "Marramaninyshi"}, ["zmn"] = {"Mbangwe"}, ["zmo"] = {"Molo"}, ["zmp"] = {"Mpuono"}, ["zmq"] = {"Mituku"}, ["zmr"] = {"Maranunggu"}, ["zms"] = {"Mbesa"}, ["zmt"] = {"Maringarr"}, ["zmu"] = {"Muruwari"}, ["zmv"] = {"Mbariman-Gudhinma"}, ["zmw"] = {"Mbo (Democratic Republic of Congo)"}, ["zmx"] = {"Bomitaba"}, ["zmy"] = {"Mariyedi"}, ["zmz"] = {"Mbandja"}, ["zna"] = {"Zan Gula"}, ["znd"] = {"Zande languages"}, ["zne"] = {"Zande (individual language)"}, ["zng"] = {"Mang"}, ["znk"] = {"Manangkari"}, ["zns"] = {"Mangas"}, ["zoc"] = {"Copainalá Zoque"}, ["zoh"] = {"Chimalapa Zoque"}, ["zom"] = {"Zou"}, ["zoo"] = {"Asunción Mixtepec Zapotec"}, ["zoq"] = {"Tabasco Zoque"}, ["zor"] = {"Rayón Zoque"}, ["zos"] = {"Francisco León Zoque"}, ["zpa"] = {"Lachiguiri Zapotec"}, ["zpb"] = {"Yautepec Zapotec"}, ["zpc"] = {"Choapan Zapotec"}, ["zpd"] = {"Southeastern Ixtlán Zapotec"}, ["zpe"] = {"Petapa Zapotec"}, ["zpf"] = {"San Pedro Quiatoni Zapotec"}, ["zpg"] = {"Guevea De Humboldt Zapotec"}, ["zph"] = {"Totomachapan Zapotec"}, ["zpi"] = {"Santa María Quiegolani Zapotec"}, ["zpj"] = {"Quiavicuzas Zapotec"}, ["zpk"] = {"Tlacolulita Zapotec"}, ["zpl"] = {"Lachixío Zapotec"}, ["zpm"] = {"Mixtepec Zapotec"}, ["zpn"] = {"Santa Inés Yatzechi Zapotec"}, ["zpo"] = {"Amatlán Zapotec"}, ["zpp"] = {"El Alto Zapotec"}, ["zpq"] = {"Zoogocho Zapotec"}, ["zpr"] = {"Santiago Xanica Zapotec"}, ["zps"] = {"Coatlán Zapotec"}, ["zpt"] = {"San Vicente Coatlán Zapotec"}, ["zpu"] = {"Yalálag Zapotec"}, ["zpv"] = {"Chichicapan Zapotec"}, ["zpw"] = {"Zaniza Zapotec"}, ["zpx"] = {"San Baltazar Loxicha Zapotec"}, ["zpy"] = {"Mazaltepec Zapotec"}, ["zpz"] = {"Texmelucan Zapotec"}, ["zqe"] = {"Qiubei Zhuang"}, ["zra"] = {"Kara (Korea)"}, ["zrg"] = {"Mirgan"}, ["zrn"] = {"Zerenkel"}, ["zro"] = {"Záparo"}, ["zrp"] = {"Zarphatic"}, ["zrs"] = {"Mairasi"}, ["zsa"] = {"Sarasira"}, ["zsk"] = {"Kaskean"}, ["zsl"] = {"Zambian Sign Language"}, ["zsm"] = {"Standard Malay"}, ["zsr"] = {"Southern Rincon Zapotec"}, ["zsu"] = {"Sukurum"}, ["zte"] = {"Elotepec Zapotec"}, ["ztg"] = {"Xanaguía Zapotec"}, ["ztl"] = {"Lapaguía-Guivini Zapotec"}, ["ztm"] = {"San Agustín Mixtepec Zapotec"}, ["ztn"] = {"Santa Catarina Albarradas Zapotec"}, ["ztp"] = {"Loxicha Zapotec"}, ["ztq"] = {"Quioquitani-Quierí Zapotec"}, ["zts"] = {"Tilquiapan Zapotec"}, ["ztt"] = {"Tejalapan Zapotec"}, ["ztu"] = {"Güilá Zapotec"}, ["ztx"] = {"Zaachila Zapotec"}, ["zty"] = {"Yatee Zapotec"}, ["zua"] = {"Zeem"}, ["zuh"] = {"Tokano"}, ["zum"] = {"Kumzari"}, ["zun"] = {"Zuni"}, ["zuy"] = {"Zumaya"}, ["zwa"] = {"Zay"}, ["zxx"] = {"No linguistic content", "Not applicable"}, ["zyb"] = {"Yongbei Zhuang"}, ["zyg"] = {"Yang Zhuang"}, ["zyj"] = {"Youjiang Zhuang"}, ["zyn"] = {"Yongnan Zhuang"}, ["zyp"] = {"Zyphe Chin"}, ["zza"] = {"Zaza", "Dimili", "Dimli (macrolanguage)", "Kirdki", "Kirmanjki (macrolanguage)", "Zazaki"}, ["zzj"] = {"Zuojiang Zhuang"} } local deprecated = { ["in"] = {"Indonesian"}, ["iw"] = {"Hebrew"}, ["ji"] = {"Yiddish"}, ["jw"] = {"Javanese"}, ["mo"] = {"Moldavian", "Moldovan"}, ["aam"] = {"Aramanik"}, ["adp"] = {"Adap"}, ["agp"] = {"Paranan"}, ["ais"] = {"Nataoran Amis"}, ["aoh"] = {"Arma"}, ["asd"] = {"Asas"}, ["aue"] = {"ǂKxʼauǁʼein"}, ["ayx"] = {"Ayi (China)"}, ["ayy"] = {"Tayabas Ayta"}, ["baz"] = {"Tunen"}, ["bbz"] = {"Babalia Creole Arabic"}, ["bgm"] = {"Baga Mboteni"}, ["bhk"] = {"Albay Bicolano"}, ["bjd"] = {"Bandjigali"}, ["bjq"] = {"Southern Betsimisaraka Malagasy"}, ["bkb"] = {"Finallig"}, ["bmy"] = {"Bemba (Democratic Republic of Congo)"}, ["bpb"] = {"Barbacoas"}, ["btb"] = {"Beti (Cameroon)"}, ["btl"] = {"Bhatola"}, ["bxx"] = {"Borna (Democratic Republic of Congo)"}, ["byy"] = {"Buya"}, ["cbe"] = {"Chipiajes"}, ["cbh"] = {"Cagua"}, ["cca"] = {"Cauca"}, ["ccq"] = {"Chaungtha"}, ["cdg"] = {"Chamari"}, ["cjr"] = {"Chorotega"}, ["cka"] = {"Khumi Awa Chin"}, ["cmk"] = {"Chimakum"}, ["coy"] = {"Coyaima"}, ["cqu"] = {"Chilean Quechua"}, ["cum"] = {"Cumeral"}, ["daf"] = {"Dan"}, ["dap"] = {"Nisi (India)"}, ["dgu"] = {"Degaru"}, ["dha"] = {"Dhanwar (India)"}, ["dit"] = {"Dirari"}, ["djl"] = {"Djiwarli"}, ["dkl"] = {"Kolum So Dogon"}, ["drh"] = {"Darkhat"}, ["drr"] = {"Dororo"}, ["drw"] = {"Darwazi"}, ["dud"] = {"Hun-Saare"}, ["duj"] = {"Dhuwal"}, ["dwl"] = {"Walo Kumbe Dogon"}, ["dzd"] = {"Daza"}, ["ekc"] = {"Eastern Karnic"}, ["elp"] = {"Elpaputih"}, ["emo"] = {"Emok"}, ["gav"] = {"Gabutamon"}, ["gbc"] = {"Garawa"}, ["gfx"] = {"Mangetti Dune ǃXung"}, ["ggn"] = {"Eastern Gurung"}, ["ggo"] = {"Southern Gondi"}, ["ggr"] = {"Aghu Tharnggalu"}, ["gio"] = {"Gelao"}, ["gli"] = {"Guliguli"}, ["gti"] = {"Gbati-ri"}, ["guv"] = {"Gey"}, ["hrr"] = {"Horuru"}, ["iap"] = {"Iapama"}, ["ibi"] = {"Ibilo"}, ["ill"] = {"Iranun"}, ["ilw"] = {"Talur"}, ["ime"] = {"Imeraguen"}, ["izi"] = {"Izi-Ezaa-Ikwo-Mgbo"}, ["jar"] = {"Jarawa (Nigeria)"}, ["jeg"] = {"Jeng"}, ["kbf"] = {"Kakauhua"}, ["kdv"] = {"Kado"}, ["kgc"] = {"Kasseng"}, ["kgd"] = {"Kataang"}, ["kgh"] = {"Upper Tanudan Kalinga"}, ["kjf"] = {"Khalaj [Indo-Iranian]"}, ["koj"] = {"Sara Dunjo"}, ["kox"] = {"Coxima"}, ["kpp"] = {"Paku Karen"}, ["krm"] = {"Krim"}, ["ktr"] = {"Kota Marudu Tinagas"}, ["kvs"] = {"Kunggara"}, ["kwq"] = {"Kwak"}, ["kxe"] = {"Kakihum"}, ["kxl"] = {"Nepali Kurux"}, ["kxu"] = {"Kui (India)"}, ["kzh"] = {"Kenuzi-Dongola"}, ["kzj"] = {"Coastal Kadazan"}, ["kzt"] = {"Tambunan Dusun"}, ["lba"] = {"Lui"}, ["leg"] = {"Lengua"}, ["lii"] = {"Lingkhim"}, ["llo"] = {"Khlor"}, ["lmm"] = {"Lamam"}, ["lmz"] = {"Lumbee"}, ["lsg"] = {"Lyons Sign Language"}, ["meg"] = {"Mea"}, ["mgx"] = {"Omati"}, ["mhh"] = {"Maskoy Pidgin"}, ["mja"] = {"Mahei"}, ["mld"] = {"Malakhel"}, ["mnt"] = {"Maykulan"}, ["mof"] = {"Mohegan-Montauk-Narragansett"}, ["mst"] = {"Cataelano Mandaya"}, ["mwd"] = {"Mudbura"}, ["mwj"] = {"Maligo"}, ["mwx"] = {"Mediak"}, ["mwy"] = {"Mosiro"}, ["myd"] = {"Maramba"}, ["myi"] = {"Mina (India)"}, ["myq"] = {"Forest Maninka"}, ["myt"] = {"Sangab Mandaya"}, ["nad"] = {"Nijadali"}, ["nbf"] = {"Naxi"}, ["nbx"] = {"Ngura"}, ["ncp"] = {"Ndaktup"}, ["nln"] = {"Durango Nahuatl"}, ["nlr"] = {"Ngarla"}, ["nns"] = {"Ningye"}, ["nnx"] = {"Ngong"}, ["noo"] = {"Nootka"}, ["nts"] = {"Natagaimas"}, ["nxu"] = {"Narau"}, ["ome"] = {"Omejes"}, ["oun"] = {"ǃOǃung"}, ["pbz"] = {"Palu"}, ["pcr"] = {"Panang"}, ["pgy"] = {"Pongyong"}, ["plp"] = {"Palpa"}, ["pmc"] = {"Palumata"}, ["pmu"] = {"Mirpur Panjabi"}, ["pod"] = {"Ponares"}, ["ppa"] = {"Pao"}, ["ppr"] = {"Piru"}, ["prb"] = {"Lua'"}, ["pry"] = {"Pray 3"}, ["puk"] = {"Pu Ko"}, ["puz"] = {"Purum Naga"}, ["rie"] = {"Rien"}, ["rmr"] = {"Caló"}, ["rna"] = {"Runa"}, ["rsi"] = {"Rennellese Sign Language"}, ["sap"] = {"Sanapaná"}, ["sca"] = {"Sansu"}, ["sdm"] = {"Semandang"}, ["sgl"] = {"Sanglechi-Ishkashimi"}, ["sgo"] = {"Songa"}, ["skk"] = {"Sok"}, ["snh"] = {"Shinabo"}, ["sul"] = {"Surigaonon"}, ["sum"] = {"Sumo-Mayangna"}, ["svr"] = {"Savara"}, ["tbb"] = {"Tapeba"}, ["tdu"] = {"Tempasuk Dusun"}, ["tgg"] = {"Tangga"}, ["thc"] = {"Tai Hang Tong"}, ["thw"] = {"Thudam"}, ["thx"] = {"The"}, ["tid"] = {"Tidong"}, ["tie"] = {"Tingal"}, ["tkk"] = {"Takpa"}, ["tlw"] = {"South Wemale"}, ["tmp"] = {"Tai Mène"}, ["tne"] = {"Tinoc Kallahan"}, ["tnf"] = {"Tangshewi"}, ["toe"] = {"Tomedes"}, ["tsf"] = {"Southwestern Tamang"}, ["unp"] = {"Worora"}, ["uok"] = {"Uokha"}, ["wgw"] = {"Wagawaga"}, ["wit"] = {"Wintu"}, ["wiw"] = {"Wirangu"}, ["xba"] = {"Kamba (Brazil)"}, ["xbx"] = {"Kabixí"}, ["xia"] = {"Xiandao"}, ["xip"] = {"Xipináwa"}, ["xkh"] = {"Karahawyana"}, ["xrq"] = {"Karranga"}, ["xtz"] = {"Tasmanian"}, ["ybd"] = {"Yangbye"}, ["yds"] = {"Yiddish Sign Language"}, ["yen"] = {"Yendang"}, ["yiy"] = {"Yir Yoront"}, ["yma"] = {"Yamphe"}, ["ymt"] = {"Mator-Taygi-Karagas"}, ["ynh"] = {"Yangho"}, ["yos"] = {"Yos"}, ["yri"] = {"Yarí"}, ["yuu"] = {"Yugh"}, ["zir"] = {"Ziriya"} } return { active = active, deprecated = deprecated, }
</text>
<sha1>er1yj7zzt92r80kkt2o4akjsonja43m</sha1>
</revision>
</page>
<page>
<title>Module:Language/data/iana regions</title>
<ns>828</ns>
<id>6006472</id>
<revision>
<id>57557729</id>
<parentid>50512655</parentid>
<timestamp>2020-01-04T08:24:04Z</timestamp>
<contributor>
<username>Xiplus</username>
<id>899028</id>
</contributor>
<minor/>
<comment>
已保护“[[模块:Language/data/iana regions]]”：高風險模板：246237引用（[编辑=仅管理员]（无限期）[移动=仅管理员]（无限期））
</comment>
<model>Scribunto</model>
<format>text/plain</format>
<text bytes="8001" xml:space="preserve">
-- File-Date: 2018-04-23 return { ["AC"] = {"Ascension Island"}, ["AD"] = {"Andorra"}, ["AE"] = {"United Arab Emirates"}, ["AF"] = {"Afghanistan"}, ["AG"] = {"Antigua and Barbuda"}, ["AI"] = {"Anguilla"}, ["AL"] = {"Albania"}, ["AM"] = {"Armenia"}, ["AO"] = {"Angola"}, ["AQ"] = {"Antarctica"}, ["AR"] = {"Argentina"}, ["AS"] = {"American Samoa"}, ["AT"] = {"Austria"}, ["AU"] = {"Australia"}, ["AW"] = {"Aruba"}, ["AX"] = {"Åland Islands"}, ["AZ"] = {"Azerbaijan"}, ["BA"] = {"Bosnia and Herzegovina"}, ["BB"] = {"Barbados"}, ["BD"] = {"Bangladesh"}, ["BE"] = {"Belgium"}, ["BF"] = {"Burkina Faso"}, ["BG"] = {"Bulgaria"}, ["BH"] = {"Bahrain"}, ["BI"] = {"Burundi"}, ["BJ"] = {"Benin"}, ["BL"] = {"Saint Barthélemy"}, ["BM"] = {"Bermuda"}, ["BN"] = {"Brunei Darussalam"}, ["BO"] = {"Bolivia"}, ["BQ"] = {"Bonaire, Sint Eustatius and Saba"}, ["BR"] = {"Brazil"}, ["BS"] = {"Bahamas"}, ["BT"] = {"Bhutan"}, ["BV"] = {"Bouvet Island"}, ["BW"] = {"Botswana"}, ["BY"] = {"Belarus"}, ["BZ"] = {"Belize"}, ["CA"] = {"Canada"}, ["CC"] = {"Cocos (Keeling) Islands"}, ["CD"] = {"The Democratic Republic of the Congo"}, ["CF"] = {"Central African Republic"}, ["CG"] = {"Congo"}, ["CH"] = {"Switzerland"}, ["CI"] = {"Côte d'Ivoire"}, ["CK"] = {"Cook Islands"}, ["CL"] = {"Chile"}, ["CM"] = {"Cameroon"}, ["CN"] = {"China"}, ["CO"] = {"Colombia"}, ["CP"] = {"Clipperton Island"}, ["CR"] = {"Costa Rica"}, ["CU"] = {"Cuba"}, ["CV"] = {"Cabo Verde", "Cape Verde"}, ["CW"] = {"Curaçao"}, ["CX"] = {"Christmas Island"}, ["CY"] = {"Cyprus"}, ["CZ"] = {"Czechia", "Czech Republic"}, ["DE"] = {"Germany"}, ["DG"] = {"Diego Garcia"}, ["DJ"] = {"Djibouti"}, ["DK"] = {"Denmark"}, ["DM"] = {"Dominica"}, ["DO"] = {"Dominican Republic"}, ["DZ"] = {"Algeria"}, ["EA"] = {"Ceuta, Melilla"}, ["EC"] = {"Ecuador"}, ["EE"] = {"Estonia"}, ["EG"] = {"Egypt"}, ["EH"] = {"Western Sahara"}, ["ER"] = {"Eritrea"}, ["ES"] = {"Spain"}, ["ET"] = {"Ethiopia"}, ["EU"] = {"European Union"}, ["EZ"] = {"Eurozone"}, ["FI"] = {"Finland"}, ["FJ"] = {"Fiji"}, ["FK"] = {"Falkland Islands (Malvinas)"}, ["FM"] = {"Federated States of Micronesia"}, ["FO"] = {"Faroe Islands"}, ["FR"] = {"France"}, ["GA"] = {"Gabon"}, ["GB"] = {"United Kingdom"}, ["GD"] = {"Grenada"}, ["GE"] = {"Georgia"}, ["GF"] = {"French Guiana"}, ["GG"] = {"Guernsey"}, ["GH"] = {"Ghana"}, ["GI"] = {"Gibraltar"}, ["GL"] = {"Greenland"}, ["GM"] = {"Gambia"}, ["GN"] = {"Guinea"}, ["GP"] = {"Guadeloupe"}, ["GQ"] = {"Equatorial Guinea"}, ["GR"] = {"Greece"}, ["GS"] = {"South Georgia and the South Sandwich Islands"}, ["GT"] = {"Guatemala"}, ["GU"] = {"Guam"}, ["GW"] = {"Guinea-Bissau"}, ["GY"] = {"Guyana"}, ["HK"] = {"Hong Kong"}, ["HM"] = {"Heard Island and McDonald Islands"}, ["HN"] = {"Honduras"}, ["HR"] = {"Croatia"}, ["HT"] = {"Haiti"}, ["HU"] = {"Hungary"}, ["IC"] = {"Canary Islands"}, ["ID"] = {"Indonesia"}, ["IE"] = {"Ireland"}, ["IL"] = {"Israel"}, ["IM"] = {"Isle of Man"}, ["IN"] = {"India"}, ["IO"] = {"British Indian Ocean Territory"}, ["IQ"] = {"Iraq"}, ["IR"] = {"Islamic Republic of Iran"}, ["IS"] = {"Iceland"}, ["IT"] = {"Italy"}, ["JE"] = {"Jersey"}, ["JM"] = {"Jamaica"}, ["JO"] = {"Jordan"}, ["JP"] = {"Japan"}, ["KE"] = {"Kenya"}, ["KG"] = {"Kyrgyzstan"}, ["KH"] = {"Cambodia"}, ["KI"] = {"Kiribati"}, ["KM"] = {"Comoros"}, ["KN"] = {"Saint Kitts and Nevis"}, ["KP"] = {"Democratic People's Republic of Korea"}, ["KR"] = {"Republic of Korea"}, ["KW"] = {"Kuwait"}, ["KY"] = {"Cayman Islands"}, ["KZ"] = {"Kazakhstan"}, ["LA"] = {"Lao People's Democratic Republic"}, ["LB"] = {"Lebanon"}, ["LC"] = {"Saint Lucia"}, ["LI"] = {"Liechtenstein"}, ["LK"] = {"Sri Lanka"}, ["LR"] = {"Liberia"}, ["LS"] = {"Lesotho"}, ["LT"] = {"Lithuania"}, ["LU"] = {"Luxembourg"}, ["LV"] = {"Latvia"}, ["LY"] = {"Libya"}, ["MA"] = {"Morocco"}, ["MC"] = {"Monaco"}, ["MD"] = {"Moldova"}, ["ME"] = {"Montenegro"}, ["MF"] = {"Saint Martin (French part)"}, ["MG"] = {"Madagascar"}, ["MH"] = {"Marshall Islands"}, ["MK"] = {"The Former Yugoslav Republic of Macedonia"}, ["ML"] = {"Mali"}, ["MM"] = {"Myanmar"}, ["MN"] = {"Mongolia"}, ["MO"] = {"Macao"}, ["MP"] = {"Northern Mariana Islands"}, ["MQ"] = {"Martinique"}, ["MR"] = {"Mauritania"}, ["MS"] = {"Montserrat"}, ["MT"] = {"Malta"}, ["MU"] = {"Mauritius"}, ["MV"] = {"Maldives"}, ["MW"] = {"Malawi"}, ["MX"] = {"Mexico"}, ["MY"] = {"Malaysia"}, ["MZ"] = {"Mozambique"}, ["NA"] = {"Namibia"}, ["NC"] = {"New Caledonia"}, ["NE"] = {"Niger"}, ["NF"] = {"Norfolk Island"}, ["NG"] = {"Nigeria"}, ["NI"] = {"Nicaragua"}, ["NL"] = {"Netherlands"}, ["NO"] = {"Norway"}, ["NP"] = {"Nepal"}, ["NR"] = {"Nauru"}, ["NU"] = {"Niue"}, ["NZ"] = {"New Zealand"}, ["OM"] = {"Oman"}, ["PA"] = {"Panama"}, ["PE"] = {"Peru"}, ["PF"] = {"French Polynesia"}, ["PG"] = {"Papua New Guinea"}, ["PH"] = {"Philippines"}, ["PK"] = {"Pakistan"}, ["PL"] = {"Poland"}, ["PM"] = {"Saint Pierre and Miquelon"}, ["PN"] = {"Pitcairn"}, ["PR"] = {"Puerto Rico"}, ["PS"] = {"State of Palestine"}, ["PT"] = {"Portugal"}, ["PW"] = {"Palau"}, ["PY"] = {"Paraguay"}, ["QA"] = {"Qatar"}, ["RE"] = {"Réunion"}, ["RO"] = {"Romania"}, ["RS"] = {"Serbia"}, ["RU"] = {"Russian Federation"}, ["RW"] = {"Rwanda"}, ["SA"] = {"Saudi Arabia"}, ["SB"] = {"Solomon Islands"}, ["SC"] = {"Seychelles"}, ["SD"] = {"Sudan"}, ["SE"] = {"Sweden"}, ["SG"] = {"Singapore"}, ["SH"] = {"Saint Helena, Ascension and Tristan da Cunha"}, ["SI"] = {"Slovenia"}, ["SJ"] = {"Svalbard and Jan Mayen"}, ["SK"] = {"Slovakia"}, ["SL"] = {"Sierra Leone"}, ["SM"] = {"San Marino"}, ["SN"] = {"Senegal"}, ["SO"] = {"Somalia"}, ["SR"] = {"Suriname"}, ["SS"] = {"South Sudan"}, ["ST"] = {"Sao Tome and Principe"}, ["SV"] = {"El Salvador"}, ["SX"] = {"Sint Maarten (Dutch part)"}, ["SY"] = {"Syrian Arab Republic"}, ["SZ"] = {"Swaziland"}, ["TA"] = {"Tristan da Cunha"}, ["TC"] = {"Turks and Caicos Islands"}, ["TD"] = {"Chad"}, ["TF"] = {"French Southern Territories"}, ["TG"] = {"Togo"}, ["TH"] = {"Thailand"}, ["TJ"] = {"Tajikistan"}, ["TK"] = {"Tokelau"}, ["TL"] = {"Timor-Leste"}, ["TM"] = {"Turkmenistan"}, ["TN"] = {"Tunisia"}, ["TO"] = {"Tonga"}, ["TR"] = {"Turkey"}, ["TT"] = {"Trinidad and Tobago"}, ["TV"] = {"Tuvalu"}, ["TW"] = {"Taiwan, Province of China"}, ["TZ"] = {"United Republic of Tanzania"}, ["UA"] = {"Ukraine"}, ["UG"] = {"Uganda"}, ["UM"] = {"United States Minor Outlying Islands"}, ["UN"] = {"United Nations"}, ["US"] = {"United States"}, ["UY"] = {"Uruguay"}, ["UZ"] = {"Uzbekistan"}, ["VA"] = {"Holy See (Vatican City State)"}, ["VC"] = {"Saint Vincent and the Grenadines"}, ["VE"] = {"Venezuela"}, ["VG"] = {"British Virgin Islands"}, ["VI"] = {"U.S. Virgin Islands"}, ["VN"] = {"Viet Nam"}, ["VU"] = {"Vanuatu"}, ["WF"] = {"Wallis and Futuna"}, ["WS"] = {"Samoa"}, ["YE"] = {"Yemen"}, ["YT"] = {"Mayotte"}, ["ZA"] = {"South Africa"}, ["ZM"] = {"Zambia"}, ["ZW"] = {"Zimbabwe"}, ["001"] = {"World"}, ["002"] = {"Africa"}, ["003"] = {"North America"}, ["005"] = {"South America"}, ["009"] = {"Oceania"}, ["011"] = {"Western Africa"}, ["013"] = {"Central America"}, ["014"] = {"Eastern Africa"}, ["015"] = {"Northern Africa"}, ["017"] = {"Middle Africa"}, ["018"] = {"Southern Africa"}, ["019"] = {"Americas"}, ["021"] = {"Northern America"}, ["029"] = {"Caribbean"}, ["030"] = {"Eastern Asia"}, ["034"] = {"Southern Asia"}, ["035"] = {"South-Eastern Asia"}, ["039"] = {"Southern Europe"}, ["053"] = {"Australia and New Zealand"}, ["054"] = {"Melanesia"}, ["057"] = {"Micronesia"}, ["061"] = {"Polynesia"}, ["142"] = {"Asia"}, ["143"] = {"Central Asia"}, ["145"] = {"Western Asia"}, ["150"] = {"Europe"}, ["151"] = {"Eastern Europe"}, ["154"] = {"Northern Europe"}, ["155"] = {"Western Europe"}, ["202"] = {"Sub-Saharan Africa"}, ["419"] = {"Latin America and the Caribbean"} }
</text>
<sha1>0uwhzjkdmoy9xywg8hyf81r64ilpi9d</sha1>
</revision>
</page>
<page>
<title>Module:Language/data/iana scripts</title>
<ns>828</ns>
<id>6006467</id>
<revision>
<id>57557731</id>
<parentid>50516117</parentid>
<timestamp>2020-01-04T08:24:07Z</timestamp>
<contributor>
<username>Xiplus</username>
<id>899028</id>
</contributor>
<minor/>
<comment>
已保护“[[模块:Language/data/iana scripts]]”：高風險模板：246237引用（[编辑=仅管理员]（无限期）[移动=仅管理员]（无限期））
</comment>
<model>Scribunto</model>
<format>text/plain</format>
<text bytes="6682" xml:space="preserve">
-- File-Date: 2018-04-23 return { ["Adlm"] = {"Adlam"}, ["Afak"] = {"Afaka"}, ["Aghb"] = {"Caucasian Albanian"}, ["Ahom"] = {"Ahom", "Tai Ahom"}, ["Arab"] = {"Arabic"}, ["Aran"] = {"Arabic (Nastaliq variant)"}, ["Armi"] = {"Imperial Aramaic"}, ["Armn"] = {"Armenian"}, ["Avst"] = {"Avestan"}, ["Bali"] = {"Balinese"}, ["Bamu"] = {"Bamum"}, ["Bass"] = {"Bassa Vah"}, ["Batk"] = {"Batak"}, ["Beng"] = {"Bengali", "Bangla"}, ["Bhks"] = {"Bhaiksuki"}, ["Blis"] = {"Blissymbols"}, ["Bopo"] = {"Bopomofo"}, ["Brah"] = {"Brahmi"}, ["Brai"] = {"Braille"}, ["Bugi"] = {"Buginese"}, ["Buhd"] = {"Buhid"}, ["Cakm"] = {"Chakma"}, ["Cans"] = {"Unified Canadian Aboriginal Syllabics"}, ["Cari"] = {"Carian"}, ["Cham"] = {"Cham"}, ["Cher"] = {"Cherokee"}, ["Cirt"] = {"Cirth"}, ["Copt"] = {"Coptic"}, ["Cpmn"] = {"Cypro-Minoan"}, ["Cprt"] = {"Cypriot syllabary"}, ["Cyrl"] = {"Cyrillic"}, ["Cyrs"] = {"Cyrillic (Old Church Slavonic variant)"}, ["Deva"] = {"Devanagari", "Nagari"}, ["Dogr"] = {"Dogra"}, ["Dsrt"] = {"Deseret", "Mormon"}, ["Dupl"] = {"Duployan shorthand", "Duployan stenography"}, ["Egyd"] = {"Egyptian demotic"}, ["Egyh"] = {"Egyptian hieratic"}, ["Egyp"] = {"Egyptian hieroglyphs"}, ["Elba"] = {"Elbasan"}, ["Ethi"] = {"Ethiopic", "Geʻez", "Ge'ez"}, ["Geok"] = {"Khutsuri (Asomtavruli and Nuskhuri)"}, ["Geor"] = {"Georgian (Mkhedruli and Mtavruli)"}, ["Glag"] = {"Glagolitic"}, ["Gong"] = {"Gunjala Gondi"}, ["Gonm"] = {"Masaram Gondi"}, ["Goth"] = {"Gothic"}, ["Gran"] = {"Grantha"}, ["Grek"] = {"Greek"}, ["Gujr"] = {"Gujarati"}, ["Guru"] = {"Gurmukhi"}, ["Hanb"] = {"Han with Bopomofo (alias for Han + Bopomofo)"}, ["Hang"] = {"Hangul", "Hangŭl", "Hangeul"}, ["Hani"] = {"Han", "Hanzi", "Kanji", "Hanja"}, ["Hano"] = {"Hanunoo", "Hanunóo"}, ["Hans"] = {"Han (Simplified variant)"}, ["Hant"] = {"Han (Traditional variant)"}, ["Hatr"] = {"Hatran"}, ["Hebr"] = {"Hebrew"}, ["Hira"] = {"Hiragana"}, ["Hluw"] = {"Anatolian Hieroglyphs", "Luwian Hieroglyphs", "Hittite Hieroglyphs"}, ["Hmng"] = {"Pahawh Hmong"}, ["Hmnp"] = {"Nyiakeng Puachue Hmong"}, ["Hrkt"] = {"Japanese syllabaries (alias for Hiragana + Katakana)"}, ["Hung"] = {"Old Hungarian", "Hungarian Runic"}, ["Inds"] = {"Indus", "Harappan"}, ["Ital"] = {"Old Italic (Etruscan, Oscan, etc.)"}, ["Jamo"] = {"Jamo (alias for Jamo subset of Hangul)"}, ["Java"] = {"Javanese"}, ["Jpan"] = {"Japanese (alias for Han + Hiragana + Katakana)"}, ["Jurc"] = {"Jurchen"}, ["Kali"] = {"Kayah Li"}, ["Kana"] = {"Katakana"}, ["Khar"] = {"Kharoshthi"}, ["Khmr"] = {"Khmer"}, ["Khoj"] = {"Khojki"}, ["Kitl"] = {"Khitan large script"}, ["Kits"] = {"Khitan small script"}, ["Knda"] = {"Kannada"}, ["Kore"] = {"Korean (alias for Hangul + Han)"}, ["Kpel"] = {"Kpelle"}, ["Kthi"] = {"Kaithi"}, ["Lana"] = {"Tai Tham", "Lanna"}, ["Laoo"] = {"Lao"}, ["Latf"] = {"Latin (Fraktur variant)"}, ["Latg"] = {"Latin (Gaelic variant)"}, ["Latn"] = {"Latin"}, ["Leke"] = {"Leke"}, ["Lepc"] = {"Lepcha", "Róng"}, ["Limb"] = {"Limbu"}, ["Lina"] = {"Linear A"}, ["Linb"] = {"Linear B"}, ["Lisu"] = {"Lisu", "Fraser"}, ["Loma"] = {"Loma"}, ["Lyci"] = {"Lycian"}, ["Lydi"] = {"Lydian"}, ["Mahj"] = {"Mahajani"}, ["Maka"] = {"Makasar"}, ["Mand"] = {"Mandaic", "Mandaean"}, ["Mani"] = {"Manichaean"}, ["Marc"] = {"Marchen"}, ["Maya"] = {"Mayan hieroglyphs"}, ["Medf"] = {"Medefaidrin", "Oberi Okaime", "Oberi Ɔkaimɛ"}, ["Mend"] = {"Mende Kikakui"}, ["Merc"] = {"Meroitic Cursive"}, ["Mero"] = {"Meroitic Hieroglyphs"}, ["Mlym"] = {"Malayalam"}, ["Modi"] = {"Modi", "Moḍī"}, ["Mong"] = {"Mongolian"}, ["Moon"] = {"Moon", "Moon code", "Moon script", "Moon type"}, ["Mroo"] = {"Mro", "Mru"}, ["Mtei"] = {"Meitei Mayek", "Meithei", "Meetei"}, ["Mult"] = {"Multani"}, ["Mymr"] = {"Myanmar", "Burmese"}, ["Narb"] = {"Old North Arabian", "Ancient North Arabian"}, ["Nbat"] = {"Nabataean"}, ["Newa"] = {"Newa", "Newar", "Newari", "Nepāla lipi"}, ["Nkdb"] = {"Naxi Dongba", "na²¹ɕi³³ to³³ba²¹", "Nakhi Tomba"}, ["Nkgb"] = {"Naxi Geba", "na²¹ɕi³³ gʌ²¹ba²¹", "'Na-'Khi ²Ggŏ-¹baw", "Nakhi Geba"}, ["Nkoo"] = {"N’Ko", "N'Ko"}, ["Nshu"] = {"Nüshu"}, ["Ogam"] = {"Ogham"}, ["Olck"] = {"Ol Chiki", "Ol Cemet'", "Ol", "Santali"}, ["Orkh"] = {"Old Turkic", "Orkhon Runic"}, ["Orya"] = {"Oriya", "Odia"}, ["Osge"] = {"Osage"}, ["Osma"] = {"Osmanya"}, ["Palm"] = {"Palmyrene"}, ["Pauc"] = {"Pau Cin Hau"}, ["Perm"] = {"Old Permic"}, ["Phag"] = {"Phags-pa"}, ["Phli"] = {"Inscriptional Pahlavi"}, ["Phlp"] = {"Psalter Pahlavi"}, ["Phlv"] = {"Book Pahlavi"}, ["Phnx"] = {"Phoenician"}, ["Piqd"] = {"Klingon (KLI pIqaD)"}, ["Plrd"] = {"Miao", "Pollard"}, ["Prti"] = {"Inscriptional Parthian"}, ["Rjng"] = {"Rejang", "Redjang", "Kaganga"}, ["Rohg"] = {"Hanifi Rohingya"}, ["Roro"] = {"Rongorongo"}, ["Runr"] = {"Runic"}, ["Samr"] = {"Samaritan"}, ["Sara"] = {"Sarati"}, ["Sarb"] = {"Old South Arabian"}, ["Saur"] = {"Saurashtra"}, ["Sgnw"] = {"SignWriting"}, ["Shaw"] = {"Shavian", "Shaw"}, ["Shrd"] = {"Sharada", "Śāradā"}, ["Shui"] = {"Shuishu"}, ["Sidd"] = {"Siddham", "Siddhaṃ", "Siddhamātṛkā"}, ["Sind"] = {"Khudawadi", "Sindhi"}, ["Sinh"] = {"Sinhala"}, ["Sogd"] = {"Sogdian"}, ["Sogo"] = {"Old Sogdian"}, ["Sora"] = {"Sora Sompeng"}, ["Soyo"] = {"Soyombo"}, ["Sund"] = {"Sundanese"}, ["Sylo"] = {"Syloti Nagri"}, ["Syrc"] = {"Syriac"}, ["Syre"] = {"Syriac (Estrangelo variant)"}, ["Syrj"] = {"Syriac (Western variant)"}, ["Syrn"] = {"Syriac (Eastern variant)"}, ["Tagb"] = {"Tagbanwa"}, ["Takr"] = {"Takri", "Ṭākrī", "Ṭāṅkrī"}, ["Tale"] = {"Tai Le"}, ["Talu"] = {"New Tai Lue"}, ["Taml"] = {"Tamil"}, ["Tang"] = {"Tangut"}, ["Tavt"] = {"Tai Viet"}, ["Telu"] = {"Telugu"}, ["Teng"] = {"Tengwar"}, ["Tfng"] = {"Tifinagh", "柏柏尔语"}, ["Tglg"] = {"Tagalog", "Baybayin", "Alibata"}, ["Thaa"] = {"Thaana"}, ["Thai"] = {"Thai"}, ["Tibt"] = {"Tibetan"}, ["Tirh"] = {"Tirhuta"}, ["Ugar"] = {"Ugaritic"}, ["Vaii"] = {"Vai"}, ["Visp"] = {"Visible Speech"}, ["Wara"] = {"Warang Citi", "Varang Kshiti"}, ["Wcho"] = {"Wancho"}, ["Wole"] = {"Woleai"}, ["Xpeo"] = {"Old Persian"}, ["Xsux"] = {"Sumero-Akkadian cuneiform"}, ["Yiii"] = {"Yi"}, ["Zanb"] = {"Zanabazar Square", "Zanabazarin Dörböljin Useg", "Xewtee Dörböljin Bicig", "Horizontal Square Script"}, ["Zinh"] = {"Code for inherited script"}, ["Zmth"] = {"Mathematical notation"}, ["Zsye"] = {"Symbols (Emoji variant)"}, ["Zsym"] = {"Symbols"}, ["Zxxx"] = {"Code for unwritten documents"}, ["Zyyy"] = {"Code for undetermined script"}, ["Zzzz"] = {"Code for uncoded script"} }
</text>
<sha1>e16zbg5ca52clahai63625f9qoa1as7</sha1>
</revision>
</page>
<page>
<title>Module:Language/data/iana suppressed scripts</title>
<ns>828</ns>
<id>6006499</id>
<revision>
<id>57557732</id>
<parentid>50512675</parentid>
<timestamp>2020-01-04T08:24:10Z</timestamp>
<contributor>
<username>Xiplus</username>
<id>899028</id>
</contributor>
<minor/>
<comment>
已保护“[[模块:Language/data/iana suppressed scripts]]”：高風險模板：246237引用（[编辑=仅管理员]（无限期）[移动=仅管理员]（无限期））
</comment>
<model>Scribunto</model>
<format>text/plain</format>
<text bytes="1259" xml:space="preserve">
-- File-Date: 2018-04-23 return { ["Arab"] = {"ar", "fa", "ps", "ur"}, ["Armn"] = {"hy"}, ["Beng"] = {"as", "bn"}, ["Blis"] = {"zbl"}, ["Cyrl"] = {"ab", "be", "bg", "kk", "mk", "ru", "uk"}, ["Deva"] = {"hi", "mr", "ne", "kok", "mai"}, ["Ethi"] = {"am", "ti"}, ["Geor"] = {"ka"}, ["Grek"] = {"el"}, ["Gujr"] = {"gu"}, ["Guru"] = {"pa"}, ["Hebr"] = {"he", "yi"}, ["Jpan"] = {"ja"}, ["Khmr"] = {"km"}, ["Knda"] = {"kn"}, ["Kore"] = {"ko"}, ["Laoo"] = {"lo"}, ["Latn"] = {"af", "ay", "bs", "ca", "ch", "cs", "cy", "da", "de", "en", "eo", "es", "et", "eu", "fi", "fj", "fo", "fr", "fy", "ga", "gl", "gn", "gv", "hr", "ht", "hu", "id", "is", "it", "kl", "la", "lb", "ln", "lt", "lv", "mg", "mh", "ms", "mt", "na", "nb", "nd", "nl", "nn", "no", "nr", "ny", "om", "pl", "pt", "qu", "rm", "rn", "ro", "rw", "sg", "sk", "sl", "sm", "so", "sq", "ss", "st", "sv", "sw", "tl", "tn", "to", "tr", "ts", "ve", "vi", "xh", "zu", "dsb", "frr", "frs", "gsw", "hsb", "men", "nds", "niu", "nso", "tem", "tkl", "tmh", "tpi", "tvl"}, ["Mlym"] = {"ml"}, ["Mymr"] = {"my"}, ["Nkoo"] = {"nqo"}, ["Orya"] = {"or"}, ["Sinh"] = {"si"}, ["Taml"] = {"ta"}, ["Telu"] = {"te"}, ["Thaa"] = {"dv"}, ["Thai"] = {"th"}, ["Tibt"] = {"dz"} }
</text>
<sha1>o9scccygzgmsa2xy1cpq30rjyy6s7s7</sha1>
</revision>
</page>
<page>
<title>Module:Language/data/iana variants</title>
<ns>828</ns>
<id>6006476</id>
<revision>
<id>57557733</id>
<parentid>50512664</parentid>
<timestamp>2020-01-04T08:24:12Z</timestamp>
<contributor>
<username>Xiplus</username>
<id>899028</id>
</contributor>
<minor/>
<comment>
已保护“[[模块:Language/data/iana variants]]”：高風險模板：246237引用（[编辑=仅管理员]（无限期）[移动=仅管理员]（无限期））
</comment>
<model>Scribunto</model>
<format>text/plain</format>
<text bytes="10730" xml:space="preserve">
-- File-Date: 2018-04-23 return { ["1606nict"] = { ["descriptions"] = {"Late Middle French (to 1606)"}, ["prefixes"] = {"frm"}, }, ["1694acad"] = { ["descriptions"] = {"Early Modern French"}, ["prefixes"] = {"fr"}, }, ["1901"] = { ["descriptions"] = {"Traditional German orthography"}, ["prefixes"] = {"de"}, }, ["1959acad"] = { ["descriptions"] = {"\"Academic\" (\"governmental\") variant of Belarusian as codified in 1959"}, ["prefixes"] = {"be"}, }, ["1994"] = { ["descriptions"] = {"Standardized Resian orthography"}, ["prefixes"] = {"sl-rozaj", "sl-rozaj-biske", "sl-rozaj-njiva", "sl-rozaj-osojs", "sl-rozaj-solba"}, }, ["1996"] = { ["descriptions"] = {"German orthography of 1996"}, ["prefixes"] = {"de"}, }, ["abl1943"] = { ["descriptions"] = {"Orthographic formulation of 1943 - Official in Brazil (Formulário Ortográfico de 1943 - Oficial no Brasil)"}, ["prefixes"] = {"pt-br"}, }, ["alalc97"] = { ["descriptions"] = {"ALA-LC Romanization, 1997 edition"}, ["prefixes"] = {}, }, ["aluku"] = { ["descriptions"] = {"Aluku dialect", "Boni dialect"}, ["prefixes"] = {"djk"}, }, ["akuapem"] = { ["descriptions"] = {"Akuapem Twi"}, ["prefixes"] = {"tw"}, }, ["ao1990"] = { ["descriptions"] = {"Portuguese Language Orthographic Agreement of 1990 (Acordo Ortográfico da Língua Portuguesa de 1990)"}, ["prefixes"] = {"pt", "gl"}, }, ["aranes"] = { ["descriptions"] = {"Aranese"}, ["prefixes"] = {"oc"}, }, ["asante"] = { ["descriptions"] = {"Asante Twi", "Ashanti Twi"}, ["prefixes"] = {"tw"}, }, ["auvern"] = { ["descriptions"] = {"Auvergnat"}, ["prefixes"] = {"oc"}, }, ["baku1926"] = { ["descriptions"] = {"Unified Turkic Latin Alphabet (Historical)"}, ["prefixes"] = {"az", "ba", "crh", "kk", "krc", "ky", "sah", "tk", "tt", "uz"}, }, ["balanka"] = { ["descriptions"] = {"The Balanka dialect of Anii"}, ["prefixes"] = {"blo"}, }, ["barla"] = { ["descriptions"] = {"The Barlavento dialect group of Kabuverdianu"}, ["prefixes"] = {"kea"}, }, ["basiceng"] = { ["descriptions"] = {"Basic English"}, ["prefixes"] = {"en"}, }, ["bauddha"] = { ["descriptions"] = {"Buddhist Hybrid Sanskrit"}, ["prefixes"] = {"sa"}, }, ["biscayan"] = { ["descriptions"] = {"Biscayan dialect of Basque"}, ["prefixes"] = {"eu"}, }, ["biske"] = { ["descriptions"] = {"The San Giorgio dialect of Resian", "The Bila dialect of Resian"}, ["prefixes"] = {"sl-rozaj"}, }, ["bohoric"] = { ["descriptions"] = {"Slovene in Bohorič alphabet"}, ["prefixes"] = {"sl"}, }, ["boont"] = { ["descriptions"] = {"Boontling"}, ["prefixes"] = {"en"}, }, ["cisaup"] = { ["descriptions"] = {"Cisalpine"}, ["prefixes"] = {"oc"}, }, ["colb1945"] = { ["descriptions"] = {"Portuguese-Brazilian Orthographic Convention of 1945 (Convenção Ortográfica Luso-Brasileira de 1945)"}, ["prefixes"] = {"pt"}, }, ["cornu"] = { ["descriptions"] = {"Cornu-English", "Cornish English", "Anglo-Cornish"}, ["prefixes"] = {"en"}, }, ["creiss"] = { ["descriptions"] = {"Occitan variants of the Croissant area"}, ["prefixes"] = {"oc"}, }, ["dajnko"] = { ["descriptions"] = {"Slovene in Dajnko alphabet"}, ["prefixes"] = {"sl"}, }, ["ekavsk"] = { ["descriptions"] = {"Serbian with Ekavian pronunciation"}, ["prefixes"] = {"sr", "sr-latn", "sr-cyrl"}, }, ["emodeng"] = { ["descriptions"] = {"Early Modern English (1500-1700)"}, ["prefixes"] = {"en"}, }, ["fonipa"] = { ["descriptions"] = {"International Phonetic Alphabet"}, ["prefixes"] = {}, }, ["fonkirsh"] = { ["descriptions"] = {"Kirshenbaum Phonetic Alphabet"}, ["prefixes"] = {}, }, ["fonnapa"] = { ["descriptions"] = {"North American Phonetic Alphabet", "Americanist Phonetic Notation"}, ["prefixes"] = {}, }, ["fonupa"] = { ["descriptions"] = {"Uralic Phonetic Alphabet"}, ["prefixes"] = {}, }, ["fonxsamp"] = { ["descriptions"] = {"X-SAMPA transcription"}, ["prefixes"] = {}, }, ["gascon"] = { ["descriptions"] = {"Gascon"}, ["prefixes"] = {"oc"}, }, ["grclass"] = { ["descriptions"] = {"Classical Occitan orthography"}, ["prefixes"] = {"oc"}, }, ["grital"] = { ["descriptions"] = {"Italian-inspired Occitan orthography"}, ["prefixes"] = {"oc"}, }, ["grmistr"] = { ["descriptions"] = {"Mistralian or Mistralian-inspired Occitan orthography"}, ["prefixes"] = {"oc"}, }, ["hepburn"] = { ["descriptions"] = {"Hepburn romanization"}, ["prefixes"] = {"ja-latn"}, }, ["hognorsk"] = { ["descriptions"] = {"Norwegian in Høgnorsk (High Norwegian) orthography"}, ["prefixes"] = {"nn"}, }, ["hsistemo"] = { ["descriptions"] = {"Standard H-system orthographic fallback for spelling Esperanto"}, ["prefixes"] = {"eo"}, }, ["ijekavsk"] = { ["descriptions"] = {"Serbian with Ijekavian pronunciation"}, ["prefixes"] = {"sr", "sr-latn", "sr-cyrl"}, }, ["itihasa"] = { ["descriptions"] = {"Epic Sanskrit"}, ["prefixes"] = {"sa"}, }, ["ivanchov"] = { ["descriptions"] = {"Bulgarian in 1899 orthography"}, ["prefixes"] = {"bg"}, }, ["jauer"] = { ["descriptions"] = {"Jauer dialect of Romansh"}, ["prefixes"] = {"rm"}, }, ["jyutping"] = { ["descriptions"] = {"Jyutping Cantonese Romanization"}, ["prefixes"] = {"yue"}, }, ["kkcor"] = { ["descriptions"] = {"Common Cornish orthography of Revived Cornish"}, ["prefixes"] = {"kw"}, }, ["kociewie"] = { ["descriptions"] = {"The Kociewie dialect of Polish"}, ["prefixes"] = {"pl"}, }, ["kscor"] = { ["descriptions"] = {"Standard Cornish orthography of Revived Cornish", "Kernowek Standard"}, ["prefixes"] = {"kw"}, }, ["laukika"] = { ["descriptions"] = {"Classical Sanskrit"}, ["prefixes"] = {"sa"}, }, ["lemosin"] = { ["descriptions"] = {"Limousin"}, ["prefixes"] = {"oc"}, }, ["lengadoc"] = { ["descriptions"] = {"Languedocien"}, ["prefixes"] = {"oc"}, }, ["lipaw"] = { ["descriptions"] = {"The Lipovaz dialect of Resian", "The Lipovec dialect of Resian"}, ["prefixes"] = {"sl-rozaj"}, }, ["luna1918"] = { ["descriptions"] = {"Post-1917 Russian orthography"}, ["prefixes"] = {"ru"}, }, ["metelko"] = { ["descriptions"] = {"Slovene in Metelko alphabet"}, ["prefixes"] = {"sl"}, }, ["monoton"] = { ["descriptions"] = {"Monotonic Greek"}, ["prefixes"] = {"el"}, }, ["ndyuka"] = { ["descriptions"] = {"Ndyuka dialect", "Aukan dialect"}, ["prefixes"] = {"djk"}, }, ["nedis"] = { ["descriptions"] = {"Natisone dialect", "Nadiza dialect"}, ["prefixes"] = {"sl"}, }, ["newfound"] = { ["descriptions"] = {"Newfoundland English"}, ["prefixes"] = {"en-ca"}, }, ["nicard"] = { ["descriptions"] = {"Niçard"}, ["prefixes"] = {"oc"}, }, ["njiva"] = { ["descriptions"] = {"The Gniva dialect of Resian", "The Njiva dialect of Resian"}, ["prefixes"] = {"sl-rozaj"}, }, ["nulik"] = { ["descriptions"] = {"Volapük nulik", "Volapük perevidöl", "Volapük nulädik", "de Jong's Volapük", "New Volapük", "Revised Volapük", "Modern Volapük"}, ["prefixes"] = {"vo"}, }, ["osojs"] = { ["descriptions"] = {"The Oseacco dialect of Resian", "The Osojane dialect of Resian"}, ["prefixes"] = {"sl-rozaj"}, }, ["oxendict"] = { ["descriptions"] = {"Oxford English Dictionary spelling"}, ["prefixes"] = {"en"}, }, ["pahawh2"] = { ["descriptions"] = {"Pahawh Hmong Second Stage Reduced orthography"}, ["prefixes"] = {"mww", "hnj"}, }, ["pahawh3"] = { ["descriptions"] = {"Pahawh Hmong Third Stage Reduced orthography"}, ["prefixes"] = {"mww", "hnj"}, }, ["pahawh4"] = { ["descriptions"] = {"Pahawh Hmong Final Version orthography"}, ["prefixes"] = {"mww", "hnj"}, }, ["pamaka"] = { ["descriptions"] = {"Pamaka dialect"}, ["prefixes"] = {"djk"}, }, ["petr1708"] = { ["descriptions"] = {"Petrine orthography"}, ["prefixes"] = {"ru"}, }, ["pinyin"] = { ["descriptions"] = {"Pinyin romanization"}, ["prefixes"] = {"zh-latn", "bo-latn"}, }, ["polyton"] = { ["descriptions"] = {"Polytonic Greek"}, ["prefixes"] = {"el"}, }, ["provenc"] = { ["descriptions"] = {"Provençal"}, ["prefixes"] = {"oc"}, }, ["puter"] = { ["descriptions"] = {"Puter idiom of Romansh"}, ["prefixes"] = {"rm"}, }, ["rigik"] = { ["descriptions"] = {"Volapük rigik", "Schleyer's Volapük", "Original Volapük", "Classic Volapük"}, ["prefixes"] = {"vo"}, }, ["rozaj"] = { ["descriptions"] = {"Resian", "Resianic", "Rezijan"}, ["prefixes"] = {"sl"}, }, ["rumgr"] = { ["descriptions"] = {"Rumantsch Grischun"}, ["prefixes"] = {"rm"}, }, ["scotland"] = { ["descriptions"] = {"Scottish Standard English"}, ["prefixes"] = {"en"}, }, ["scouse"] = { ["descriptions"] = {"Scouse"}, ["prefixes"] = {"en"}, }, ["simple"] = { ["descriptions"] = {"Simplified form"}, ["prefixes"] = {}, }, ["solba"] = { ["descriptions"] = {"The Stolvizza dialect of Resian", "The Solbica dialect of Resian"}, ["prefixes"] = {"sl-rozaj"}, }, ["sotav"] = { ["descriptions"] = {"The Sotavento dialect group of Kabuverdianu"}, ["prefixes"] = {"kea"}, }, ["spanglis"] = { ["descriptions"] = {"Spanglish"}, ["prefixes"] = {"en", "es"}, }, ["surmiran"] = { ["descriptions"] = {"Surmiran idiom of Romansh"}, ["prefixes"] = {"rm"}, }, ["sursilv"] = { ["descriptions"] = {"Sursilvan idiom of Romansh"}, ["prefixes"] = {"rm"}, }, ["sutsilv"] = { ["descriptions"] = {"Sutsilvan idiom of Romansh"}, ["prefixes"] = {"rm"}, }, ["tarask"] = { ["descriptions"] = {"Belarusian in Taraskievica orthography"}, ["prefixes"] = {"be"}, }, ["uccor"] = { ["descriptions"] = {"Unified Cornish orthography of Revived Cornish"}, ["prefixes"] = {"kw"}, }, ["ucrcor"] = { ["descriptions"] = {"Unified Cornish Revised orthography of Revived Cornish"}, ["prefixes"] = {"kw"}, }, ["ulster"] = { ["descriptions"] = {"Ulster dialect of Scots"}, ["prefixes"] = {"sco"}, }, ["unifon"] = { ["descriptions"] = {"Unifon phonetic alphabet"}, ["prefixes"] = {"en", "hup", "kyh", "tol", "yur"}, }, ["vaidika"] = { ["descriptions"] = {"Vedic Sanskrit"}, ["prefixes"] = {"sa"}, }, ["valencia"] = { ["descriptions"] = {"Valencian"}, ["prefixes"] = {"ca"}, }, ["vallader"] = { ["descriptions"] = {"Vallader idiom of Romansh"}, ["prefixes"] = {"rm"}, }, ["vivaraup"] = { ["descriptions"] = {"Vivaro-Alpine"}, ["prefixes"] = {"oc"}, }, ["wadegile"] = { ["descriptions"] = {"Wade-Giles romanization"}, ["prefixes"] = {"zh-latn"}, }, ["xsistemo"] = { ["descriptions"] = {"Standard X-system orthographic fallback for spelling Esperanto"}, ["prefixes"] = {"eo"}, } }
</text>
<sha1>hernhfbyvrpzx4qqhg4250t67zxzfwn</sha1>
</revision>
</page>
<page>
<title>Module:Multiple image</title>
<ns>828</ns>
<id>4858597</id>
<revision>
<id>61200721</id>
<parentid>60793649</parentid>
<timestamp>2020-08-17T00:40:32Z</timestamp>
<contributor>
<username>Xiplus-abot</username>
<id>2737953</id>
</contributor>
<minor/>
<comment>
已更改“[[Module:Multiple image]]”的保护等级：高風險模板：5313引用<!-- [[User:Xiplus-abot/task/3|機器人3]] -->（[编辑=仅允许模板编辑员和管理员]（无限期）[移动=仅允许模板编辑员和管理员]（无限期））
</comment>
<model>Scribunto</model>
<format>text/plain</format>
<text bytes="8728" xml:space="preserve">
-- implements [[template:multiple image]] local p = {} local autoscaledimages local nonautoscaledimages local function isnotempty(s) return s and s:match( '^%s*(.-)%s*$' ) ~= '' end local function getdimensions(s, w, h) if tonumber(w) and tonumber(h) then nonautoscaledimages = true return tonumber(w), tonumber(h) end local file = s and mw.title.new('File:' .. mw.uri.decode(mw.ustring.gsub(s,'%|.*$',''), 'WIKI')) file = file and file.file or {width = 0, height = 0} w = tonumber(file.width) or 0 h = tonumber(file.height) or 0 autoscaledimages = true return w, h end local function renderImageCell(image, width, height, link, alt, thumbtime, caption, textalign, istyle) local root = mw.html.create('') local altstr = '|alt=' .. (alt or '') local linkstr = link and ('|link=' .. link) or '' local widthstr = '|' .. tostring(width) .. 'px' local thumbtimestr = '' if isnotempty( thumbtime ) then thumbtimestr = '|thumbtime=' .. thumbtime end local imagediv = root:tag('div') imagediv:addClass('thumbimage') imagediv:cssText(istyle) if( height ) then imagediv:css('height', tostring(height) .. 'px') imagediv:css('overflow', 'hidden') end imagediv:wikitext('[[file:' .. image .. widthstr .. linkstr .. altstr .. thumbtimestr .. ']]') if isnotempty(caption) then local captiondiv = root:tag('div') captiondiv:addClass('thumbcaption') if isnotempty(textalign) then captiondiv:addClass('text-align-' .. textalign) end captiondiv:wikitext(caption) end return tostring(root) end local function getWidth(w1, w2) local w if isnotempty(w1) then w = tonumber(w1) elseif isnotempty(w2) then w = tonumber(w2) end return w or 200 end local function getPerRow(pstr, ic) -- split string into array using any non-digit as a dilimiter local pr = mw.text.split(pstr or '', '[^%d][^%d]*') -- if split failed, assume a single row if (#pr < 1) then pr = {tostring(ic)} end -- convert the array of strings to an array of numbers, -- adding any implied/missing numbers at the end of the array local r = 1 local thisrow = tonumber(pr[1] or ic) or ic local prownum = {} while( ic > 0 ) do prownum[r] = thisrow ic = ic - thisrow r = r + 1 -- use the previous if the next is missing and -- make sure we don't overstep the number of images thisrow = math.min(tonumber(pr[r] or thisrow) or ic, ic) end return prownum end local function renderMultipleImages(frame) local pargs = frame:getParent().args local args = frame.args local width = pargs['width'] or '' local dir = pargs['direction'] or '' local border = pargs['border'] or args['border'] or '' local align = pargs['align'] or args['align'] or (border == 'infobox' and 'center' or '') local capalign = pargs['caption_align'] or args['caption_align'] or '' local totalwidth = pargs['total_width'] or args['total_width'] or '' local imgstyle = pargs['image_style'] or args['image_style'] local header = pargs['header'] or pargs['title'] or '' local footer = pargs['footer'] or '' local imagegap = tonumber(pargs['image_gap'] or '1') or 1 local perrow = nil local thumbclass = { ["left"] = 'tleft', ["none"] = 'tnone', ["center"] = 'tnone', ["centre"] = 'tnone', ["right"] = 'tright' } -- find all the nonempty images local imagenumbers = {} local imagecount = 0 for k, v in pairs( pargs ) do local i = tonumber(tostring(k):match( '^%s*image([%d]+)%s*$' ) or '0') if( i > 0 and isnotempty(v) ) then table.insert( imagenumbers, i) imagecount = imagecount + 1 end end -- sort the imagenumbers table.sort(imagenumbers) -- create an array with the number of images per row perrow = getPerRow(dir == 'vertical' and '1' or pargs['perrow'], imagecount) -- compute the number of rows local rowcount = #perrow -- store the image widths and compute row widths and maximum row width local heights = {} local widths = {} local widthmax = 0 local widthsum = {} local k = 0 for r=1,rowcount do widthsum[r] = 0 for c=1,perrow[r] do k = k + 1 if( k <= imagecount ) then local i = imagenumbers[k] if( isnotempty(totalwidth) ) then widths[k], heights[k] = getdimensions(pargs['image' .. i], pargs['width' .. i], pargs['height' .. i]) else widths[k] = getWidth(width, pargs['width' .. i]) end widthsum[r] = widthsum[r] + widths[k] end end widthmax = math.max(widthmax, widthsum[r]) end -- make sure the gap is non-negative if imagegap < 0 then imagegap = 0 end -- if total_width has been specified, rescale the image widths if( isnotempty(totalwidth) ) then totalwidth = tonumber(totalwidth) widthmax = 0 local k = 0 for r=1,rowcount do local koffset = k local tw = totalwidth - (3 + imagegap) * (perrow[r] - 1) - 12 local ar = {} local arsum = 0 for j=1,perrow[r] do k = k + 1 if( k<= imagecount ) then local i = imagenumbers[k] local h = heights[k] or 0 if (h > 0) then ar[j] = widths[k]/h heights[k] = h else ar[j] = widths[k]/100 end arsum = arsum + ar[j] end end local ht = tw/arsum local ws = 0 k = koffset for j=1,perrow[r] do k = k + 1 if( k<= imagecount ) then local i = imagenumbers[k] widths[k] = math.floor(ar[j]*ht + 0.5) ws = ws + widths[k] if heights[k] then heights[k] = math.floor(ht) end end end widthsum[r] = ws widthmax = math.max(widthmax, widthsum[r]) end end -- start building the array of images, if there are images if( imagecount > 0 ) then -- compute width of outer div local bodywidth = 0 for r=1,rowcount do if( widthmax == widthsum[r] ) then bodywidth = widthmax + (3 + imagegap) * (perrow[r] - 1) + 12 end end -- The body has a min-width of 100, which needs to be taken into account on specific widths bodywidth = math.max( 100, bodywidth - 8); local bg = pargs['background color'] or '' -- create the array of images local root = mw.html.create('div') root:addClass('thumb') root:addClass('tmulti') root:addClass(thumbclass[align] or 'tright') if( align == 'center' or align == 'centre' ) then root:addClass('center') end if( bg ~= '' ) then root:css('background-color', bg) end local div = root:tag('div') div:addClass('thumbinner') div:css('width', tostring(bodywidth) .. 'px') :css('max-width', tostring(bodywidth) .. 'px') if( bg ~= '' ) then div:css('background-color', bg) end if( border == 'infobox' or border == 'none') then div:css('border', 'none') end -- add the header if( isnotempty(header) ) then div:tag('div') :addClass('trow') :tag('div') :addClass('theader') :css('text-align', pargs['header_align'] or 'center') :css('background-color', pargs['header_background'] or 'transparent') :wikitext(header) end -- loop through the images local k = 0 for r=1,rowcount do local rowdiv = div:tag('div'):addClass('trow'); for j=1,perrow[r] do k = k + 1 if( k <= imagecount ) then local imagediv = rowdiv:tag('div') imagediv:addClass('tsingle') if bg ~= '' then imagediv:css('background-color', bg); end if ((imagegap > 1) and (j < perrow[r])) then imagediv:css('margin-right', tostring(imagegap) .. 'px') end local i = imagenumbers[k] local img = pargs['image' .. i] local w = widths[k] imagediv:css('width', tostring(2 + w) .. 'px') :css('max-width', tostring(2 + w) .. 'px') imagediv:wikitext(renderImageCell(img, w, heights[k], pargs['link' .. i], pargs['alt' .. i], pargs['thumbtime' .. i], pargs['caption' .. i], capalign, imgstyle)) end end end -- add the footer if( isnotempty(footer) ) then local falign = string.lower(pargs['footer_align'] or args['footer_align'] or 'left') falign = (falign == 'centre') and 'center' or falign div:tag('div') :addClass('trow') :css('display', (falign ~= 'left') and 'flow-root' or 'flex') :tag('div') :addClass('thumbcaption' .. (falign == 'center' and '-center' or '')) :css('text-align', (falign ~= 'left') and falign or nil) :css('background-color', pargs['footer_background'] or 'transparent') :wikitext(footer) end return tostring(root) end return '' end function p.render( frame ) autoscaledimages = false nonautoscaledimages = false return frame:extensionTag {name = 'templatestyles', args = {src = 'Multiple image/styles.css', wrapper = ".tmulti"}} .. renderMultipleImages( frame ) .. (autoscaledimages and '[[Category:使用多个图像且自动缩放的页面]]' or '') .. (nonautoscaledimages and '[[Category:使用多个图像且手动缩放的页面]]' or '') end return p
</text>
<sha1>r99tels2vpgp1rw9xib17p4i7x1jd2c</sha1>
</revision>
</page>
<page>
<title>Module:Navbar</title>
<ns>828</ns>
<id>3424548</id>
<revision>
<id>45786591</id>
<parentid>45778687</parentid>
<timestamp>2017-08-22T02:14:57Z</timestamp>
<contributor>
<username>Manchiu</username>
<id>487005</id>
</contributor>
<comment>修正笔误</comment>
<model>Scribunto</model>
<format>text/plain</format>
<text bytes="2603" xml:space="preserve">
local p = {} local getArgs function p._navbar(args) local titleArg = 1 if args.collapsible then titleArg = 2 if not args.plain then args.mini = 1 end if args.fontcolor then args.fontstyle = 'color:' .. args.fontcolor .. ';' end args.style = 'float:left; text-align:left' end local titleText = args[titleArg] or (':' .. mw.getCurrentFrame():getParent():getTitle()) local title = mw.title.new(mw.text.trim(titleText), 'Template'); if not title then error('页面不存在 ' .. titleText) end local talkpage = title.talkPageTitle and title.talkPageTitle.fullText or ''; local div = mw.html.create():tag('div') div :addClass('plainlinks') :addClass('hlist') :addClass('navbar') :cssText(args.style) if args.mini then div:addClass('mini') end if not (args.mini or args.plain) then div :tag('span') :css('word-spacing', 0) :cssText(args.fontstyle) :wikitext(args.text or '本模板：') :wikitext(' ') end if args.brackets then div :tag('span') :css('margin-right', '-0.125em') :cssText(args.fontstyle) :wikitext('&#91; ') end local ul = div:tag('ul'); ul :tag('li') :addClass('nv-view') :wikitext('[[' .. title.fullText .. '|') :tag(args.mini and 'abbr' or 'span') :attr('title', '-{zh-hans:查看;zh-hant:檢視;}-该模板') :cssText(args.fontstyle) :wikitext(args.mini and '-{zh-hans:查;zh-hant:閱;}-' or '-{zh-hans:查看;zh-hant:檢視;}-') :done() :wikitext(']]') :done() :tag('li') :addClass('nv-talk') :wikitext('[[' .. talkpage .. '|') :tag(args.mini and 'abbr' or 'span') :attr('title', '讨论该模板') :cssText(args.fontstyle) :wikitext(args.mini and '论' or '讨论') :done() :wikitext(']]'); if not args.noedit then ul :tag('li') :addClass('nv-edit') :wikitext('[' .. title:fullUrl('action=edit') .. ' ') :tag(args.mini and 'abbr' or 'span') :attr('title', '编辑该模板') :cssText(args.fontstyle) :wikitext(args.mini and '编' or '编辑') :done() :wikitext(']'); end if args.brackets then div :tag('span') :css('margin-left', '-0.125em') :cssText(args.fontstyle) :wikitext(' &#93;') end if args.collapsible then div :done() :tag('div') :css('font-size', '114%') :css('margin', args.mini and '0 4em' or '0 7em') :cssText(args.fontstyle) :wikitext(args[1]) end return tostring(div:done()) end function p.navbar(frame) if not getArgs then getArgs = require('Module:Arguments').getArgs end return p._navbar(getArgs(frame)) end return p
</text>
<sha1>7y2coz75nti7qxtfaudxe18sumkoji6</sha1>
</revision>
</page>
<page>
<title>Module:Navbox</title>
<ns>828</ns>
<id>3424555</id>
<revision>
<id>53483914</id>
<parentid>53482333</parentid>
<timestamp>2019-03-07T12:51:30Z</timestamp>
<contributor>
<username>Xiplus</username>
<id>899028</id>
</contributor>
<comment>per [[Special:PermaLink/53434995#編輯請求_2|EP]]</comment>
<model>Scribunto</model>
<format>text/plain</format>
<text bytes="12320" xml:space="preserve">
-- -- This module will implement {{Navbox}} -- local p = {} local navbar = require('Module:Navbar')._navbar local getArgs -- lazily initialized local args local tableRowAdded = false local border local listnums = {} local function trim(s) return (mw.ustring.gsub(s, "^%s*(.-)%s*$", "%1")) end local function addNewline(s) if s:match('^[*:;#]') or s:match('^{|') then return '\n' .. s ..'\n' else return s end end local function addTableRow(tbl) -- If any other rows have already been added, then we add a 2px gutter row. if tableRowAdded then tbl :tag('tr') :css('height', '2px') :tag('td') :attr('colspan', 3) end tableRowAdded = true return tbl:tag('tr') end local function renderNavBar(titleCell) -- Depending on the presence of the navbar and/or show/hide link, we may need to add a spacer div on the left -- or right to keep the title centered. local spacerSide = nil if args.navbar == 'off' then -- No navbar, and client wants no spacer, i.e. wants the title to be shifted to the left. If there's -- also no show/hide link, then we need a spacer on the right to achieve the left shift. if args.state == 'plain' then spacerSide = 'right' end elseif args.navbar == 'plain' or (not args.name and mw.getCurrentFrame():getParent():getTitle() == 'Template:Navbox' and (border == 'subgroup' or border == 'child' or border == 'none')) then -- No navbar. Need a spacer on the left to balance out the width of the show/hide link. if args.state ~= 'plain' then spacerSide = 'left' end else -- Will render navbar (or error message). If there's no show/hide link, need a spacer on the right -- to balance out the width of the navbar. if args.state == 'plain' then spacerSide = 'right' end titleCell:wikitext(navbar{ args.name, mini = 1, fontstyle = (args.basestyle or '') .. ';' .. (args.titlestyle or '') .. ';background:none transparent;border:none;' }) end -- Render the spacer div. if spacerSide then titleCell :tag('span') :css('float', spacerSide) :css('width', '8em') :css('font-size', '80%') :css('margin-' .. (spacerSide == 'left' and 'right' or 'left'), '0.5em') :wikitext('&nbsp;') end end -- -- Title row -- local function renderTitleRow(tbl) if not args.title then return end local titleRow = addTableRow(tbl) if args.titlegroup then titleRow :tag('th') :attr('scope', 'row') :addClass('navbox-group') :addClass(args.titlegroupclass) :cssText(args.basestyle) :cssText(args.groupstyle) :cssText(args.titlegroupstyle) :wikitext(args.titlegroup) end local titleCell = titleRow:tag('th'):attr('scope', 'col') if args.titlegroup then titleCell :css('border-left', '2px solid #fdfdfd') :css('width', '100%') end local titleColspan = 2 if args.imageleft then titleColspan = titleColspan + 1 end if args.image then titleColspan = titleColspan + 1 end if args.titlegroup then titleColspan = titleColspan - 1 end titleCell :cssText(args.basestyle) :cssText(args.titlestyle) :addClass('navbox-title') :addClass(args.titleclass) :attr('colspan', titleColspan) renderNavBar(titleCell) titleCell :tag('div') :css('font-size', '110%') :wikitext(addNewline(args.title)) end -- -- Above/Below rows -- local function getAboveBelowColspan() local ret = 2 if args.imageleft then ret = ret + 1 end if args.image then ret = ret + 1 end return ret end local function renderAboveRow(tbl) if not args.above then return end addTableRow(tbl) :tag('td') :addClass('navbox-abovebelow') :addClass(args.aboveclass) :cssText(args.basestyle) :cssText(args.abovestyle) :attr('colspan', getAboveBelowColspan()) :tag('div') :wikitext(addNewline(args.above)) end local function renderBelowRow(tbl) if not args.below then return end addTableRow(tbl) :tag('td') :addClass('navbox-abovebelow') :addClass(args.belowclass) :cssText(args.basestyle) :cssText(args.belowstyle) :attr('colspan', getAboveBelowColspan()) :tag('div') :wikitext(addNewline(args.below)) end -- -- List rows -- local function renderListRow(tbl, listnum) local row = addTableRow(tbl) if listnum == 1 and args.imageleft then row :tag('td') :addClass('navbox-image') :addClass(args.imageclass) :css('width', '0%') :css('padding', '0px 2px 0px 0px') :cssText(args.imageleftstyle) :attr('rowspan', 2 * #listnums - 1) :tag('div') :wikitext(addNewline(args.imageleft)) end if args['group' .. listnum] then local groupCell = row:tag('th') groupCell :attr('scope', 'row') :addClass('navbox-group') :addClass(args.groupclass) :cssText(args.basestyle) if args.groupwidth then groupCell:css('width', args.groupwidth) end groupCell :cssText(args.groupstyle) :cssText(args['group' .. listnum .. 'style']) :wikitext(args['group' .. listnum]) end local listCell = row:tag('td') if args['group' .. listnum] then listCell :css('text-align', 'left') :css('border-left-width', '2px') :css('border-left-style', 'solid') else listCell:attr('colspan', 2) end if not args.groupwidth then listCell:css('width', '100%') end local isOdd = (listnum % 2) == 1 local rowstyle = args.evenstyle if isOdd then rowstyle = args.oddstyle end local evenOdd if args.evenodd == 'swap' then if isOdd then evenOdd = 'even' else evenOdd = 'odd' end else if isOdd then evenOdd = args.evenodd or 'odd' else evenOdd = args.evenodd or 'even' end end listCell :css('padding', '0px') :cssText(args.liststyle) :cssText(rowstyle) :cssText(args['list' .. listnum .. 'style']) :addClass('navbox-list') :addClass('navbox-' .. evenOdd) :addClass(args.listclass) :tag('div') :css('padding', (listnum == 1 and args.list1padding) or args.listpadding or '0em 0.25em') :wikitext(addNewline(args['list' .. listnum])) if listnum == 1 and args.image then row :tag('td') :addClass('navbox-image') :addClass(args.imageclass) :css('width', '0%') :css('padding', '0px 0px 0px 2px') :cssText(args.imagestyle) :attr('rowspan', 2 * #listnums - 1) :tag('div') :wikitext(addNewline(args.image)) end end -- -- Tracking categories -- local function needsHorizontalLists() if border == 'child' or border == 'subgroup' or args.tracking == 'no' then return false end local listClasses = {'plainlist', 'hlist', 'hlist hnum', 'hlist hwrap', 'hlist vcard', 'vcard hlist', 'hlist vevent'} for i, cls in ipairs(listClasses) do if args.listclass == cls or args.bodyclass == cls then return false end end return true end local function hasBackgroundColors() return mw.ustring.match(args.titlestyle or '','background') or mw.ustring.match(args.groupstyle or '','background') or mw.ustring.match(args.basestyle or '','background') end local function argNameAndRealTitleAreDifferent() if border == 'child' or border == 'subgroup' or args.tracking == 'no' then return false end if args.name ~= mw.title.getCurrentTitle().text then return true end return false end local function getTrackingCategories() local cats = {} if needsHorizontalLists() then table.insert(cats, '没有使用水平列表的导航框') end if hasBackgroundColors() then table.insert(cats, '使用背景颜色的导航框') end if argNameAndRealTitleAreDifferent() then table.insert(cats, 'name參數和實際不同的導航框') end return cats end local function renderTrackingCategories(builder) local title = mw.title.getCurrentTitle() if title.namespace ~= 10 then return end -- not in template space local subpage = title.subpageText if subpage == 'doc' or subpage == 'sandbox' or subpage == 'testcases' then return end for i, cat in ipairs(getTrackingCategories()) do builder:wikitext('[[Category:' .. cat .. ']]') end end -- -- Main navbox tables -- local function renderMainTable() local tbl = mw.html.create('table') :attr('cellspacing', 0) :addClass('nowraplinks') :addClass(args.bodyclass) if args.title and (args.state ~= 'plain' and args.state ~= 'off') then tbl :addClass('collapsible') :addClass(args.state or 'autocollapse') end tbl:css('border-spacing', 0) if border == 'subgroup' or border == 'child' or border == 'none' then tbl :addClass('navbox-subgroup') :cssText(args.bodystyle) :cssText(args.style) else -- regular navobx - bodystyle and style will be applied to the wrapper table tbl :addClass('navbox-inner') :css('background', 'transparent') :css('color', 'inherit') end tbl:cssText(args.innerstyle) renderTitleRow(tbl) renderAboveRow(tbl) for i, listnum in ipairs(listnums) do renderListRow(tbl, listnum) end renderBelowRow(tbl) return tbl end function p._navbox(navboxArgs) args = navboxArgs for k, v in pairs(args) do local listnum = ('' .. k):match('^list(%d+)$') if listnum then table.insert(listnums, tonumber(listnum)) end end table.sort(listnums) border = trim(args.border or args[1] or '') -- render the main body of the navbox local tbl = renderMainTable() -- render the appropriate wrapper around the navbox, depending on the border param local res = mw.html.create() if border == 'none' then res:node(tbl) elseif border == 'subgroup' or border == 'child' then -- We assume that this navbox is being rendered in a list cell of a parent navbox, and is -- therefore inside a div with padding:0em 0.25em. We start with a </div> to avoid the -- padding being applied, and at the end add a <div> to balance out the parent's </div> res :wikitext('</div>') -- mw.html 未支持 unclosed :node(tbl) :wikitext('<div>') -- mw.html 未支持 unclosed else res :tag('table') :attr('cellspacing', 0) :addClass('navbox') :css('border-spacing', 0) :cssText(args.bodystyle) :cssText(args.style) :tag('tr') :tag('td') :css('padding', '2px') :node(tbl) end renderTrackingCategories(res) return tostring(res) end function p.navbox(frame) if not getArgs then getArgs = require('Module:Arguments').getArgs end args = getArgs(frame, {wrappers = 'Template:Navbox'}) -- Read the arguments in the order they'll be output in, to make references number in the right order. local _ _ = args.title _ = args.above for i = 1, 35 do _ = args["group" .. tostring(i)] _ = args["list" .. tostring(i)] end _ = args.below return p._navbox(args) end return p
</text>
<sha1>ip9dirkhu9b14huhr2mnabxvkbt3are</sha1>
</revision>
</page>
<page>
<title>Module:No globals</title>
<ns>828</ns>
<id>4045606</id>
<revision>
<id>54556215</id>
<parentid>45982087</parentid>
<timestamp>2019-05-26T02:06:31Z</timestamp>
<contributor>
<username>Antigng</username>
<id>1960229</id>
</contributor>
<comment>ep：修正错误翻译</comment>
<model>Scribunto</model>
<format>text/plain</format>
<text bytes="317" xml:space="preserve">
local mt = getmetatable(_G) or {} function mt.__index (t, k) if k ~= 'arg' then error('尝试读取空全局变量：' .. tostring(k), 2) end return nil end function mt.__newindex(t, k, v) if k ~= 'arg' then error('尝试写入全局变量：' .. tostring(k), 2) end rawset(t, k, v) end setmetatable(_G, mt)
</text>
<sha1>ds1cgdo9zu6obd3d2bnmnnwfd6kq3cn</sha1>
</revision>
</page>
<page>
<title>Module:NoteTA</title>
<ns>828</ns>
<id>3438671</id>
<revision>
<id>64380121</id>
<parentid>33422534</parentid>
<timestamp>2021-02-19T08:20:55Z</timestamp>
<contributor>
<username>Shizhao</username>
<id>138</id>
</contributor>
<minor/>
<comment>per EP</comment>
<model>Scribunto</model>
<format>text/plain</format>
<text bytes="3597" xml:space="preserve">
local z = {} local WikitextLC = require( 'Module:WikitextLC' ) function Tcode( args ) if args.T == nil or args.T == '' then return '' end local div = mw.html.create( 'div' ) :attr( 'class', 'noteTA-title' ) :attr( 'data-noteta-code', args.T ) :wikitext( WikitextLC.title( args.T ) ) if args.dt ~= nil and args.dt ~= '' then div:attr( 'data-noteta-desc', args.dt ) end return tostring( div ) end function group( name, frame ) if name == nil or name == '' then return '' end local moduleTitle = mw.title.makeTitle( 'Module', 'CGroup/' .. name ) if moduleTitle and moduleTitle.exists then local data = mw.loadData( 'Module:CGroup/' .. name ) local pieces = {} if data.content then for i, v in ipairs( data.content ) do if v.type == 'item' and v.rule then table.insert( pieces, '-{H|' .. v.rule .. '}-' ) end end return tostring( mw.html.create( 'div' ) :attr( 'data-noteta-group-source', 'module' ) :attr( 'data-noteta-group', data.name or name ) :wikitext( table.concat( pieces ) ) ) end end local templateTitle = mw.title.makeTitle( 'Template', 'CGroup/' .. name ) if templateTitle and templateTitle.exists then return frame:expandTemplate{ title = templateTitle } end return tostring( mw.html.create( 'div' ) -- :attr( 'id', 'noteTA-group-' .. mw.uri.anchorEncode( name ) ) :attr( 'data-noteta-group-source', 'none' ) :attr( 'data-noteta-group', name ) ) end function Gcode( args, frame ) local code = {} for i = 1, 30 do table.insert( code, group( args['G' .. i], frame ) ) end code = table.concat( code ) if code ~= '' then code = tostring( mw.html.create( 'div' ) :attr( 'class', 'noteTA-group' ) :wikitext( code ) ) if args.G31 ~= nil then code = code .. '[[Category:NoteTA模板参数使用数量超过限制的页面|G]]' end end return code end function local_( i, code, desc ) if code == nil or code == '' then return '' end local div = mw.html.create( 'div' ) -- :attr( 'id', 'noteTA-local-' .. i ) :attr( 'data-noteta-code', code ) :wikitext( WikitextLC.hidden( code ) ) if desc ~= nil and desc ~= '' then div:attr( 'data-noteta-desc', desc ) end return tostring( div ) end function Lcode( args ) local code = {} for i = 1, 30 do table.insert( code, local_( i, args[i], args['d' .. i] ) ) end code = table.concat( code ) if code ~= '' then code = tostring( mw.html.create( 'div' ) :attr( 'class', 'noteTA-local' ) :wikitext( code ) ) if args[31] ~= nil then code = code .. '[[Category:NoteTA模板参数使用数量超过限制的页面|L]]' end end return code end function z.main( frame ) local args if frame == mw.getCurrentFrame() then -- Being called from {{noteTA}} args = frame:getParent().args else -- Being called from another module args = frame frame = mw.getCurrentFrame() end local Tc = Tcode( args ) local Gc = Gcode( args, frame ) local Lc = Lcode( args ) local code = Tc .. Gc .. Lc if code ~= '' then local hash = require( 'Module:Crc32lua' ).crc32( mw.dumpObject( args ) ) code = frame:extensionTag{ name = 'indicator', content = '[[File:Zh conversion icon m.svg|35px|本页使用了标题或全文手工转换|link=]]', args = { name = string.format( 'noteTA-%x', hash ) }, } .. tostring( mw.html.create( 'div' ) :attr( 'id', string.format( 'noteTA-%x', hash ) ) :attr( 'class', 'noteTA' ) :wikitext( code ) ) if mw.title.getCurrentTitle():inNamespace( 'Template' ) then code = code .. '[[Category:放置于模板的noteTA]]' end end return code end return z
</text>
<sha1>epzmmt61qs09g1s4kta2z2w75nbv959</sha1>
</revision>
</page>
<page>
<title>Module:Portal</title>
<ns>828</ns>
<id>3626944</id>
<revision>
<id>45193768</id>
<parentid>43596536</parentid>
<timestamp>2017-07-14T09:06:12Z</timestamp>
<contributor>
<username>Xiplus</username>
<id>899028</id>
</contributor>
<minor/>
<comment>
已保护“[[模块:Portal]]”：高风险模板（[编辑=仅管理员]（无限期）[移动=仅管理员]（无限期））
</comment>
<model>Scribunto</model>
<format>text/plain</format>
<text bytes="9735" xml:space="preserve">
--[==[ This module is a Lua implementation of the old {{Portal}} template. As of August 2013 it is used on nearly 5,000,000 articles. -- Please take care when updating it! It outputs two functions: p.portal, which generates a list of portals, and p.image, which -- produces the image name for an individual portal. -- The portal image data is kept in submodules of [[Module:Portal/images]], listed below: -- [[Module:Portal/images/letter]] -- [[Module:Portal/images/chinese]] -- [[Module:Portal/images/other]] - for portal names beginning with any other letters. This includes numbers, -- letters with diacritics, and letters in non-Latin alphabets. -- [[Module:Portal/images/aliases]] - for adding aliases for existing portal names. Use this page for variations -- in spelling and diacritics, etc., no matter what letter the portal begins with. -- -- The images data pages are separated by the first letter to reduce server load when images are added, changed, or removed. -- Previously all the images were on one data page at [[Module:Portal/images]], but this had the disadvantage that all -- 5,000,000 pages using this module needed to be refreshed every time an image was added or removed. ]==] local p = {} local function matchImagePage(s) -- Finds the appropriate image subpage given a lower-case -- portal name plus the first letter of that portal name. if type(s) ~= 'string' or #s < 1 then return end local firstLetter = mw.ustring.sub(s, 1, 1) local imagePage if mw.ustring.find(firstLetter, '^[a-z]') then imagePage = 'Module:Portal/images/letter' else imagePage = 'Module:Portal/images/chinese' end -- Hey, we have a thing called "other" return mw.loadData(imagePage)[s] or mw.loadData('Module:Portal/images/other')[s] end local function getAlias(s) -- Gets an alias from the image alias data page. local aliasData = mw.loadData('Module:Portal/images/aliases') return aliasData[s] end local function getImageName(s) -- Gets the image name and the un-aliased "normal name" for a given portal. local default = 'Portal-puzzle.svg|link=|alt=' if type(s) ~= 'string' or #s < 1 then return default end local sl = mw.ustring.lower(s) local sr = s local img = matchImagePage(sl) if not img then sr = getAlias(sl) if sr then img = matchImagePage(mw.ustring.lower(sr)) end if not img then img = default sr = s end end return img, sr end function p._portal(portals, args) -- This function builds the portal box used by the {{portal}} template. local root = mw.html.create('div') :attr('role', 'navigation') :attr('aria-label', 'Portals') :addClass('noprint portal plainlist') :addClass(args.left and 'tleft' or 'tright') :css('margin', args.margin or (args.left == 'yes' and '0.5em 1em 0.5em 0') or '0.5em 0 0.5em 1em') :css('border', 'solid #aaa 1px') :newline() -- If no portals have been specified, display an error and add the page to a tracking category. if not portals[1] then -- zhwp compat: name={{{1}}}|image={{{image1}}} -- no tracking needed as no expensive involved if args['name'] ~= nil then portals[1] = args['name'] args['image1'] = args['image'] else root:wikitext('<strong class="error">未指定主题：请至少添加一个主题</strong>[[Category:Portal模版没有使用参数]]') return tostring(root) end end -- Start the list. This corresponds to the start of the wikitext table in the old [[Template:Portal]]. local listroot = root:tag('ul') :css('display', 'table') :css('box-sizing', 'border-box') :css('padding', '0.1em') :css('max-width', '175px') :css('width', type(args.boxsize) == 'string' and (args.boxsize .. 'px') or nil) :css('background', '#f9f9f9') :css('font-size', '85%') :css('line-height', '110%') :css('font-weight', 'bold') -- zhwp compatibility: check for |2= as |image1 local compat_image1 = false if #portals == 2 and (args['image1'] == nil) then local file = portals[2] local parts = mw.text.split(file, '%.') if #parts > 1 then local ext = (parts[#parts]):lower() -- likely if #ext == 3 or #ext == 4 then local assume_img = (ext == 'png') or (ext == 'jpg') or (ext == 'svg') -- expensive, hence pre-checks & assumption if assume_img or mw.title.new(file, 'Media').exists then args['image1'] = portals[2] compat_image1 = true table.remove(portals, 2) end end end end -- Display the portals specified in the positional arguments. for i, portal in ipairs(portals) do -- Support |image1= |image2= ... -- Rationale: [[Template:WPBannerMeta]] usage. local image = '' if args['image' .. tostring(i)] ~= nil then image = args['image' .. tostring(i)] .. '|alt=' .. portal else -- get the alias too image, portal = getImageName(portal) end -- Generate the html for the image and the portal name. listroot :newline() :tag('li') :css('display', 'table-row') :tag('span') :css('display', 'table-cell') :css('padding', '0.2em') :css('vertical-align', 'middle') :css('text-align', 'center') :wikitext(string.format('[[File:%s|32x28px|class=noviewer]]', image)) :done() :tag('span') :css('display', 'table-cell') :css('padding', '0.2em 0.2em 0.2em 0.3em') :css('vertical-align', 'middle') :wikitext(string.format('[[Portal:%s|%s主题]]', portal, portal)) end local ret = tostring(root) if compat_image1 == true then ret = ret .. '[[Category:使用2號參數傳遞Portal模板圖像的頁面]]' end return ret end function p._image(portals) -- Wrapper function to allow getImageName() to be accessed through #invoke. local name = getImageName(portals[1]) return name:match('^(.-)|') or name -- FIXME: use a more elegant way to separate borders etc. from the image name end local function getAllImageTables() -- Returns an array containing all image subpages (minus aliases) as loaded by mw.loadData. local images = {} for i, subpage in ipairs{'letter', 'chinese', 'other'} do images[i] = mw.loadData('Module:Portal/images/' .. subpage) end return images end function p._displayAll(portals, args) -- This function displays all portals that have portal images. This function is for maintenance purposes and should not be used in -- articles, for two reasons: 1) there are over 1500 portals with portal images, and 2) the module doesn't record how the portal -- names are capitalized, so the portal links may be broken. local lang = mw.language.getContentLanguage() local count = 1 for _, imageTable in ipairs(getAllImageTables()) do for portal in pairs(imageTable) do portals[count] = lang:ucfirst(portal) count = count + 1 end end return p._portal(portals, args) end function p._imageDupes() -- This function searches the image subpages to find duplicate images. If duplicate images exist, it is not necessarily a bad thing, -- as different portals might just happen to choose the same image. However, this function is helpful in identifying images that -- should be moved to a portal alias for ease of maintenance. local exists, dupes = {}, {} for _, imageTable in ipairs(getAllImageTables()) do for portal, image in pairs(imageTable) do if not exists[image] then exists[image] = portal else table.insert(dupes, string.format('The image "[[:File:%s|%s]]" is used for both portals "%s" and "%s".', image, image, exists[image], portal)) end end end if #dupes < 1 then return 'No duplicate images found.' else return 'The following duplicate images were found:\n* ' .. table.concat(dupes, '\n* ') end end local function processPortalArgs(args) -- This function processes a table of arguments and returns two tables: an array of portal names for processing by ipairs, and a table of -- the named arguments that specify style options, etc. We need to use ipairs because we want to list all the portals in the order -- they were passed to the template, but we also want to be able to deal with positional arguments passed explicitly, for example -- {{portal|2=Politics}}. The behaviour of ipairs is undefined if nil values are present, so we need to make sure they are all removed. args = type(args) == 'table' and args or {} local portals = {} local namedArgs = {} for k, v in pairs(args) do if type(k) == 'number' and type(v) == 'string' then -- Make sure we have no non-string portal names. table.insert(portals, k) elseif type(k) ~= 'number' then namedArgs[k] = v end end table.sort(portals) for i, v in ipairs(portals) do portals[i] = args[v] end return portals, namedArgs end local function makeWrapper(funcName) -- Processes external arguments and sends them to the other functions. return function (frame) -- If called via #invoke, use the args passed into the invoking -- template, or the args passed to #invoke if any exist. Otherwise -- assume args are being passed directly in from the debug console -- or from another Lua module. local origArgs if type(frame.getParent) == 'function' then origArgs = frame:getParent().args for k, v in pairs(frame.args) do origArgs = frame.args break end else origArgs = frame end -- Trim whitespace and remove blank arguments. local args = {} for k, v in pairs(origArgs) do if type(v) == 'string' then v = mw.text.trim(v) end if v ~= '' then args[k] = v end end return p[funcName](processPortalArgs(args)) -- passes two tables to func: an array of portal names, and a table of named arguments. end end for _, funcName in ipairs{'portal', 'image', 'imageDupes', 'displayAll'} do p[funcName] = makeWrapper('_' .. funcName) end return p
</text>
<sha1>ixc98puxthoysmdljnl3lsaq8uu0qa3</sha1>
</revision>
</page>
<page>
<title>Module:Portal/images/aliases</title>
<ns>828</ns>
<id>3670792</id>
<revision>
<id>64743596</id>
<parentid>64743555</parentid>
<timestamp>2021-03-13T02:26:05Z</timestamp>
<contributor>
<username>Sanmosa</username>
<id>1572602</id>
</contributor>
<minor/>
<comment>EP // Edit via Wikiplus</comment>
<model>Scribunto</model>
<format>text/plain</format>
<text bytes="9363" xml:space="preserve">
-- 别名数据。每行格式为 -- ["主题"] = {"别名1", "别名2", ...}, -- 别名大小寫不敏感，內部格式為小寫字母。 -- 主题名稱大小寫不敏感，但建議按正確的大小寫格式書寫。內部格式亦為小寫字母。 local data = { ["一级方程式"] = {"一級方程式"}, ["上海"] = {}, ["世界遗产"] = {"世界遺產"}, ["东南亚"] = {"東南亞"}, ["东德"] = {"東德"}, ["中世纪"] = {"中世紀"}, ["中华人民共和国"] = {"中華人民共和國"}, ["中华民国"] = {"中華民國"}, ["中国"] = {"中國"}, ["中国共产党"] = {"中國共產黨"}, ["中国建筑"] = {"中國建築"}, ["中国文化遗产"] = {"中國文化遺產"}, ["书籍"] = {"書籍"}, ["云南"] = {"雲南"}, ["云林"] = {"雲林", "Yunlin", "雲林縣", "云林县"}, ["互联网"] = {"網際網路", "互聯網"}, ["亚洲"] = {"亞洲"}, ["人权"] = {"人權"}, ["人物"] = {}, ["以色列"] = {}, ["任天堂"] = {}, ["伊斯兰教"] = {"伊斯蘭教"}, ["伊朗"] = {}, ["伦敦"] = {"倫敦"}, ["体操"] = {"體操"}, ["体育运动"] = {"體育運動", "體育", "運動", "体育", "运动"}, ["佛教"] = {}, ["俄罗斯"] = {"俄羅斯"}, ["信息技术"] = {"資訊科技"}, ["兩棲爬行動物"] = {"两栖爬行动物"}, ["共产主义"] = {"共產主義"}, ["军事"] = {"軍事"}, ["农业和农学"] = {"農業和農學", "農業", "農學", "农业", "农学"}, ["冷战"] = {"冷戰"}, ["几何学"] = {"幾何學", "幾何", "几何"}, ["分子与细胞生物学"] = {"分子與細胞生物學"}, ["加尔文主义"] = {"加爾文主義"}, ["加拿大"] = {}, ["动漫"] = {"動漫", "ACG"}, ["动物"] = {"animals", "animal", "動物"}, ["化学"] = {"化學"}, ["北京"] = {}, ["朝鲜民主主义人民共和国"] = {"北韓", "北朝鲜", "朝鮮民主主義人民共和國"}, ["医学"] = {"醫學"}, ["南京"] = {}, ["危险性物质"] = {"危險性物質"}, ["历史"] = {"歷史"}, ["古典音乐"] = {"古典音樂"}, ["古希腊宗教"] = {"古希臘宗教"}, ["古罗马"] = {"古羅馬"}, ["可再生能源"] = {}, ["可持续发展"] = {"可持續發展"}, ["台中"] = {"臺中"}, ["台北"] = {"臺北"}, ["台南"] = {"臺南"}, ["台湾"] = {"台灣", "臺灣"}, ["哈利·波特"] = {"哈利波特"}, ["哲学"] = {"哲學"}, ["四川"] = {}, ["园艺"] = {"園藝"}, ["国际关系"] = {"國際關係"}, ["地图"] = {"地圖"}, ["地球科学"] = {"地球科學"}, ["地理学"] = {"地理學", "地理"}, ["坦克"] = {"戰車"}, ["埃及"] = {}, ["城市轨道交通"] = {"城市軌道交通"}, ["基督教"] = {}, ["堪萨斯州"] = {"堪薩斯州", "Kansas"}, ["大学"] = {"大學"}, ["大韩民国"] = {"大韓民國", "韩国", "韓國"}, ["天主教"] = {}, ["天文学"] = {"天文學", "天文"}, ["天津"] = {}, ["太平洋台风季"] = {"太平洋颱風季"}, ["太空"] = {}, ["奥斯卡金像奖"] = {"奧斯卡金像獎"}, ["奥运会"] = {"奧運會"}, ["女性主義"] = {"女性主义", "女权主义", "女權主義"}, ["安哥拉"] = {}, ["宗教"] = {}, ["密码学"] = {"密碼學"}, ["小说"] = {"小說"}, ["山东"] = {"山東"}, ["工程"] = {}, ["巴士"] = {"公共汽车", "公共汽車"}, ["巴西"] = {}, ["布兰妮·斯皮尔斯"] = {"布蘭妮·斯皮爾斯", "布蘭妮·斯皮雅斯"}, ["希腊"] = {"希臘"}, ["广东"] = {"廣東"}, ["广州"] = {"廣州"}, ["广西"] = {"廣西"}, ["建筑"] = {"建築"}, ["微软"] = {"微軟"}, ["德国"] = {"德國"}, ["心理学"] = {"心理學"}, ["性"] = {"性学", "性學", "性與性學", "性与性学"}, ["恐怖主义"] = {"恐怖主義"}, ["恐龙"] = {"恐龍"}, ["恒星"] = {"恆星"}, ["意大利"] = {"義大利"}, ["我的世界"] = {"當個創世神"}, ["技术"] = {"技術"}, ["摄影"] = {"攝影"}, ["政治"] = {}, ["教育"] = {}, ["数学"] = {"數學"}, ["文化"] = {}, ["文字"] = {}, ["文学"] = {"文學"}, ["新加坡"] = {}, ["新疆"] = {}, ["新闻动态"] = {"新聞動態"}, ["新陈代谢"] = {"新陳代謝"}, ["无政府主义"] = {"無政府主義"}, ["日本"] = {}, ["日本铁路"] = {"日本鐵路"}, ["日食"] = {}, ["星球大战"] = {"星際大戰", "星球大戰"}, ["暮光之城"] = {}, ["月球"] = {"月亮"}, ["有机化学"] = {"有機化學"}, ["朝鲜半岛"] = {"朝鮮半島"}, ["机器人学"] = {"機器人學"}, ["核技术"] = {"核技術"}, ["梵蒂冈"] = {"梵蒂岡"}, ["棒球"] = {}, ["植物"] = {}, ["欧洲"] = {"歐洲"}, ["武汉"] = {"武漢"}, ["歧视"] = {"歧視"}, ["死亡"] = {}, ["气象"] = {"氣象", "天气"}, ["汉字文化圈"] = {"漢字文化圈"}, ["江苏"] = {"江蘇"}, ["河北"] = {}, ["河南"] = {}, ["法国"] = {"法國"}, ["法律"] = {}, ["法轮功"] = {"法輪功"}, ["波兰"] = {"波蘭"}, ["泰勒·斯威夫特"] = {"泰勒絲"}, ["泰国"] = {"泰國"}, ["浙江"] = {}, ["海军"] = {"海軍"}, ["湖北"] = {}, ["湖南"] = {}, ["澳大利亚"] = {"澳洲", "澳大利亞"}, ["澳门"] = {"澳門"}, ["火山"] = {}, ["火星"] = {}, ["灾害"] = {"災害", "災難", "灾难"}, ["热带气旋"] = {"熱帶氣旋"}, ["物理学"] = {"物理學", "物理"}, ["犹太教"] = {"猶太教"}, ["猫"] = {"貓"}, ["环境"] = {"環境"}, ["琉球群岛"] = {"琉球群島"}, ["瑞典"] = {}, ["瑞士"] = {}, ["生态"] = {"生態"}, ["生物学"] = {"生物學"}, ["生物技术"] = {"生物技術"}, ["电信"] = {"電信"}, ["电子学"] = {"電子學"}, ["电子游戏"] = {"電子遊戲", "Video games"}, ["电影"] = {"電影"}, ["电视"] = {"電視"}, ["电视剧"] = {"電視劇"}, ["白俄罗斯"] = {"白俄羅斯"}, ["真菌"] = {}, ["社会"] = {"社會"}, ["社会学"] = {"社會學"}, ["社会科学"] = {"社會科學"}, ["神秘博士"] = {"異世奇人", "超時空博士"}, ["神经科学"] = {"neuroscience", "神經科學"}, ["神话"] = {"神話"}, ["科学"] = {"科學"}, ["童军"] = {"童軍"}, ["第一次世界大战"] = {"第一次世界大戰"}, ["第二次世界大战"] = {"第二次世界大戰"}, ["节肢动物"] = {"節肢動物"}, ["篮球"] = {"籃球"}, ["纳粹德国"] = {"納粹德國"}, ["经济学"] = {"經濟學", "經濟", "经济"}, ["网球"] = {"網球"}, ["美国"] = {"美國"}, ["美国总统"] = {"美國總統"}, ["羽毛球"] = {}, ["联合国"] = {"聯合國"}, ["能源"] = {}, ["自由主义"] = {"自由主義"}, ["自由软件"] = {"自由軟體", "自由軟件", "free software"}, ["航天"] = {"航太"}, ["航空"] = {}, ["色情"] = {}, ["艺术"] = {"藝術"}, ["芬兰"] = {"芬蘭"}, ["苏联"] = {"蘇聯"}, ["英国"] = {"英國"}, ["苹果公司"] = {"蘋果公司"}, ["荷兰"] = {"荷蘭"}, ["药理学"] = {"藥理學"}, ["西班牙"] = {}, ["计算机程序设计"] = {"電腦程式設計"}, ["设计"] = {"設計"}, ["诗歌"] = {"詩歌"}, ["语言"] = {"語言"}, ["语言学"] = {"語言學"}, ["越南"] = {}, ["足球"] = {}, ["跨性别"] = {"跨性別"}, ["身心障碍"] = {"身心障礙"}, ["软件"] = {"軟體", "軟件"}, ["迪士尼"] = {}, ["道教"] = {}, ["重庆"] = {"重慶"}, ["铁路"] = {"鐵路"}, ["青岛"] = {"青島"}, ["非洲"] = {}, ["音乐"] = {"音樂"}, ["饮食"] = {"飲食"}, ["香港"] = {}, ["马来西亚"] = {"馬來西亞"}, ["高雄"] = {}, ["鸟"] = {"鳥","鳥類","鸟类"}, ["警察与执法"] = {"警察與執法", "警察", "執法", "执法"}, ["中国大陆新闻动态"] = {"中國大陸新聞動態"}, ["中国数学史"] = {"中國數學史"}, ["中外交通史"] = {}, ["假面骑士"] = {"假面骑士", "幪面超人"}, ["北大西洋公约组织"] = {"北大西洋公約組織"}, ["南投"] = {}, ["台湾新闻动态"] = {"臺灣新聞動態", "台灣新聞動態"}, ["台湾铁路运输"] = {"臺灣鐵路運輸", "台灣鐵路運輸"}, ["名侦探柯南"] = {"名偵探柯南"}, ["哆啦A梦"] = {"哆啦A夢", "多啦A夢"}, ["国际足联世界杯"] = {"國際足聯世界杯"}, ["基隆"] = {}, ["宁波"] = {"寧波"}, ["安徽"] = {}, ["宜兰"] = {"宜蘭"}, ["少女漫画"] = {"少女漫畫"}, ["山西"] = {}, ["戏剧"] = {"戲劇"}, ["战国"] = {"戰國"}, ["政党"] = {"政黨"}, ["日本新闻动态"] = {"日本新聞動態"}, ["桃园"] = {"桃園"}, ["汉朝"] = {"漢朝"}, ["江西"] = {}, ["澳门新闻动态"] = {"澳門新聞動態"}, ["甜点"] = {"甜點"}, ["科举"] = {"科舉"}, ["苏州"] = {"蘇州"}, ["英国新闻动态"] = {"英國新聞動態"}, ["西安"] = {}, ["香港小巴路线"] = {"香港小巴路線"}, ["香港巴士路线"] = {"香港巴士路線"}, ["香港巴士总站"] = {"香港巴士總站"}, ["香港新闻动态"] = {"香港新聞動態"}, ["香港铁路运输"] = {"香港鐵路運輸"}, ["Keroro军曹"] = {"Keroro軍曹"}, ["东京"] = {"東京"}, ["贵州"] = {"貴州"}, ["灭绝与濒危物种"] = {"滅絕與瀕危物種"}, } -- 数据部分结束，以下为将表格变形为 -- ["别名"] = "主题", -- 形式所用的程序代码。 local ret = {} for portal, aliases in pairs(data) do for _, alias in ipairs(aliases) do ret[mw.ustring.lower(alias)] = portal end end return ret
</text>
<sha1>kh6d2pfu412c2xoy8ogigb7qt9j8nkr</sha1>
</revision>
</page>
<page>
<title>Module:Portal/images/chinese</title>
<ns>828</ns>
<id>5594900</id>
<revision>
<id>64918043</id>
<parentid>64910387</parentid>
<timestamp>2021-03-25T12:08:45Z</timestamp>
<contributor>
<username>TimWu007</username>
<id>1679302</id>
</contributor>
<comment>更换广州主题图片（原图已被删除）</comment>
<model>Scribunto</model>
<format>text/plain</format>
<text bytes="14500" xml:space="preserve">
-- 本模块使用简体中文作图片对应，欢迎补充。请在[[Module:Portal/images/aliases]]进行简繁转换。 return { ["一级方程式"] = "Motorsport current event.svg|alt=icon", ["上海"] = "Shanghai2.svg|link=|alt=", ["世界遗产"] = "World Heritage Logo global.svg|alt=icon", ["东南亚"] = "SE-asia.png|link=|alt=", ["东德"] = "Flag of East Germany.svg|border|link=|alt=", ["中世纪"] = "The Metropolitan M Stamp.PNG|alt=icon", ["中华人民共和国"] = "Flag of the People's Republic of China.svg|border|link=|alt=flag", ["中华民国"] = "Nuvola Taiwanese flag.svg|alt=flag", ["中国"] = "China.svg|alt=icon", ["中国共产党"] = "Danghui.svg|alt=icon", ["中国建筑"] = "Giant_Wild_Goose_Pagoda.jpg|link=|alt=", ["中国文化遗产"] = "Sun and Immortal Bird Emblem in Jinsha.svg|alt=icon", ["书籍"] = "Nuvola apps bookcase.svg|alt=icon", ["云南"] = "Dalisanta.jpg|link=|alt=", ["云林"] = "Emblem of Yunlin County.svg|link=|alt=icon", ["互联网"] = "Crystal Clear app linneighborhood.svg|alt=icon", ["亚洲"] = "Asia (orthographic projection).svg|border|link=|alt=icon", ["人权"] = "HumanRightsLogo.svg|link=|alt=", ["人物"] = "P vip.svg|link=|alt=", ["以色列"] = "Flag of Israel.svg|border|link=|alt=", ["任天堂"] = "Micrologo_Nintendo.svg|link=|alt=", ["伊斯兰教"] = "Allah-green.svg|link=|alt=", ["伊朗"] = "Flag of Iran.svg|link=|alt=", ["伦敦"] = "Coat of Arms of The City of London.svg|link=|alt=icon", ["体操"] = "Gymnastics128px.png|alt=icon", ["体育运动"] = "Sports icon.png|link=|alt=", ["佛教"] = "Dharma Wheel.svg|alt=icon", ["俄罗斯"] = "Flag of Russia.svg|border|link=|alt=", ["信息技术"] = "Desktop computer clipart - Yellow theme.svg|link=|alt=", ["兩棲爬行動物"] = "Rhacodactylus_ciliatus.jpg|link=|alt=icon", ["共产主义"] = "Symbol-hammer-and-sickle.svg|link=|alt=", ["军事"] = "Bluetank.png|link=|alt=", ["军事"] = "Bluetank.png|link=|alt=", ["农业和农学"] = "Veranotrigo.jpg|alt=icon", ["冷战"] = "Cold War Map 1959.svg|alt=icon", ["几何学"] = "Crystal Clear app 3d.png|alt=icon", ["分子与细胞生物学"] = "TPI1 structure.png|link=|alt=", ["加尔文主义"] = "Kreuz-hugenotten.svg|alt=icon", ["加拿大"] = "Flag of Canada.svg|border|link=|alt=", ["动漫"] = "Wikipe-tan face.svg|alt=icon", ["化学"] = "Papapishu-Lab-icon-6.svg|link=|alt=", ["北京"] = "Beijing-name.svg|alt=icon", ["北朝鲜"] = "Flag of North Korea.svg|border|link=|alt=", ["医学"] = "Esculaap4.svg|alt=icon", ["南京"] = "YiJiangGate.jpg|link=|alt=", ["危险性物质"] = "GHS-pictogram-exclam.svg|link=|alt=icon=", ["历史"] = "P history.svg|link=|alt=", ["古典音乐"] = "'A' (PSF).png|link=|alt=", ["古希腊宗教"] = "Laurel wreath fa13.gif|link=|alt=", ["古罗马"] = "SPQRomani.svg|link=|alt=", ["可再生能源"] = "Wind-turbine-icon.svg|alt=icon", ["可持续发展"] = "Sustainable development.svg|alt=icon", ["台中"] = "Taichung Park.jpg|link=|alt=", ["台北"] = "Taipei 101 from afar.jpg|link=|alt=", ["台湾"] = "Taiwan-icon.svg|alt=icon", ["哈利·波特"] = "HP - Harry Potter wordmark.svg|link=|alt=", ["哲学"] = "Socrates.png|link=|alt=", ["四川"] = "Sichuan prfc map.png|link=|alt=", ["园艺"] = "France Loiret La Bussiere Potager 05.jpg|alt=icon", ["国际关系"] = "Terra.png|link=|alt=", ["地图"] = "World map green.png|alt=icon", ["地球科学"] = "The Earth seen from Apollo 17 with transparent background.png|link=|alt=", ["地理学"] = "Terrestrial globe.svg|alt=icon", ["坦克"] = "AMISOM T-55.jpg|link=|alt=", ["埃及"] = "Flag of Egypt.svg|border|link=|alt=", ["城市轨道交通"] = "Metro Shanghai01.jpg|link=|alt=", ["基督教"] = "P christianity.svg|alt=icon", ["堪萨斯州"] = "Flag of Kansas.svg|border|link=|alt=icon", ["大学"] = "Platopainting.jpg|link=|alt=", ["大韩民国"] = "Flag of South Korea.svg|border|link=|alt=", ["天主教"] = "Emblem of the Holy See usual.svg|link=|alt=icon=", ["天文学"] = "Crab Nebula.jpg|link=|alt=", ["天津"] = "汉字天津.png|alt=icon", ["太平洋台风季"] = "Typhoon_tip_peak.jpg|link=|alt=", ["太空"] = "Earth-moon.jpg|link=|alt=", ["奥斯卡金像奖"] = "Video-x-generic.svg|link=|alt=", ["奥运会"] = "Olympic Rings.svg|link=|alt=", ["女性主義"] = "Woman-power_emblem.svg|link=|alt=icon=", ["女权主义"] = "Woman-power emblem.svg|link=|alt=", ["安哥拉"] = "Flag of Angola.svg|border|link=|alt=", ["宗教"] = "P religion world.svg|alt=icon", ["密码学"] = "Crypto key.svg|alt=icon", ["小说"] = "Book collection.jpg|border|alt=icon", ["山东"] = "Shandong prfc map.png|link=|alt=", ["工程"] = "Nuvola apps kcmsystem.svg|alt=icon", ["巴士"] = "BSicon BUS.svg|link=|alt=", ["巴西"] = "Flag of Brazil.svg|border|link=|alt=", ["布兰妮·斯皮尔斯"] = "Baby One More Time 2009.jpg|alt=icon", ["希腊"] = "Flag of Greece.svg|border|link=|alt=", ["年"] = "Hourglass.svg|link=|alt=", ["广东"] = "Guangdong_Province_flag_replacement_-_Simplified_Chinese.svg|alt=icon", ["广州"] = "GZFiveRams.JPG|alt=", ["广西"] = "LijiangRiver5.jpg|link=|alt=", ["建筑"] = "P parthenon.svg|alt=icon", ["微软"] = "M box.svg|link=|alt=", ["德国"] = "Flag of Germany.svg|border|link=|alt=flag", ["心理学"] = "Psi2.svg|link=|alt=", ["性"] = "Sexual orientation - 4 symbols.svg|alt=icon", ["恐怖主义"] = "National Park Service 9-11 Statue of Liberty and WTC fire.jpg|border|link=|alt=", ["恐龙"] = "Tyrannoskull.jpg|link=|alt=", ["恒星"] = "He1523a.jpg|alt=icon", ["意大利"] = "Flag of Italy.svg|border|link=|alt=", ["我的世界"] = "Minecraft cube.svg|link=|alt=", ["技术"] = "Telecom-icon.svg|link=|alt=", ["摄影"] = "Large format camera lens.png|link=|alt=", ["政治"] = "A coloured voting box.svg|border|alt=icon", ["教育"] = "Nuvola apps bookcase.svg|alt=icon", ["数学"] = "Nuvola apps edu mathematics blue-p.svg|alt=icon", ["文化"] = "P culture.svg|alt=icon", ["文化"] = "P culture.svg|alt=icon", ["文字"] = "Kanji Wa.png|link=|alt=", ["文学"] = "Books-aj.svg aj ashton 01.svg|link=|alt=", ["新加坡"] = "Flag of Singapore.svg|border|link=|alt=", ["新疆"] = "Lake_Kanas.jpg|link=|alt=", ["新闻动态"] = "Ambox globe.svg|link=|alt=", ["新陈代谢"] = "Metabolism 790px partly labeled.png|link=|alt=", ["无政府主义"] = "BlackFlagSymbol.svg|alt=icon", ["日本"] = "Flag of Japan.svg|border|link=|alt=", ["日本铁路"] = "JR Rail ja.svg|alt=icon", ["日食"] = "Solar eclips 1999 4.jpg|link=|alt=", ["星球大战"] = "Lightsaber blue.svg|link=|alt=", ["暮光之城"] = "Apple icon 2.png|alt=icon", ["月球"] = "Moon-Mdf-2005.jpg|alt=icon", ["有机化学"] = "Covalent.svg|alt=icon", ["朝鲜半岛"] = "Korea Map.svg|alt=icon", ["机器人学"] = "Animation2.gif|alt=icon", ["核技术"] = "Radioactive.svg|link=|alt=", ["梵蒂冈"] = "Flag of the Vatican City.svg|border|link=|alt=flag", ["棒球"] = "Baseball (crop).jpg|alt=icon", ["植物"] = "Rose Amber Flush 20070601.jpg|alt=icon", ["欧洲"] = "Europe green light.png|link=|alt=", ["武汉"] = "CN - Hubei - Wuhan - Kranichpagode.JPG|link=|alt=", ["歧视"] = "Disclogo1.svg|link=|alt=", ["死亡"] = "Kalebp skull.svg|link=|alt=", ["气象"] = "Cumulus clouds in fair weather.jpeg|alt=icon", ["汉字文化圈"] = "HanWaHanViet.svg|alt=icon", ["江苏"] = "Jiangsu outline map.svg|link=|alt=", ["河北"] = "China Hebei stub.svg|alt=icon", ["河南"] = "Henan-icon09.jpg", ["法国"] = "Flag of France.svg|border|link=|alt=", ["法律"] = "Johnny-automatic-scales-of-justice.svg|link=|alt=", ["法轮功"] = "Falun Gong Logo.svg|alt=icon", ["波兰"] = "Flag of Poland.svg|border|link=|alt=", ["泰勒·斯威夫特"] = "Taylor Swift Red Tour 5, 2013.jpg|link=|alt=", ["泰国"] = "Flag of Thailand.svg|border|link=|alt=", ["浙江"] = "Wuyuehmap.PNG|link=|alt=", ["海军"] = "Anchor pictogram.svg|alt=icon", ["消防"] = "Large bonfire.jpg|link=|alt=icon", ["湖北"] = "hubeie.png|link=|alt=", ["湖南"] = "Hsiang.png|link=|alt=", ["澳大利亚"] = "Flag of Australia.svg|border|link=|alt=", ["澳门"] = "Macau SAR Regional Emblem.svg|border|link=|alt=", ["火山"] = "Spaccato vulcano.svg|alt=icon", ["火星"] = "Mars Hubble.jpg|link=|alt=", ["灾害"] = "SanFranHouses06.JPG|link=|alt=", ["热带气旋"] = "Cyclone Catarina from the ISS on March 26 2004.JPG|link=|alt=", ["物理"] = "Stylised Lithium Atom.svg|alt=icon", ["物理学"] = "Stylised Lithium Atom.svg|alt=icon", ["犹太教"] = "Star of David.svg|link=|alt=", ["猫"] = "Cat03.jpg|alt=icon", ["环境"] = "Aegopodium podagraria1 ies.jpg|alt=icon", ["琉球群岛"] = "Flag of Ryukyu.svg|border|link=|alt=", ["瑞典"] = "Flag of Sweden.svg|border|link=|alt=", ["瑞士"] = "Flag of Switzerland.svg|border|link=|alt=", ["生态"] = "Earth Day Flag.png|link=|alt=", ["生物"] = "Chongbaishuixian.JPG|link=|alt=icon", ["生物学"] = "Issoria lathonia.jpg|alt=icon", ["生物技术"] = "3d tRNA.png|alt=icon", ["电信"] = "Telecom-icon.svg|link=|alt=", ["电子学"] = "Nuvola apps ksim.png|alt=icon", ["电子游戏"] = "Crystal Clear app package games.svg|link=|alt=", ["电影"] = "Video-x-generic.svg|link=|alt=", ["电视"] = "Blank television set.svg|alt=icon", ["电视剧"] = "Tvfilm.svg|alt=icon", ["白俄罗斯"] = "Flag of Belarus.svg|border|link=|alt=", ["真菌"] = "Karl Johanssvamp, Iduns kokbok.png|link=|alt=", ["社会"] = "Social sciences.svg|alt=icon", ["社会学"] = "Logo sociology.svg|link=|alt=", ["社会科学"] = "DrustveneNauke.png|alt=icon", ["神秘博士"] = "TARDIS-trans.png|alt=icon", ["神經科學"] = "Frontal_lobe_-_animation.gif|link=|alt=icon", ["神话"] = "Draig.svg|link=|alt=", ["科学"] = "Nuvola apps kalzium.svg|alt=icon", ["童军"] = "WikiProject Scouting fleur-de-lis dark.svg|alt=icon", ["第一次世界大战"] = "Fokker Dr. I (117710246).jpg|border|alt=icon", ["第二次世界大战"] = "Heinkel He 111 during the Battle of Britain.jpg|border|link=|alt=", ["節肢動物"] = "Scolopendra_cingulata_-_D7-08-2291.JPG|link=|alt=icon", ["篮球"] = "Basketball.png|link=|alt=", ["纳粹德国"] = "Flag of German Reich (1935–1945).svg|link=|alt=", ["经济学"] = "Emblem-money.svg|alt=icon", ["网球"] = "Tennis ball.svg|alt=icon", ["美国"] = "Flag of the United States.svg|border|link=|alt=", ["美国总统"] = "Seal Of The President Of The United States Of America.svg|alt=icon", ["羽毛球"] = "Badminton racquet.svg|link=|alt=", ["联合国"] = "Small Flag of the United Nations ZP.svg|border|link=|alt=", ["能源"] = "Crystal energy.svg|alt=icon", ["自由主义"] = "Yellow flag waving.svg|alt=icon", ["自由软件"] = "Free and open-source software logo (2009).svg|link=|alt=", ["航天"] = "RocketSunIcon.svg|link=|alt=", ["航空"] = "Aviacionavion.png|link=|alt=", ["色情"] = "Pornproject logo.svg|alt=icon", ["艺术"] = "Nuvola apps package graphics.png|alt=icon", ["芬兰"] = "Flag of Finland.svg|border|link=|alt=", ["苏联"] = "Flag of the Soviet Union.svg|border|link=|alt=", ["英国"] = "Flag of the United Kingdom.svg|border|link=|alt=", ["苹果公司"] = "Apple logo black.svg|link=|alt=", ["荷兰"] = "Flag of the Netherlands.svg|border|link=|alt=", ["藥理學"] = "Strattera_atomoxetin.jpg|alt=icon", ["西班牙"] = "Flag of Spain.svg|border|link=|alt=", ["计算机程序设计"] = "8bit-dynamiclist (reversed).gif|alt=icon", ["设计"] = "Design portal logo.jpg|alt=icon", ["诗歌"] = "Quill and ink.svg|alt=icon", ["语言"] = "Globelang.svg|alt=icon", ["语言学"] = "Globe of letters.svg|alt=icon", ["越南"] = "Flag of Vietnam.svg|border|link=|alt=flag", ["足球"] = "Soccer ball.svg|alt=icon", ["跨性别"] = "Portal Transgender.svg|alt=icon", ["身心障碍"] = "Handicapped Accessible sign.svg|link=|alt=", ["软件"] = "Crystal Clear device cdrom unmount.png|alt=icon", ["迪士尼"] = "Magic Kingdom castle.jpg|alt=icon", ["道教"] = "Taijitu red gradient.svg|link=|alt=", ["重庆"] = "Chongqing Administration.svg|alt=icon", ["铁路"] = "P train.svg|alt=icon", ["青岛"] = "May_4th_icon.svg|link=|alt=", ["非洲"] = "Africa satellite orthographic.jpg|link=|alt=", ["音乐"] = "Audio a.svg|link=|alt=", ["饮食"] = "Foodlogo2.svg|alt=icon", ["香港"] = "Hong Kong SAR Regional Emblem.svg|link=|alt=", ["马来西亚"] = "Flag of Malaysia.svg|border|link=|alt=", ["高雄"] = "Emblem of Kaohsiung City.svg|alt=icon", ["鸟"] = "Eagle 01.svg|link=|alt=", ["警察與執法"] = "Policeman-icon.gif|alt=icon", ["世嘉"] = "SEGA logo.svg|border|link=|alt=icon", ["阿拉巴马州"] = "Flag of Alabama.svg|border|link=|alt=icon", ["南非"] = "Flag of South Africa.svg|border|link=|alt=icon", ["钱币学"] = "United States penny, obverse, 2002.png|alt=", ["乌克兰"] = "Flag of Ukraine.svg|alt=flag", ["拜占庭帝国"] = "Byzantine imperial flag, 14th century, square.svg|alt=flag", ["动物"] = "Bio_Editors_Barnstar.png|alt=", ["澎湖"] = "Seal_of_Penghu_County.svg", ["东京"] = "PrefSymbol-Tokyo.svg|alt=icon", ["藥用植物"] = "Cola_acuminata_-_Köhler–s_Medizinal-Pflanzen-190.jpg|alt=icon", ["2019冠状病毒病"] = "SARS-CoV-2 (Wikimedia colors).svg|alt=icon", ["亚美尼亚"] = "Flag of Armenia.svg|alt=icon", ["贵州"] = "Huangguoshu dapubu.jpg|link=|alt=", ["灭绝与濒危物种"] = "Palais de la Decouverte Tyrannosaurus rex p1050042.jpg|alt=", ["病毒"] = "Sida-aids.png", -- ["中国大陆新闻动态"] = "", -- ["中国数学史"] = "", -- ["中外交通史"] = "", -- ["假面骑士"] = "", -- ["北大西洋公约组织"] = "", -- ["南投"] = "", -- ["台湾新闻动态"] = "", -- ["台湾铁路运输"] = "", -- ["名侦探柯南"] = "", -- ["哆啦A梦"] = "", -- ["国际足联世界杯"] = "", -- ["基隆"] = "", -- ["宁波"] = "", -- ["安徽"] = "", -- ["宜兰"] = "", -- ["少女漫画"] = "", -- ["山西"] = "", -- ["戏剧"] = "", -- ["战国"] = "", -- ["政党"] = "", -- ["日本新闻动态"] = "", -- ["桃园"] = "", -- ["汉朝"] = "", -- ["江西"] = "", -- ["澳门新闻动态"] = "", -- ["甜点"] = "", -- ["科举"] = "", -- ["苏州"] = "", -- ["英国新闻动态"] = "", -- ["西安"] = "", -- ["香港小巴路线"] = "", -- ["香港巴士总站"] = "", -- ["香港新闻动态"] = "", -- ["香港铁路运输"] = "", }
</text>
<sha1>a95ra9w4xq80jag6sldv5ubaz9e8af9</sha1>
</revision>
</page>
<page>
<title>Module:Portal/images/other</title>
<ns>828</ns>
<id>3670783</id>
<revision>
<id>61203308</id>
<parentid>59091104</parentid>
<timestamp>2020-08-17T04:12:31Z</timestamp>
<contributor>
<username>Xiplus-abot</username>
<id>2737953</id>
</contributor>
<minor/>
<comment>
已更改“[[Module:Portal/images/other]]”的保护等级：高風險模板：25976引用<!-- [[User:Xiplus-abot/task/3|機器人3]] -->（[编辑=仅允许模板编辑员和管理员]（无限期）[移动=仅允许模板编辑员和管理员]（无限期））
</comment>
<model>Scribunto</model>
<format>text/plain</format>
<text bytes="104" xml:space="preserve">
return { ["2019冠状病毒病"] = "SARS-CoV-2 (Wikimedia colors).svg|alt=2019冠状病毒病图标", }
</text>
<sha1>eusnh2zfhpa7s4e0ygrpwgsbwutqt38</sha1>
</revision>
</page>
<page>
<title>Module:Unicode data</title>
<ns>828</ns>
<id>7067757</id>
<revision>
<id>64841235</id>
<parentid>59911544</parentid>
<timestamp>2021-03-20T00:05:22Z</timestamp>
<contributor>
<username>Xiplus-abot</username>
<id>2737953</id>
</contributor>
<minor/>
<comment>
已保护“[[Module:Unicode data]]”：高風險模板：214102引用<!-- [[User:Xiplus-abot/task/3|機器人3]] -->（[编辑=仅允许管理员]（无限期）[移动=仅允许管理员]（无限期））
</comment>
<model>Scribunto</model>
<format>text/plain</format>
<text bytes="16011" xml:space="preserve">
local p = {} local floor = math.floor local function errorf(level, ...) if type(level) == "number" then return error(string.format(...), level + 1) else -- level is actually the format string. return error(string.format(level, ...), 2) end end local function binary_range_search(codepoint, ranges) local low, mid, high low, high = 1, ranges.length or require "Module:TableTools".length(ranges) while low <= high do mid = floor((low + high) / 2) local range = ranges[mid] if codepoint < range[1] then high = mid - 1 elseif codepoint <= range[2] then return range, mid else low = mid + 1 end end return nil, mid end p.binary_range_search = binary_range_search --[[ local function linear_range_search(codepoint, ranges) for i, range in ipairs(ranges) do if range[1] <= codepoint and codepoint <= range[2] then return range end end end --]] -- Load a module by indexing "loader" with the name of the module minus the -- "Module:Unicode data/" part. For instance, loader.blocks returns -- [[Module:Unicode data/blocks]]. If a module cannot be loaded, false will be -- returned. local loader = setmetatable({}, { __index = function (self, key) local success, data = pcall(mw.loadData, "Module:Unicode data/" .. key) if not success then data = false end self[key] = data return data end }) -- For the algorithm used to generate Hangul Syllable names, -- see "Hangul Syllable Name Generation" in section 3.12 of the -- Unicode Specification: -- https://www.unicode.org/versions/Unicode11.0.0/ch03.pdf local name_hooks = { { 0x00, 0x1F, "<control-%04X>" }, -- C0 control characters { 0x7F, 0x9F, "<control-%04X>" }, -- DEL and C1 control characters { 0x3400, 0x4DBF, "CJK UNIFIED IDEOGRAPH-%04X" }, -- CJK Ideograph Extension A { 0x4E00, 0x9FFC, "CJK UNIFIED IDEOGRAPH-%04X" }, -- CJK Ideograph { 0xAC00, 0xD7A3, function (codepoint) -- Hangul Syllables local Hangul_data = loader.Hangul local syllable_index = codepoint - 0xAC00 return ("HANGUL SYLLABLE %s%s%s"):format( Hangul_data.leads[floor(syllable_index / Hangul_data.final_count)], Hangul_data.vowels[floor((syllable_index % Hangul_data.final_count) / Hangul_data.trail_count)], Hangul_data.trails[syllable_index % Hangul_data.trail_count] ) end }, -- High Surrogates, High Private Use Surrogates, Low Surrogates { 0xD800, 0xDFFF, "<surrogate-%04X>" }, { 0xE000, 0xF8FF, "<private-use-%04X>" }, -- Private Use -- CJK Compatibility Ideographs { 0xF900, 0xFA6D, "CJK COMPATIBILITY IDEOGRAPH-%04X" }, { 0xFA70, 0xFAD9, "CJK COMPATIBILITY IDEOGRAPH-%04X" }, { 0x17000, 0x187F7, "TANGUT IDEOGRAPH-%04X" }, -- Tangut Ideograph { 0x18800, 0x18AFF, function (codepoint) return ("TANGUT COMPONENT-%03d"):format(codepoint - 0x187FF) end }, { 0x18D00, 0x18D08, "TANGUT IDEOGRAPH-%04X" }, -- Tangut Ideograph Supplement { 0x1B170, 0x1B2FB, "NUSHU CHARACTER-%04X" }, -- Nushu { 0x20000, 0x2A6DD, "CJK UNIFIED IDEOGRAPH-%04X" }, -- CJK Ideograph Extension B { 0x2A700, 0x2B734, "CJK UNIFIED IDEOGRAPH-%04X" }, -- CJK Ideograph Extension C { 0x2B740, 0x2B81D, "CJK UNIFIED IDEOGRAPH-%04X" }, -- CJK Ideograph Extension D { 0x2B820, 0x2CEA1, "CJK UNIFIED IDEOGRAPH-%04X" }, -- CJK Ideograph Extension E { 0x2CEB0, 0x2EBE0, "CJK UNIFIED IDEOGRAPH-%04X" }, -- CJK Ideograph Extension F -- CJK Compatibility Ideographs Supplement (Supplementary Ideographic Plane) { 0x2F800, 0x2FA1D, "CJK COMPATIBILITY IDEOGRAPH-%04X" }, { 0xE0100, 0xE01EF, function (codepoint) -- Variation Selectors Supplement return ("VARIATION SELECTOR-%d"):format(codepoint - 0xE0100 + 17) end}, { 0x30000, 0x3134A, "CJK UNIFIED IDEOGRAPH-%04X" }, -- CJK Ideograph Extension G { 0xF0000, 0xFFFFD, "<private-use-%04X>" }, -- Plane 15 Private Use { 0x100000, 0x10FFFD, "<private-use-%04X>" } -- Plane 16 Private Use } name_hooks.length = #name_hooks local name_range_cache local function generate_name(data, codepoint) if type(data) == "string" then return data:format(codepoint) else return data(codepoint) end end --[[ -- Checks that the code point is a number and in range. -- Does not check whether code point is an integer. -- Not used local function check_codepoint(funcName, argIdx, val) require 'libraryUtil'.checkType(funcName, argIdx, val, 'number') if codepoint < 0 or 0x10FFFF < codepoint then errorf("Codepoint %04X out of range", codepoint) end end --]] -- https://www.unicode.org/versions/Unicode11.0.0/ch04.pdf, section 4.8 function p.lookup_name(codepoint) -- U+FDD0-U+FDEF and all code points ending in FFFE or FFFF are Unassigned -- (Cn) and specifically noncharacters: -- https://www.unicode.org/faq/private_use.html#nonchar4 if 0xFDD0 <= codepoint and (codepoint <= 0xFDEF or floor(codepoint % 0x10000) >= 0xFFFE) then return ("<noncharacter-%04X>"):format(codepoint) end if name_range_cache -- Check if previously used "name hook" applies to this code point. and codepoint >= name_range_cache[1] and codepoint <= name_range_cache[2] then return generate_name(name_range_cache[3], codepoint) end local range = binary_range_search(codepoint, name_hooks) if range then name_range_cache = range return generate_name(range[3], codepoint) end local data = loader[('names/%03X'):format(codepoint / 0x1000)] if data and data[codepoint] then return data[codepoint] -- Unassigned (Cn) consists of noncharacters and reserved characters. -- The character has been established not to be a noncharacter, -- and if it were assigned, its name would already been retrieved, -- so it must be reserved. else return ("<reserved-%04X>"):format(codepoint) end end --[[ -- No image data modules on Wikipedia yet. function p.lookup_image(codepoint) local data = loader[('images/%03X'):format(codepoint / 0x1000)] if data then return data[codepoint] end end --]] local planes = { [ 0] = "Basic Multilingual Plane"; [ 1] = "Supplementary Multilingual Plane"; [ 2] = "Supplementary Ideographic Plane"; [ 3] = "Tertiary Ideographic Plane"; [14] = "Supplementary Special-purpose Plane"; [15] = "Supplementary Private Use Area-A"; [16] = "Supplementary Private Use Area-B"; } -- Load [[Module:Unicode data/blocks]] if needed and assign it to this variable. local blocks local function block_iter(blocks, i) i = i + 1 local data = blocks[i] if data then -- Unpack doesn't work on tables loaded with mw.loadData. return i, data[1], data[2], data[3] end end -- An ipairs-type iterator generator for the list of blocks. function p.enum_blocks() local blocks = loader.blocks return block_iter, blocks, 0 end function p.lookup_plane(codepoint) local i = floor(codepoint / 0x10000) return planes[i] or ("Plane %u"):format(i) end function p.lookup_block(codepoint) local blocks = loader.blocks local range = binary_range_search(codepoint, blocks) if range then return range[3] else return "No Block" end end function p.get_block_info(name) for i, block in ipairs(loader.blocks) do if block[3] == name then return block end end end function p.is_valid_pagename(pagename) local has_nonws = false for cp in mw.ustring.gcodepoint(pagename) do if (cp == 0x0023) -- # or (cp == 0x005B) -- [ or (cp == 0x005D) -- ] or (cp == 0x007B) -- { or (cp == 0x007C) -- | or (cp == 0x007D) -- } or (cp == 0x180E) -- MONGOLIAN VOWEL SEPARATOR or ((cp >= 0x2000) and (cp <= 0x200A)) -- spaces in General Punctuation block or (cp == 0xFFFD) -- REPLACEMENT CHARACTER then return false end local printable, result = p.is_printable(cp) if not printable then return false end if result ~= "space-separator" then has_nonws = true end end return has_nonws end local function manual_unpack(what, from) if what[from + 1] == nil then return what[from] end local result = {} from = from or 1 for i, item in ipairs(what) do if i >= from then table.insert(result, item) end end return unpack(result) end local function compare_ranges(range1, range2) return range1[1] < range2[1] end -- Creates a function to look up data in a module that contains "singles" (a -- code point-to-data map) and "ranges" (an array containing arrays that contain -- the low and high code points of a range and the data associated with that -- range). -- "loader" loads and returns the "singles" and "ranges" tables. -- "match_func" is passed the code point and either the data or the "dots", and -- generates the final result of the function. -- The varargs ("dots") describes the default data to be returned if there wasn't -- a match. -- In case the function is used more than once, "cache" saves ranges that have -- already been found to match, or a range whose data is the default if there -- was no match. local function memo_lookup(data_module_subpage, match_func, ...) local dots = { ... } local cache = {} local singles, ranges return function (codepoint) if not singles then local data_module = loader[data_module_subpage] singles, ranges = data_module.singles, data_module.ranges end if singles[codepoint] then return match_func(codepoint, singles[codepoint]) end local range = binary_range_search(codepoint, cache) if range then return match_func(codepoint, manual_unpack(range, 3)) end local range, index = binary_range_search(codepoint, ranges) if range then table.insert(cache, range) table.sort(cache, compare_ranges) return match_func(codepoint, manual_unpack(range, 3)) end if ranges[index] then local dots_range if codepoint > ranges[index][2] then dots_range = { ranges[index][2] + 1, ranges[index + 1] and ranges[index + 1][1] - 1 or 0x10FFFF, unpack(dots) } else -- codepoint < range[index][1] dots_range = { ranges[index - 1] and ranges[index - 1][2] + 1 or 0, ranges[index][1] - 1, unpack(dots) } end table.sort(cache, compare_ranges) end return match_func(codepoint) end end -- Get a code point's combining class value in [[Module:Unicode data/combining]], -- and return whether this value is not zero. Zero is assigned as the default -- if the combining class value is not found in this data module. -- That is, return true if character is combining, or false if it is not. -- See https://www.unicode.org/reports/tr44/#Canonical_Combining_Class_Values for -- more information. p.is_combining = memo_lookup( "combining", function (codepoint, combining_class) return combining_class and combining_class ~= 0 or false end, 0) function p.add_dotted_circle(str) return (mw.ustring.gsub(str, ".", function(char) if p.is_combining(mw.ustring.codepoint(char)) then return '◌' .. char end end)) end local lookup_control = memo_lookup( "control", function (codepoint, ccc) return ccc or "assigned" end, "assigned") p.lookup_control = lookup_control function p.is_assigned(codepoint) return lookup_control(codepoint) ~= "unassigned" end function p.is_printable(codepoint) local result = lookup_control(codepoint) return (result == "assigned") or (result == "space-separator"), result end function p.is_whitespace(codepoint) local result = lookup_control(codepoint) return (result == "space-separator"), result end p.lookup_category = memo_lookup( "category", function (codepoint, category) return category end, "Cn") local lookup_script = memo_lookup( "scripts", function (codepoint, script_code) return script_code or 'Zzzz' end, "Zzzz") p.lookup_script = lookup_script function p.get_best_script(str) -- Check type of argument, because mw.text.decode coerces numbers to strings! require "libraryUtil".checkType("get_best_script", 1, str, "string") -- Convert HTML character references (including named character references, -- or character entities) to characters. str = mw.text.decode(str, true) local scripts = {} for codepoint in mw.ustring.gcodepoint(str) do local script = lookup_script(codepoint) -- Ignore "Inherited", "Undetermined", or "Uncoded" scripts. if not (script == "Zyyy" or script == "Zinh" or script == "Zzzz") then scripts[script] = true end end -- If scripts does not contain two or more keys, -- return first and only key (script code) in table. if not next(scripts, next(scripts)) then return next(scripts) end -- else return majority script, or else "Zzzz"? end function p.is_Latin(str) require "libraryUtil".checkType("get_best_script", 1, str, "string") str = mw.text.decode(str, true) -- Search for the leading bytes that introduce the UTF-8 encoding of the -- code points U+0340-U+10FFFF. If they are not found and there is at least -- one Latin-script character, the string counts as Latin, because the rest -- of the characters can only be Zyyy, Zinh, and Zzzz. -- The only scripts found below U+0370 (the first code point of the Greek -- and Coptic block) are Latn, Zyyy, Zinh, and Zzzz. -- See the codepage in the [[UTF-8]] article. if not str:find "[\205-\244]" then for codepoint in mw.ustring.gcodepoint(str) do if lookup_script(codepoint) == "Latn" then return true end end end local Latn = false for codepoint in mw.ustring.gcodepoint(str) do local script = lookup_script(codepoint) if script == "Latn" then Latn = true elseif not (script == "Zyyy" or script == "Zinh" or script == "Zzzz") then return false end end return Latn end -- Checks that a string contains only characters belonging to right-to-left -- scripts, or characters of ignorable scripts. function p.is_rtl(str) require "libraryUtil".checkType("get_best_script", 1, str, "string") str = mw.text.decode(str, true) -- Search for the leading bytes that introduce the UTF-8 encoding of the -- code points U+0580-U+10FFFF. If they are not found, the string can only -- have characters from a left-to-right script, because the first code point -- in a right-to-left script is U+0591, in the Hebrew block. if not str:find "[\214-\244]" then return false end local result = false local rtl = loader.scripts.rtl for codepoint in mw.ustring.gcodepoint(str) do local script = lookup_script(codepoint) if rtl[script] then result = true elseif not (script == "Zyyy" or script == "Zinh" or script == "Zzzz") then return false end end return result end local function get_codepoint(args, arg) local codepoint_string = args[arg] or errorf(2, "Parameter %s is required", tostring(arg)) local codepoint = tonumber(codepoint_string, 16) or errorf(2, "Parameter %s is not a code point in hexadecimal base", tostring(arg)) if not (0 <= codepoint and codepoint <= 0x10FFFF) then errorf(2, "code point in parameter %s out of range", tostring(arg)) end return codepoint end local function get_func(args, arg, prefix) local suffix = args[arg] or errorf(2, "Parameter %s is required", tostring(arg)) suffix = mw.text.trim(suffix) local func_name = prefix .. suffix local func = p[func_name] or errorf(2, "There is no function '%s'", func_name) return func end -- This function allows any of the "lookup" functions to be invoked. The first -- parameter is the word after "lookup_"; the second parameter is the code point -- in hexadecimal base. function p.lookup(frame) local func = get_func(frame.args, 1, "lookup_") local codepoint = get_codepoint(frame.args, 2) local result = func(codepoint) if func == p.lookup_name then -- Prevent code point labels such as <control-0000> from being -- interpreted as HTML tags. result = result:gsub("<", "&lt;") end return result end function p.is(frame) local func = get_func(frame.args, 1, "is_") -- is_Latin and is_valid_pagename take strings. if func == p.is_Latin or func == p.is_valid_pagename or func == p.is_rtl then return (func(frame.args[2])) else -- The rest take code points. local codepoint = get_codepoint(frame.args, 2) return (func(codepoint)) -- Adjust to one result. end end return p
</text>
<sha1>6kd0945q1e20ht5w0rqqfrsnwfn49yr</sha1>
</revision>
</page>
<page>
<title>Module:WikitextLC</title>
<ns>828</ns>
<id>3423242</id>
<revision>
<id>49364037</id>
<parentid>49363818</parentid>
<timestamp>2018-04-30T03:30:34Z</timestamp>
<contributor>
<username>Bluedeck</username>
<id>1351755</id>
</contributor>
<comment>EP</comment>
<model>Scribunto</model>
<format>text/plain</format>
<text bytes="1730" xml:space="preserve">
local p = {} --- Construct an inline conversion from a table input. -- @param content table of the form -- { ["zh-cn"]='foobar', ["zh-tw"]='firecat', ["zh-hk"]='' } -- @returns string -- "-{zh-cn:foobar;zh-tw:firecat;zh-hk:<span></span>}-" -- -- @fixme allow for generating output without "-{" "}-", so that -- it can be used with the last three wrappers. function p.selective( content ) local text = '-{' for variant, value in pairs( content ) do if value == '' then value = '<span></span>' end text = text .. variant .. ':' .. value .. ';' end text = text .. '}-' return text end --- Write some text with a limited set of variants to convert to -- -- @param content text to be written -- @param variant a variant (string), or a list of variants -- (semicolon-deliminated string, or table of strings) -- @param[opt] force convert even under "zh" (no conversion) locale function p.converted( content, variant, force ) if type( variant ) == 'table' then variant = table.concat( variant, ';' ) end return '-{' .. ( force and '' or 'zh;' ) .. variant .. '|' .. content .. '}-' end --- Wraps some "raw text" to not convert. -- -- @fixme Is the "R" flag some undocumented/undefined no-op magic? -- Are we using it instead of the old '-{' .. content .. '}-' -- to avoid confusion caused by a flag in the "content"? function p.raw( content ) return '-{R|' .. content .. '}-' end --- Wraps a title conversion rule. function p.title( content ) return '-{T|' .. content .. '}-' end --- Wraps a (hidden) conversion rule definition. function p.hidden( content ) return '-{H|' .. content .. '}-' end return p
</text>
<sha1>dsim175aipd78uyxx3rsjctf7w8hcru</sha1>
</revision>
</page>
<page>
<title>Module:Yesno</title>
<ns>828</ns>
<id>3802407</id>
<revision>
<id>50165983</id>
<parentid>45982128</parentid>
<timestamp>2018-06-28T16:13:29Z</timestamp>
<contributor>
<username>Lakokat</username>
<id>999313</id>
</contributor>
<comment>
editprotected: 由[[:User:Yangfl]]提出 加入对 t/f, 是/否, 开/关, 開/關 的支持
</comment>
<model>Scribunto</model>
<format>text/plain</format>
<text bytes="853" xml:space="preserve">
-- Function allowing for consistent treatment of boolean-like wikitext input. -- It works similarly to the template {{yesno}}. return function (val, default) -- If your wiki uses non-ascii characters for any of "yes", "no", etc., you -- should replace "val:lower()" with "mw.ustring.lower(val)" in the -- following line. val = type(val) == 'string' and val:lower() or val if val == nil then return nil elseif val == true or val == 'yes' or val == 'y' or val == 'true' or val == 't' or val == 'on' or val == '是' or val == '开' or val == '開' or tonumber(val) == 1 then return true elseif val == false or val == 'no' or val == 'n' or val == 'false' or val == 'f' or val == 'off' or val == '否' or val == '关' or val == '關' or tonumber(val) == 0 then return false else return default end end
</text>
<sha1>5hqvgmakelaihcallcdiwwqvnkeqhqo</sha1>
</revision>
</page>
</mediawiki>
